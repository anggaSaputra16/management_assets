services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: management-assets-db-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: management_assets
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - management-assets-network-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API (Development with hot reload)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: management-assets-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/management_assets
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres123
      DATABASE_NAME: management_assets
      JWT_SECRET: your_super_secret_jwt_key_change_in_production_2024
      JWT_REFRESH_SECRET: your_super_secret_refresh_key_change_in_production_2024
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USER: your_email@gmail.com
      EMAIL_PASS: your_email_password
      UPLOAD_PATH: /app/uploads
      # Hot reload options
      CHOKIDAR_USEPOLLING: "true"
      CHOKIDAR_INTERVAL: "1000"
      CHOKIDAR_IGNORE_INITIAL: "true"
      NODEMON_LEGACY_WATCH: "true"
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_uploads_dev:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - management-assets-network-dev
    command: >
      sh -c "
        echo 'Installing dependencies...' &&
        npm install &&
        echo 'Waiting for postgres...' &&
        sleep 5 &&
        echo 'Running database migrations...' &&
        npx prisma generate &&
        npx prisma migrate deploy &&
        echo 'Starting development server with hot reload...' &&
        npx nodemon --config nodemon.json src/index.js
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Application (Development with hot reload)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: management-assets-frontend-dev
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
      NEXT_PUBLIC_UPLOAD_URL: http://localhost:5000/uploads
      # Hot reload options for Next.js
      WATCHPACK_POLLING: "true"
      CHOKIDAR_USEPOLLING: "true"
      CHOKIDAR_INTERVAL: "1000"
      # Turn off telemetry during development
      NEXT_TELEMETRY_DISABLED: "1"
      # Use turbopack for faster refresh (Next.js 13+)
      NEXT_TURBO: "true"
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - management-assets-network-dev
    command: >
      sh -c "
        echo 'Installing frontend dependencies...' &&
        npm install &&
        echo 'Starting Next.js development server...' &&
        npm run dev -- --turbopack
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data_dev:
  backend_uploads_dev:

networks:
  management-assets-network-dev:
    driver: bridge
