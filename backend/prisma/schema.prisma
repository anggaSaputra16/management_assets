// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum UserRole {
  ADMIN
  ASSET_ADMIN
  MANAGER
  DEPARTMENT_USER
  TECHNICIAN
  AUDITOR
  TOP_MANAGEMENT
}

enum AssetStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  RETIRED
  DISPOSED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  ALLOCATED
  COMPLETED
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AuditStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
}

enum NotificationType {
  REQUEST_APPROVAL
  ASSET_ALLOCATION
  MAINTENANCE_DUE
  AUDIT_SCHEDULED
  GENERAL
}

enum SparePartCategory {
  HARDWARE
  SOFTWARE
  ACCESSORY
  CONSUMABLE
}

enum SparePartType {
  COMPONENT
  ACCESSORY
  CONSUMABLE
  TOOL
  SOFTWARE
}

enum SparePartStatus {
  ACTIVE
  DISCONTINUED
  OUT_OF_STOCK
  OBSOLETE
}

enum ProcurementStatus {
  ORDERED
  SHIPPED
  RECEIVED
  PARTIALLY_RECEIVED
  CANCELLED
}

enum PartUsageType {
  REPLACEMENT
  UPGRADE
  REPAIR
  INSTALLATION
  MAINTENANCE
  TRANSFER
}

enum ReplacementStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REGISTERED
  REJECTED
}

enum ComponentStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  TRANSFERRED
  REPLACED
  DISPOSED
}

// User Management
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  role        UserRole @default(DEPARTMENT_USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  
  // User activities
  assetRequests    AssetRequest[]
  approvedRequests AssetRequest[] @relation("ApprovedBy")
  assignedAssets   Asset[]        @relation("AssignedTo")
  maintenanceRecords MaintenanceRecord[] @relation("TechnicianMaintenance")
  managedDepartments Department[] @relation("DepartmentManager")
  auditRecords     AuditRecord[]
  notifications    Notification[]
  
  // Spare parts activities
  procurementsOrdered Procurement[] @relation("ProcurementOrderedBy")
  partUsages         PartUsage[] @relation("PartUsageUser")
  replacementsPerformed PartReplacement[] @relation("ReplacementPerformedBy")
  partRegistrations  NewPartRegistration[] @relation("PartRegistrationUser")
  
  // Component activities
  componentTransfers ComponentTransfer[] @relation("ComponentTransferUser")
  componentMaintenance ComponentMaintenance[] @relation("ComponentMaintenanceUser")
  
  // Inventory activities
  custodiedInventories Inventory[] @relation("InventoryCustodian")
  borrowedLoans       InventoryLoan[] @relation("LoanBorrower")
  approvedLoans       InventoryLoan[] @relation("LoanApprover")
  responsibleLoans    InventoryLoan[] @relation("LoanResponsible")
  
  @@map("users")
}

// Department Management
model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  managerId   String?
  budgetLimit Decimal? @db.Decimal(15, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  manager      User?          @relation("DepartmentManager", fields: [managerId], references: [id])
  users        User[]
  assets       Asset[]
  assetRequests AssetRequest[]
  inventories  Inventory[]    @relation("InventoryDepartment")
  
  @@map("departments")
}

// Location Management
model Location {
  id          String   @id @default(cuid())
  name        String
  building    String?
  floor       String?
  room        String?
  address     String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  assets Asset[]
  
  @@map("locations")
}

// Category Management
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  assets   Asset[]
  
  @@map("categories")
}

// Vendor Management
model Vendor {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  email       String?
  phone       String?
  address     String?
  contactPerson String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  assets Asset[]
  maintenanceContracts MaintenanceContract[]
  maintenanceRecords MaintenanceRecord[] @relation("MaintenanceVendor")
  spareParts SparePart[] @relation("SparePartVendor")
  procurements Procurement[] @relation("ProcurementVendor")
  
  @@map("vendors")
}

// Asset Management
model Asset {
  id              String      @id @default(cuid())
  assetTag        String      @unique
  name            String
  description     String?
  serialNumber    String?
  model           String?
  brand           String?
  purchaseDate    DateTime?
  purchasePrice   Decimal?    @db.Decimal(15, 2)
  currentValue    Decimal?    @db.Decimal(15, 2)
  warrantyExpiry  DateTime?
  status          AssetStatus @default(AVAILABLE)
  condition       String?
  notes           String?
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Foreign Keys
  categoryId      String
  vendorId        String?
  locationId      String?
  departmentId    String?
  assignedToId    String?
  
  // Relations
  category        Category     @relation(fields: [categoryId], references: [id])
  vendor          Vendor?      @relation(fields: [vendorId], references: [id])
  location        Location?    @relation(fields: [locationId], references: [id])
  department      Department?  @relation(fields: [departmentId], references: [id])
  assignedTo      User?        @relation("AssignedTo", fields: [assignedToId], references: [id])
  
  // Asset activities
  assetRequests   AssetRequest[]
  maintenanceRecords MaintenanceRecord[]
  auditRecords    AuditRecord[]
  disposalRecord  DisposalRecord?
  
  // Spare parts and components
  partUsages      PartUsage[] @relation("PartUsageAsset")
  partReplacements PartReplacement[] @relation("AssetReplacement")
  partRegistrations NewPartRegistration[] @relation("PartRegistration")
  components      AssetComponent[] @relation("AssetComponents")
  parentComponents AssetComponent[] @relation("ComponentParentAsset")
  transfersFrom   ComponentTransfer[] @relation("TransferFromAsset")
  transfersTo     ComponentTransfer[] @relation("TransferToAsset")
  
  // Inventory
  inventories     Inventory[] @relation("InventoryAsset")
  
  @@map("assets")
}

// Asset Request Management
model AssetRequest {
  id              String        @id @default(cuid())
  requestNumber   String        @unique
  description     String
  justification   String
  priority        String        @default("MEDIUM")
  status          RequestStatus @default(PENDING)
  requestedDate   DateTime      @default(now())
  approvedDate    DateTime?
  allocatedDate   DateTime?
  rejectionReason String?
  notes           String?
  
  // Foreign Keys
  requesterId     String
  departmentId    String
  assetId         String?
  approvedById    String?
  
  // Relations
  requester       User        @relation(fields: [requesterId], references: [id])
  department      Department  @relation(fields: [departmentId], references: [id])
  asset           Asset?      @relation(fields: [assetId], references: [id])
  approvedBy      User?       @relation("ApprovedBy", fields: [approvedById], references: [id])
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("asset_requests")
}

// Maintenance Management
model MaintenanceRecord {
  id              String            @id @default(cuid())
  maintenanceType String // PREVENTIVE, CORRECTIVE, EMERGENCY
  description     String
  scheduledDate   DateTime
  completedDate   DateTime?
  status          MaintenanceStatus @default(SCHEDULED)
  cost            Decimal?          @db.Decimal(15, 2)
  notes           String?
  
  // Foreign Keys
  assetId         String
  technicianId    String?
  vendorId        String?
  
  // Relations
  asset           Asset     @relation(fields: [assetId], references: [id])
  technician      User?     @relation("TechnicianMaintenance", fields: [technicianId], references: [id])
  vendor          Vendor?   @relation("MaintenanceVendor", fields: [vendorId], references: [id])
  partUsages      PartUsage[] @relation("PartUsageMaintenance")
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("maintenance_records")
}

// Maintenance Contracts
model MaintenanceContract {
  id              String    @id @default(cuid())
  contractNumber  String    @unique
  description     String
  startDate       DateTime
  endDate         DateTime
  cost            Decimal   @db.Decimal(15, 2)
  terms           String?
  isActive        Boolean   @default(true)
  
  // Foreign Keys
  vendorId        String
  
  // Relations
  vendor          Vendor    @relation(fields: [vendorId], references: [id])
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("maintenance_contracts")
}

// Audit Management
model AuditRecord {
  id              String      @id @default(cuid())
  auditType       String      // PHYSICAL, FINANCIAL, COMPLIANCE
  scheduledDate   DateTime
  completedDate   DateTime?
  status          AuditStatus @default(SCHEDULED)
  findings        String?
  recommendations String?
  
  // Foreign Keys
  assetId         String?
  auditorId       String
  
  // Relations
  asset           Asset?      @relation(fields: [assetId], references: [id])
  auditor         User        @relation(fields: [auditorId], references: [id])
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("audit_records")
}

// Asset Disposal
model DisposalRecord {
  id              String    @id @default(cuid())
  disposalType    String    // SALE, DONATION, SCRAP, TRANSFER
  disposalDate    DateTime
  disposalValue   Decimal?  @db.Decimal(15, 2)
  reason          String
  approvalReference String?
  notes           String?
  
  // Foreign Keys
  assetId         String    @unique
  
  // Relations
  asset           Asset     @relation(fields: [assetId], references: [id])
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("disposal_records")
}

// Notification System
model Notification {
  id              String           @id @default(cuid())
  title           String
  message         String
  type            NotificationType
  isRead          Boolean          @default(false)
  
  // Foreign Keys
  userId          String
  
  // Relations
  user            User             @relation(fields: [userId], references: [id])
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("notifications")
}

// System Settings
model SystemSettings {
  id              String   @id @default(cuid())
  key             String   @unique
  value           String
  description     String?
  isActive        Boolean  @default(true)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("system_settings")
}

// Spare Parts Management
model SparePart {
  id              String            @id @default(cuid())
  partNumber      String            @unique
  name            String
  description     String?
  brand           String?
  model           String?
  category        SparePartCategory @default(HARDWARE)
  partType        SparePartType     @default(COMPONENT)
  status          SparePartStatus   @default(ACTIVE)
  unitPrice       Decimal           @db.Decimal(10, 2)
  stockLevel      Int               @default(0)
  minStockLevel   Int               @default(10)
  maxStockLevel   Int               @default(100)
  reorderPoint    Int               @default(15)
  storageLocation String?
  specifications  Json?
  compatibleWith  String[]
  notes           String?
  isActive        Boolean           @default(true)
  
  // Foreign Keys
  vendorId        String?
  
  // Relations
  vendor          Vendor?           @relation("SparePartVendor", fields: [vendorId], references: [id])
  procurements    Procurement[]
  usages          PartUsage[]
  replacements    PartReplacement[] @relation("NewPart")
  oldReplacements PartReplacement[] @relation("OldPart")
  registrations   NewPartRegistration[]
  sourceComponents AssetComponent[] @relation("ComponentSourcePart")
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("spare_parts")
}

model Procurement {
  id                String            @id @default(cuid())
  procurementNumber String            @unique
  quantity          Int
  unitPrice         Decimal           @db.Decimal(10, 2)
  totalCost         Decimal           @db.Decimal(12, 2)
  status            ProcurementStatus @default(ORDERED)
  orderedDate       DateTime          @default(now())
  expectedDate      DateTime?
  receivedDate      DateTime?
  receivedQuantity  Int?
  invoiceNumber     String?
  notes             String?
  
  // Foreign Keys
  partId            String
  vendorId          String?
  orderedById       String
  
  // Relations
  part              SparePart         @relation(fields: [partId], references: [id])
  vendor            Vendor?           @relation("ProcurementVendor", fields: [vendorId], references: [id])
  orderedBy         User              @relation("ProcurementOrderedBy", fields: [orderedById], references: [id])
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@map("procurements")
}

model PartUsage {
  id              String        @id @default(cuid())
  quantity        Int
  usageType       PartUsageType @default(INSTALLATION)
  usageDate       DateTime      @default(now())
  notes           String?
  
  // Foreign Keys
  partId          String
  assetId         String?
  componentId     String?
  maintenanceId   String?
  usedById        String
  
  // Relations
  part            SparePart     @relation(fields: [partId], references: [id])
  asset           Asset?        @relation("PartUsageAsset", fields: [assetId], references: [id])
  component       AssetComponent? @relation(fields: [componentId], references: [id])
  maintenance     MaintenanceRecord? @relation("PartUsageMaintenance", fields: [maintenanceId], references: [id])
  usedBy          User          @relation("PartUsageUser", fields: [usedById], references: [id])
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@map("part_usages")
}

model PartReplacement {
  id                String            @id @default(cuid())
  replacementNumber String            @unique
  reason            String
  status            ReplacementStatus @default(PLANNED)
  plannedDate       DateTime?
  completedDate     DateTime?
  cost              Decimal?          @db.Decimal(10, 2)
  notes             String?
  
  // Foreign Keys
  oldPartId         String?
  oldComponentId    String?
  newPartId         String
  assetId           String
  performedById     String?
  
  // Relations
  oldPart           SparePart?        @relation("OldPart", fields: [oldPartId], references: [id])
  oldComponent      AssetComponent?   @relation("OldComponent", fields: [oldComponentId], references: [id])
  newPart           SparePart         @relation("NewPart", fields: [newPartId], references: [id])
  asset             Asset             @relation("AssetReplacement", fields: [assetId], references: [id])
  performedBy       User?             @relation("ReplacementPerformedBy", fields: [performedById], references: [id])
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@map("part_replacements")
}

model NewPartRegistration {
  id                String             @id @default(cuid())
  registrationNumber String            @unique
  serialNumber      String?
  assetTag          String?
  status            RegistrationStatus @default(PENDING)
  registeredDate    DateTime?
  notes             String?
  
  // Foreign Keys
  partId            String
  assetId           String?
  registeredById    String
  
  // Relations
  part              SparePart          @relation(fields: [partId], references: [id])
  asset             Asset?             @relation("PartRegistration", fields: [assetId], references: [id])
  registeredBy      User               @relation("PartRegistrationUser", fields: [registeredById], references: [id])
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  @@map("new_part_registrations")
}

// Asset Components for Decomposition
model AssetComponent {
  id                String          @id @default(cuid())
  name              String
  description       String?
  partNumber        String?
  serialNumber      String?
  brand             String?
  model             String?
  status            ComponentStatus @default(ACTIVE)
  purchaseDate      DateTime?
  purchasePrice     Decimal?        @db.Decimal(10, 2)
  warrantyExpiry    DateTime?
  isReplaceable     Boolean         @default(true)
  isTransferable    Boolean         @default(true)
  notes             String?
  specifications    Json?
  
  // Foreign Keys
  assetId           String
  parentAssetId     String?
  sourcePartId      String?
  
  // Relations
  asset             Asset           @relation("AssetComponents", fields: [assetId], references: [id])
  parentAsset       Asset?          @relation("ComponentParentAsset", fields: [parentAssetId], references: [id])
  sourcePart        SparePart?      @relation("ComponentSourcePart", fields: [sourcePartId], references: [id])
  
  // Component activities
  usages            PartUsage[]
  replacements      PartReplacement[] @relation("OldComponent")
  transfers         ComponentTransfer[]
  maintenanceRecords ComponentMaintenance[]
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@map("asset_components")
}

model ComponentTransfer {
  id              String    @id @default(cuid())
  transferNumber  String    @unique
  reason          String
  transferDate    DateTime  @default(now())
  notes           String?
  
  // Foreign Keys
  componentId     String
  fromAssetId     String
  toAssetId       String
  transferredById String
  
  // Relations
  component       AssetComponent @relation(fields: [componentId], references: [id])
  fromAsset       Asset         @relation("TransferFromAsset", fields: [fromAssetId], references: [id])
  toAsset         Asset         @relation("TransferToAsset", fields: [toAssetId], references: [id])
  transferredBy   User          @relation("ComponentTransferUser", fields: [transferredById], references: [id])
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@map("component_transfers")
}

model ComponentMaintenance {
  id              String    @id @default(cuid())
  description     String
  maintenanceType String
  maintenanceDate DateTime  @default(now())
  cost            Decimal?  @db.Decimal(10, 2)
  notes           String?
  
  // Foreign Keys
  componentId     String
  performedById   String
  
  // Relations
  component       AssetComponent @relation(fields: [componentId], references: [id])
  performedBy     User          @relation("ComponentMaintenanceUser", fields: [performedById], references: [id])
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@map("component_maintenance_records")
}

// Inventory Management
model Inventory {
  id              String    @id @default(cuid())
  inventoryTag    String    @unique
  quantity        Int       @default(1)
  availableQty    Int       @default(1)
  condition       String    @default("GOOD") // GOOD, FAIR, POOR, DAMAGED
  status          String    @default("AVAILABLE") // AVAILABLE, LOANED, MAINTENANCE, RETIRED
  location        String?
  notes           String?
  minStockLevel   Int?      @default(1)
  
  // Foreign Keys
  assetId         String
  departmentId    String
  custodianId     String?   // Person responsible for this inventory
  
  // Relations
  asset           Asset     @relation("InventoryAsset", fields: [assetId], references: [id])
  department      Department @relation("InventoryDepartment", fields: [departmentId], references: [id])
  custodian       User?     @relation("InventoryCustodian", fields: [custodianId], references: [id])
  loans           InventoryLoan[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("inventories")
}

// Inventory Loan Management
model InventoryLoan {
  id              String    @id @default(cuid())
  loanNumber      String    @unique
  purpose         String
  quantity        Int       @default(1)
  loanDate        DateTime  @default(now())
  expectedReturnDate DateTime
  actualReturnDate DateTime?
  status          String    @default("ACTIVE") // ACTIVE, RETURNED, OVERDUE, LOST
  condition       String?   // Condition when returned
  notes           String?
  approvalNotes   String?
  
  // Foreign Keys
  inventoryId     String
  borrowerId      String
  approvedById    String?
  responsibleId   String    // Person responsible for the loan
  
  // Relations
  inventory       Inventory @relation(fields: [inventoryId], references: [id])
  borrower        User      @relation("LoanBorrower", fields: [borrowerId], references: [id])
  approvedBy      User?     @relation("LoanApprover", fields: [approvedById], references: [id])
  responsible     User      @relation("LoanResponsible", fields: [responsibleId], references: [id])
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("inventory_loans")
}
