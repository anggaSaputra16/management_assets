
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Vendor
 * 
 */
export type Vendor = $Result.DefaultSelection<Prisma.$VendorPayload>
/**
 * Model Asset
 * 
 */
export type Asset = $Result.DefaultSelection<Prisma.$AssetPayload>
/**
 * Model AssetRequest
 * 
 */
export type AssetRequest = $Result.DefaultSelection<Prisma.$AssetRequestPayload>
/**
 * Model MaintenanceRecord
 * 
 */
export type MaintenanceRecord = $Result.DefaultSelection<Prisma.$MaintenanceRecordPayload>
/**
 * Model MaintenanceContract
 * 
 */
export type MaintenanceContract = $Result.DefaultSelection<Prisma.$MaintenanceContractPayload>
/**
 * Model AuditRecord
 * 
 */
export type AuditRecord = $Result.DefaultSelection<Prisma.$AuditRecordPayload>
/**
 * Model DisposalRecord
 * 
 */
export type DisposalRecord = $Result.DefaultSelection<Prisma.$DisposalRecordPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model SystemSettings
 * 
 */
export type SystemSettings = $Result.DefaultSelection<Prisma.$SystemSettingsPayload>
/**
 * Model SparePart
 * 
 */
export type SparePart = $Result.DefaultSelection<Prisma.$SparePartPayload>
/**
 * Model Procurement
 * 
 */
export type Procurement = $Result.DefaultSelection<Prisma.$ProcurementPayload>
/**
 * Model PartUsage
 * 
 */
export type PartUsage = $Result.DefaultSelection<Prisma.$PartUsagePayload>
/**
 * Model PartReplacement
 * 
 */
export type PartReplacement = $Result.DefaultSelection<Prisma.$PartReplacementPayload>
/**
 * Model NewPartRegistration
 * 
 */
export type NewPartRegistration = $Result.DefaultSelection<Prisma.$NewPartRegistrationPayload>
/**
 * Model AssetComponent
 * 
 */
export type AssetComponent = $Result.DefaultSelection<Prisma.$AssetComponentPayload>
/**
 * Model ComponentTransfer
 * 
 */
export type ComponentTransfer = $Result.DefaultSelection<Prisma.$ComponentTransferPayload>
/**
 * Model ComponentMaintenance
 * 
 */
export type ComponentMaintenance = $Result.DefaultSelection<Prisma.$ComponentMaintenancePayload>
/**
 * Model Inventory
 * 
 */
export type Inventory = $Result.DefaultSelection<Prisma.$InventoryPayload>
/**
 * Model InventoryLoan
 * 
 */
export type InventoryLoan = $Result.DefaultSelection<Prisma.$InventoryLoanPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  ASSET_ADMIN: 'ASSET_ADMIN',
  MANAGER: 'MANAGER',
  DEPARTMENT_USER: 'DEPARTMENT_USER',
  TECHNICIAN: 'TECHNICIAN',
  AUDITOR: 'AUDITOR',
  TOP_MANAGEMENT: 'TOP_MANAGEMENT'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const AssetStatus: {
  AVAILABLE: 'AVAILABLE',
  IN_USE: 'IN_USE',
  MAINTENANCE: 'MAINTENANCE',
  RETIRED: 'RETIRED',
  DISPOSED: 'DISPOSED'
};

export type AssetStatus = (typeof AssetStatus)[keyof typeof AssetStatus]


export const RequestStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ALLOCATED: 'ALLOCATED',
  COMPLETED: 'COMPLETED'
};

export type RequestStatus = (typeof RequestStatus)[keyof typeof RequestStatus]


export const MaintenanceStatus: {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type MaintenanceStatus = (typeof MaintenanceStatus)[keyof typeof MaintenanceStatus]


export const AuditStatus: {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

export type AuditStatus = (typeof AuditStatus)[keyof typeof AuditStatus]


export const NotificationType: {
  REQUEST_APPROVAL: 'REQUEST_APPROVAL',
  ASSET_ALLOCATION: 'ASSET_ALLOCATION',
  MAINTENANCE_DUE: 'MAINTENANCE_DUE',
  AUDIT_SCHEDULED: 'AUDIT_SCHEDULED',
  GENERAL: 'GENERAL'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const SparePartCategory: {
  HARDWARE: 'HARDWARE',
  SOFTWARE: 'SOFTWARE',
  ACCESSORY: 'ACCESSORY',
  CONSUMABLE: 'CONSUMABLE'
};

export type SparePartCategory = (typeof SparePartCategory)[keyof typeof SparePartCategory]


export const SparePartType: {
  COMPONENT: 'COMPONENT',
  ACCESSORY: 'ACCESSORY',
  CONSUMABLE: 'CONSUMABLE',
  TOOL: 'TOOL',
  SOFTWARE: 'SOFTWARE'
};

export type SparePartType = (typeof SparePartType)[keyof typeof SparePartType]


export const SparePartStatus: {
  ACTIVE: 'ACTIVE',
  DISCONTINUED: 'DISCONTINUED',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  OBSOLETE: 'OBSOLETE'
};

export type SparePartStatus = (typeof SparePartStatus)[keyof typeof SparePartStatus]


export const ProcurementStatus: {
  ORDERED: 'ORDERED',
  SHIPPED: 'SHIPPED',
  RECEIVED: 'RECEIVED',
  PARTIALLY_RECEIVED: 'PARTIALLY_RECEIVED',
  CANCELLED: 'CANCELLED'
};

export type ProcurementStatus = (typeof ProcurementStatus)[keyof typeof ProcurementStatus]


export const PartUsageType: {
  REPLACEMENT: 'REPLACEMENT',
  UPGRADE: 'UPGRADE',
  REPAIR: 'REPAIR',
  INSTALLATION: 'INSTALLATION',
  MAINTENANCE: 'MAINTENANCE',
  TRANSFER: 'TRANSFER'
};

export type PartUsageType = (typeof PartUsageType)[keyof typeof PartUsageType]


export const ReplacementStatus: {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type ReplacementStatus = (typeof ReplacementStatus)[keyof typeof ReplacementStatus]


export const RegistrationStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REGISTERED: 'REGISTERED',
  REJECTED: 'REJECTED'
};

export type RegistrationStatus = (typeof RegistrationStatus)[keyof typeof RegistrationStatus]


export const ComponentStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  TRANSFERRED: 'TRANSFERRED',
  REPLACED: 'REPLACED',
  DISPOSED: 'DISPOSED'
};

export type ComponentStatus = (typeof ComponentStatus)[keyof typeof ComponentStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type AssetStatus = $Enums.AssetStatus

export const AssetStatus: typeof $Enums.AssetStatus

export type RequestStatus = $Enums.RequestStatus

export const RequestStatus: typeof $Enums.RequestStatus

export type MaintenanceStatus = $Enums.MaintenanceStatus

export const MaintenanceStatus: typeof $Enums.MaintenanceStatus

export type AuditStatus = $Enums.AuditStatus

export const AuditStatus: typeof $Enums.AuditStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type SparePartCategory = $Enums.SparePartCategory

export const SparePartCategory: typeof $Enums.SparePartCategory

export type SparePartType = $Enums.SparePartType

export const SparePartType: typeof $Enums.SparePartType

export type SparePartStatus = $Enums.SparePartStatus

export const SparePartStatus: typeof $Enums.SparePartStatus

export type ProcurementStatus = $Enums.ProcurementStatus

export const ProcurementStatus: typeof $Enums.ProcurementStatus

export type PartUsageType = $Enums.PartUsageType

export const PartUsageType: typeof $Enums.PartUsageType

export type ReplacementStatus = $Enums.ReplacementStatus

export const ReplacementStatus: typeof $Enums.ReplacementStatus

export type RegistrationStatus = $Enums.RegistrationStatus

export const RegistrationStatus: typeof $Enums.RegistrationStatus

export type ComponentStatus = $Enums.ComponentStatus

export const ComponentStatus: typeof $Enums.ComponentStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.vendor`: Exposes CRUD operations for the **Vendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendors
    * const vendors = await prisma.vendor.findMany()
    * ```
    */
  get vendor(): Prisma.VendorDelegate<ExtArgs>;

  /**
   * `prisma.asset`: Exposes CRUD operations for the **Asset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assets
    * const assets = await prisma.asset.findMany()
    * ```
    */
  get asset(): Prisma.AssetDelegate<ExtArgs>;

  /**
   * `prisma.assetRequest`: Exposes CRUD operations for the **AssetRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssetRequests
    * const assetRequests = await prisma.assetRequest.findMany()
    * ```
    */
  get assetRequest(): Prisma.AssetRequestDelegate<ExtArgs>;

  /**
   * `prisma.maintenanceRecord`: Exposes CRUD operations for the **MaintenanceRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaintenanceRecords
    * const maintenanceRecords = await prisma.maintenanceRecord.findMany()
    * ```
    */
  get maintenanceRecord(): Prisma.MaintenanceRecordDelegate<ExtArgs>;

  /**
   * `prisma.maintenanceContract`: Exposes CRUD operations for the **MaintenanceContract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaintenanceContracts
    * const maintenanceContracts = await prisma.maintenanceContract.findMany()
    * ```
    */
  get maintenanceContract(): Prisma.MaintenanceContractDelegate<ExtArgs>;

  /**
   * `prisma.auditRecord`: Exposes CRUD operations for the **AuditRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditRecords
    * const auditRecords = await prisma.auditRecord.findMany()
    * ```
    */
  get auditRecord(): Prisma.AuditRecordDelegate<ExtArgs>;

  /**
   * `prisma.disposalRecord`: Exposes CRUD operations for the **DisposalRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DisposalRecords
    * const disposalRecords = await prisma.disposalRecord.findMany()
    * ```
    */
  get disposalRecord(): Prisma.DisposalRecordDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.systemSettings`: Exposes CRUD operations for the **SystemSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemSettings
    * const systemSettings = await prisma.systemSettings.findMany()
    * ```
    */
  get systemSettings(): Prisma.SystemSettingsDelegate<ExtArgs>;

  /**
   * `prisma.sparePart`: Exposes CRUD operations for the **SparePart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpareParts
    * const spareParts = await prisma.sparePart.findMany()
    * ```
    */
  get sparePart(): Prisma.SparePartDelegate<ExtArgs>;

  /**
   * `prisma.procurement`: Exposes CRUD operations for the **Procurement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Procurements
    * const procurements = await prisma.procurement.findMany()
    * ```
    */
  get procurement(): Prisma.ProcurementDelegate<ExtArgs>;

  /**
   * `prisma.partUsage`: Exposes CRUD operations for the **PartUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PartUsages
    * const partUsages = await prisma.partUsage.findMany()
    * ```
    */
  get partUsage(): Prisma.PartUsageDelegate<ExtArgs>;

  /**
   * `prisma.partReplacement`: Exposes CRUD operations for the **PartReplacement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PartReplacements
    * const partReplacements = await prisma.partReplacement.findMany()
    * ```
    */
  get partReplacement(): Prisma.PartReplacementDelegate<ExtArgs>;

  /**
   * `prisma.newPartRegistration`: Exposes CRUD operations for the **NewPartRegistration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NewPartRegistrations
    * const newPartRegistrations = await prisma.newPartRegistration.findMany()
    * ```
    */
  get newPartRegistration(): Prisma.NewPartRegistrationDelegate<ExtArgs>;

  /**
   * `prisma.assetComponent`: Exposes CRUD operations for the **AssetComponent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssetComponents
    * const assetComponents = await prisma.assetComponent.findMany()
    * ```
    */
  get assetComponent(): Prisma.AssetComponentDelegate<ExtArgs>;

  /**
   * `prisma.componentTransfer`: Exposes CRUD operations for the **ComponentTransfer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComponentTransfers
    * const componentTransfers = await prisma.componentTransfer.findMany()
    * ```
    */
  get componentTransfer(): Prisma.ComponentTransferDelegate<ExtArgs>;

  /**
   * `prisma.componentMaintenance`: Exposes CRUD operations for the **ComponentMaintenance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComponentMaintenances
    * const componentMaintenances = await prisma.componentMaintenance.findMany()
    * ```
    */
  get componentMaintenance(): Prisma.ComponentMaintenanceDelegate<ExtArgs>;

  /**
   * `prisma.inventory`: Exposes CRUD operations for the **Inventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inventories
    * const inventories = await prisma.inventory.findMany()
    * ```
    */
  get inventory(): Prisma.InventoryDelegate<ExtArgs>;

  /**
   * `prisma.inventoryLoan`: Exposes CRUD operations for the **InventoryLoan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryLoans
    * const inventoryLoans = await prisma.inventoryLoan.findMany()
    * ```
    */
  get inventoryLoan(): Prisma.InventoryLoanDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Department: 'Department',
    Location: 'Location',
    Category: 'Category',
    Vendor: 'Vendor',
    Asset: 'Asset',
    AssetRequest: 'AssetRequest',
    MaintenanceRecord: 'MaintenanceRecord',
    MaintenanceContract: 'MaintenanceContract',
    AuditRecord: 'AuditRecord',
    DisposalRecord: 'DisposalRecord',
    Notification: 'Notification',
    SystemSettings: 'SystemSettings',
    SparePart: 'SparePart',
    Procurement: 'Procurement',
    PartUsage: 'PartUsage',
    PartReplacement: 'PartReplacement',
    NewPartRegistration: 'NewPartRegistration',
    AssetComponent: 'AssetComponent',
    ComponentTransfer: 'ComponentTransfer',
    ComponentMaintenance: 'ComponentMaintenance',
    Inventory: 'Inventory',
    InventoryLoan: 'InventoryLoan'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "department" | "location" | "category" | "vendor" | "asset" | "assetRequest" | "maintenanceRecord" | "maintenanceContract" | "auditRecord" | "disposalRecord" | "notification" | "systemSettings" | "sparePart" | "procurement" | "partUsage" | "partReplacement" | "newPartRegistration" | "assetComponent" | "componentTransfer" | "componentMaintenance" | "inventory" | "inventoryLoan"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Vendor: {
        payload: Prisma.$VendorPayload<ExtArgs>
        fields: Prisma.VendorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findFirst: {
            args: Prisma.VendorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findMany: {
            args: Prisma.VendorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          create: {
            args: Prisma.VendorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          createMany: {
            args: Prisma.VendorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VendorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          delete: {
            args: Prisma.VendorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          update: {
            args: Prisma.VendorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          deleteMany: {
            args: Prisma.VendorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VendorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          aggregate: {
            args: Prisma.VendorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendor>
          }
          groupBy: {
            args: Prisma.VendorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendorCountArgs<ExtArgs>
            result: $Utils.Optional<VendorCountAggregateOutputType> | number
          }
        }
      }
      Asset: {
        payload: Prisma.$AssetPayload<ExtArgs>
        fields: Prisma.AssetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findFirst: {
            args: Prisma.AssetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findMany: {
            args: Prisma.AssetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          create: {
            args: Prisma.AssetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          createMany: {
            args: Prisma.AssetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          delete: {
            args: Prisma.AssetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          update: {
            args: Prisma.AssetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          deleteMany: {
            args: Prisma.AssetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          aggregate: {
            args: Prisma.AssetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAsset>
          }
          groupBy: {
            args: Prisma.AssetGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetCountArgs<ExtArgs>
            result: $Utils.Optional<AssetCountAggregateOutputType> | number
          }
        }
      }
      AssetRequest: {
        payload: Prisma.$AssetRequestPayload<ExtArgs>
        fields: Prisma.AssetRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRequestPayload>
          }
          findFirst: {
            args: Prisma.AssetRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRequestPayload>
          }
          findMany: {
            args: Prisma.AssetRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRequestPayload>[]
          }
          create: {
            args: Prisma.AssetRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRequestPayload>
          }
          createMany: {
            args: Prisma.AssetRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRequestPayload>[]
          }
          delete: {
            args: Prisma.AssetRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRequestPayload>
          }
          update: {
            args: Prisma.AssetRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRequestPayload>
          }
          deleteMany: {
            args: Prisma.AssetRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssetRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRequestPayload>
          }
          aggregate: {
            args: Prisma.AssetRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssetRequest>
          }
          groupBy: {
            args: Prisma.AssetRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetRequestCountArgs<ExtArgs>
            result: $Utils.Optional<AssetRequestCountAggregateOutputType> | number
          }
        }
      }
      MaintenanceRecord: {
        payload: Prisma.$MaintenanceRecordPayload<ExtArgs>
        fields: Prisma.MaintenanceRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaintenanceRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaintenanceRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRecordPayload>
          }
          findFirst: {
            args: Prisma.MaintenanceRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaintenanceRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRecordPayload>
          }
          findMany: {
            args: Prisma.MaintenanceRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRecordPayload>[]
          }
          create: {
            args: Prisma.MaintenanceRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRecordPayload>
          }
          createMany: {
            args: Prisma.MaintenanceRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaintenanceRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRecordPayload>[]
          }
          delete: {
            args: Prisma.MaintenanceRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRecordPayload>
          }
          update: {
            args: Prisma.MaintenanceRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRecordPayload>
          }
          deleteMany: {
            args: Prisma.MaintenanceRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaintenanceRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MaintenanceRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRecordPayload>
          }
          aggregate: {
            args: Prisma.MaintenanceRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaintenanceRecord>
          }
          groupBy: {
            args: Prisma.MaintenanceRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaintenanceRecordCountArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceRecordCountAggregateOutputType> | number
          }
        }
      }
      MaintenanceContract: {
        payload: Prisma.$MaintenanceContractPayload<ExtArgs>
        fields: Prisma.MaintenanceContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaintenanceContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaintenanceContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceContractPayload>
          }
          findFirst: {
            args: Prisma.MaintenanceContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaintenanceContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceContractPayload>
          }
          findMany: {
            args: Prisma.MaintenanceContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceContractPayload>[]
          }
          create: {
            args: Prisma.MaintenanceContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceContractPayload>
          }
          createMany: {
            args: Prisma.MaintenanceContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaintenanceContractCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceContractPayload>[]
          }
          delete: {
            args: Prisma.MaintenanceContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceContractPayload>
          }
          update: {
            args: Prisma.MaintenanceContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceContractPayload>
          }
          deleteMany: {
            args: Prisma.MaintenanceContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaintenanceContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MaintenanceContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceContractPayload>
          }
          aggregate: {
            args: Prisma.MaintenanceContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaintenanceContract>
          }
          groupBy: {
            args: Prisma.MaintenanceContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaintenanceContractCountArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceContractCountAggregateOutputType> | number
          }
        }
      }
      AuditRecord: {
        payload: Prisma.$AuditRecordPayload<ExtArgs>
        fields: Prisma.AuditRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditRecordPayload>
          }
          findFirst: {
            args: Prisma.AuditRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditRecordPayload>
          }
          findMany: {
            args: Prisma.AuditRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditRecordPayload>[]
          }
          create: {
            args: Prisma.AuditRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditRecordPayload>
          }
          createMany: {
            args: Prisma.AuditRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditRecordPayload>[]
          }
          delete: {
            args: Prisma.AuditRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditRecordPayload>
          }
          update: {
            args: Prisma.AuditRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditRecordPayload>
          }
          deleteMany: {
            args: Prisma.AuditRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditRecordPayload>
          }
          aggregate: {
            args: Prisma.AuditRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditRecord>
          }
          groupBy: {
            args: Prisma.AuditRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditRecordCountArgs<ExtArgs>
            result: $Utils.Optional<AuditRecordCountAggregateOutputType> | number
          }
        }
      }
      DisposalRecord: {
        payload: Prisma.$DisposalRecordPayload<ExtArgs>
        fields: Prisma.DisposalRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DisposalRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisposalRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DisposalRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisposalRecordPayload>
          }
          findFirst: {
            args: Prisma.DisposalRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisposalRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DisposalRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisposalRecordPayload>
          }
          findMany: {
            args: Prisma.DisposalRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisposalRecordPayload>[]
          }
          create: {
            args: Prisma.DisposalRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisposalRecordPayload>
          }
          createMany: {
            args: Prisma.DisposalRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DisposalRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisposalRecordPayload>[]
          }
          delete: {
            args: Prisma.DisposalRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisposalRecordPayload>
          }
          update: {
            args: Prisma.DisposalRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisposalRecordPayload>
          }
          deleteMany: {
            args: Prisma.DisposalRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DisposalRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DisposalRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisposalRecordPayload>
          }
          aggregate: {
            args: Prisma.DisposalRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDisposalRecord>
          }
          groupBy: {
            args: Prisma.DisposalRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<DisposalRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.DisposalRecordCountArgs<ExtArgs>
            result: $Utils.Optional<DisposalRecordCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      SystemSettings: {
        payload: Prisma.$SystemSettingsPayload<ExtArgs>
        fields: Prisma.SystemSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          findFirst: {
            args: Prisma.SystemSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          findMany: {
            args: Prisma.SystemSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          create: {
            args: Prisma.SystemSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          createMany: {
            args: Prisma.SystemSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          delete: {
            args: Prisma.SystemSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          update: {
            args: Prisma.SystemSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          deleteMany: {
            args: Prisma.SystemSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          aggregate: {
            args: Prisma.SystemSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemSettings>
          }
          groupBy: {
            args: Prisma.SystemSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingsCountAggregateOutputType> | number
          }
        }
      }
      SparePart: {
        payload: Prisma.$SparePartPayload<ExtArgs>
        fields: Prisma.SparePartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SparePartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SparePartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>
          }
          findFirst: {
            args: Prisma.SparePartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SparePartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>
          }
          findMany: {
            args: Prisma.SparePartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>[]
          }
          create: {
            args: Prisma.SparePartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>
          }
          createMany: {
            args: Prisma.SparePartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SparePartCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>[]
          }
          delete: {
            args: Prisma.SparePartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>
          }
          update: {
            args: Prisma.SparePartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>
          }
          deleteMany: {
            args: Prisma.SparePartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SparePartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SparePartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>
          }
          aggregate: {
            args: Prisma.SparePartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSparePart>
          }
          groupBy: {
            args: Prisma.SparePartGroupByArgs<ExtArgs>
            result: $Utils.Optional<SparePartGroupByOutputType>[]
          }
          count: {
            args: Prisma.SparePartCountArgs<ExtArgs>
            result: $Utils.Optional<SparePartCountAggregateOutputType> | number
          }
        }
      }
      Procurement: {
        payload: Prisma.$ProcurementPayload<ExtArgs>
        fields: Prisma.ProcurementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcurementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcurementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementPayload>
          }
          findFirst: {
            args: Prisma.ProcurementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcurementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementPayload>
          }
          findMany: {
            args: Prisma.ProcurementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementPayload>[]
          }
          create: {
            args: Prisma.ProcurementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementPayload>
          }
          createMany: {
            args: Prisma.ProcurementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProcurementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementPayload>[]
          }
          delete: {
            args: Prisma.ProcurementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementPayload>
          }
          update: {
            args: Prisma.ProcurementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementPayload>
          }
          deleteMany: {
            args: Prisma.ProcurementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProcurementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProcurementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementPayload>
          }
          aggregate: {
            args: Prisma.ProcurementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProcurement>
          }
          groupBy: {
            args: Prisma.ProcurementGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProcurementGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcurementCountArgs<ExtArgs>
            result: $Utils.Optional<ProcurementCountAggregateOutputType> | number
          }
        }
      }
      PartUsage: {
        payload: Prisma.$PartUsagePayload<ExtArgs>
        fields: Prisma.PartUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartUsagePayload>
          }
          findFirst: {
            args: Prisma.PartUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartUsagePayload>
          }
          findMany: {
            args: Prisma.PartUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartUsagePayload>[]
          }
          create: {
            args: Prisma.PartUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartUsagePayload>
          }
          createMany: {
            args: Prisma.PartUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartUsagePayload>[]
          }
          delete: {
            args: Prisma.PartUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartUsagePayload>
          }
          update: {
            args: Prisma.PartUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartUsagePayload>
          }
          deleteMany: {
            args: Prisma.PartUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PartUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartUsagePayload>
          }
          aggregate: {
            args: Prisma.PartUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartUsage>
          }
          groupBy: {
            args: Prisma.PartUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartUsageCountArgs<ExtArgs>
            result: $Utils.Optional<PartUsageCountAggregateOutputType> | number
          }
        }
      }
      PartReplacement: {
        payload: Prisma.$PartReplacementPayload<ExtArgs>
        fields: Prisma.PartReplacementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartReplacementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartReplacementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartReplacementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartReplacementPayload>
          }
          findFirst: {
            args: Prisma.PartReplacementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartReplacementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartReplacementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartReplacementPayload>
          }
          findMany: {
            args: Prisma.PartReplacementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartReplacementPayload>[]
          }
          create: {
            args: Prisma.PartReplacementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartReplacementPayload>
          }
          createMany: {
            args: Prisma.PartReplacementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartReplacementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartReplacementPayload>[]
          }
          delete: {
            args: Prisma.PartReplacementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartReplacementPayload>
          }
          update: {
            args: Prisma.PartReplacementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartReplacementPayload>
          }
          deleteMany: {
            args: Prisma.PartReplacementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartReplacementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PartReplacementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartReplacementPayload>
          }
          aggregate: {
            args: Prisma.PartReplacementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartReplacement>
          }
          groupBy: {
            args: Prisma.PartReplacementGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartReplacementGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartReplacementCountArgs<ExtArgs>
            result: $Utils.Optional<PartReplacementCountAggregateOutputType> | number
          }
        }
      }
      NewPartRegistration: {
        payload: Prisma.$NewPartRegistrationPayload<ExtArgs>
        fields: Prisma.NewPartRegistrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewPartRegistrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewPartRegistrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewPartRegistrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewPartRegistrationPayload>
          }
          findFirst: {
            args: Prisma.NewPartRegistrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewPartRegistrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewPartRegistrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewPartRegistrationPayload>
          }
          findMany: {
            args: Prisma.NewPartRegistrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewPartRegistrationPayload>[]
          }
          create: {
            args: Prisma.NewPartRegistrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewPartRegistrationPayload>
          }
          createMany: {
            args: Prisma.NewPartRegistrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NewPartRegistrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewPartRegistrationPayload>[]
          }
          delete: {
            args: Prisma.NewPartRegistrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewPartRegistrationPayload>
          }
          update: {
            args: Prisma.NewPartRegistrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewPartRegistrationPayload>
          }
          deleteMany: {
            args: Prisma.NewPartRegistrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NewPartRegistrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NewPartRegistrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewPartRegistrationPayload>
          }
          aggregate: {
            args: Prisma.NewPartRegistrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNewPartRegistration>
          }
          groupBy: {
            args: Prisma.NewPartRegistrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NewPartRegistrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewPartRegistrationCountArgs<ExtArgs>
            result: $Utils.Optional<NewPartRegistrationCountAggregateOutputType> | number
          }
        }
      }
      AssetComponent: {
        payload: Prisma.$AssetComponentPayload<ExtArgs>
        fields: Prisma.AssetComponentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetComponentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetComponentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetComponentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetComponentPayload>
          }
          findFirst: {
            args: Prisma.AssetComponentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetComponentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetComponentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetComponentPayload>
          }
          findMany: {
            args: Prisma.AssetComponentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetComponentPayload>[]
          }
          create: {
            args: Prisma.AssetComponentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetComponentPayload>
          }
          createMany: {
            args: Prisma.AssetComponentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetComponentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetComponentPayload>[]
          }
          delete: {
            args: Prisma.AssetComponentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetComponentPayload>
          }
          update: {
            args: Prisma.AssetComponentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetComponentPayload>
          }
          deleteMany: {
            args: Prisma.AssetComponentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetComponentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssetComponentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetComponentPayload>
          }
          aggregate: {
            args: Prisma.AssetComponentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssetComponent>
          }
          groupBy: {
            args: Prisma.AssetComponentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetComponentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetComponentCountArgs<ExtArgs>
            result: $Utils.Optional<AssetComponentCountAggregateOutputType> | number
          }
        }
      }
      ComponentTransfer: {
        payload: Prisma.$ComponentTransferPayload<ExtArgs>
        fields: Prisma.ComponentTransferFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComponentTransferFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTransferPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComponentTransferFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTransferPayload>
          }
          findFirst: {
            args: Prisma.ComponentTransferFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTransferPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComponentTransferFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTransferPayload>
          }
          findMany: {
            args: Prisma.ComponentTransferFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTransferPayload>[]
          }
          create: {
            args: Prisma.ComponentTransferCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTransferPayload>
          }
          createMany: {
            args: Prisma.ComponentTransferCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComponentTransferCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTransferPayload>[]
          }
          delete: {
            args: Prisma.ComponentTransferDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTransferPayload>
          }
          update: {
            args: Prisma.ComponentTransferUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTransferPayload>
          }
          deleteMany: {
            args: Prisma.ComponentTransferDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComponentTransferUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComponentTransferUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentTransferPayload>
          }
          aggregate: {
            args: Prisma.ComponentTransferAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComponentTransfer>
          }
          groupBy: {
            args: Prisma.ComponentTransferGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComponentTransferGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComponentTransferCountArgs<ExtArgs>
            result: $Utils.Optional<ComponentTransferCountAggregateOutputType> | number
          }
        }
      }
      ComponentMaintenance: {
        payload: Prisma.$ComponentMaintenancePayload<ExtArgs>
        fields: Prisma.ComponentMaintenanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComponentMaintenanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentMaintenancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComponentMaintenanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentMaintenancePayload>
          }
          findFirst: {
            args: Prisma.ComponentMaintenanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentMaintenancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComponentMaintenanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentMaintenancePayload>
          }
          findMany: {
            args: Prisma.ComponentMaintenanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentMaintenancePayload>[]
          }
          create: {
            args: Prisma.ComponentMaintenanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentMaintenancePayload>
          }
          createMany: {
            args: Prisma.ComponentMaintenanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComponentMaintenanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentMaintenancePayload>[]
          }
          delete: {
            args: Prisma.ComponentMaintenanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentMaintenancePayload>
          }
          update: {
            args: Prisma.ComponentMaintenanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentMaintenancePayload>
          }
          deleteMany: {
            args: Prisma.ComponentMaintenanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComponentMaintenanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComponentMaintenanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentMaintenancePayload>
          }
          aggregate: {
            args: Prisma.ComponentMaintenanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComponentMaintenance>
          }
          groupBy: {
            args: Prisma.ComponentMaintenanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComponentMaintenanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComponentMaintenanceCountArgs<ExtArgs>
            result: $Utils.Optional<ComponentMaintenanceCountAggregateOutputType> | number
          }
        }
      }
      Inventory: {
        payload: Prisma.$InventoryPayload<ExtArgs>
        fields: Prisma.InventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findFirst: {
            args: Prisma.InventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findMany: {
            args: Prisma.InventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          create: {
            args: Prisma.InventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          createMany: {
            args: Prisma.InventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          delete: {
            args: Prisma.InventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          update: {
            args: Prisma.InventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          deleteMany: {
            args: Prisma.InventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          aggregate: {
            args: Prisma.InventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventory>
          }
          groupBy: {
            args: Prisma.InventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryCountAggregateOutputType> | number
          }
        }
      }
      InventoryLoan: {
        payload: Prisma.$InventoryLoanPayload<ExtArgs>
        fields: Prisma.InventoryLoanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryLoanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryLoanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryLoanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryLoanPayload>
          }
          findFirst: {
            args: Prisma.InventoryLoanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryLoanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryLoanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryLoanPayload>
          }
          findMany: {
            args: Prisma.InventoryLoanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryLoanPayload>[]
          }
          create: {
            args: Prisma.InventoryLoanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryLoanPayload>
          }
          createMany: {
            args: Prisma.InventoryLoanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryLoanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryLoanPayload>[]
          }
          delete: {
            args: Prisma.InventoryLoanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryLoanPayload>
          }
          update: {
            args: Prisma.InventoryLoanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryLoanPayload>
          }
          deleteMany: {
            args: Prisma.InventoryLoanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryLoanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryLoanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryLoanPayload>
          }
          aggregate: {
            args: Prisma.InventoryLoanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryLoan>
          }
          groupBy: {
            args: Prisma.InventoryLoanGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryLoanGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryLoanCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryLoanCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    assetRequests: number
    approvedRequests: number
    assignedAssets: number
    maintenanceRecords: number
    managedDepartments: number
    auditRecords: number
    notifications: number
    procurementsOrdered: number
    partUsages: number
    replacementsPerformed: number
    partRegistrations: number
    componentTransfers: number
    componentMaintenance: number
    custodiedInventories: number
    borrowedLoans: number
    approvedLoans: number
    responsibleLoans: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assetRequests?: boolean | UserCountOutputTypeCountAssetRequestsArgs
    approvedRequests?: boolean | UserCountOutputTypeCountApprovedRequestsArgs
    assignedAssets?: boolean | UserCountOutputTypeCountAssignedAssetsArgs
    maintenanceRecords?: boolean | UserCountOutputTypeCountMaintenanceRecordsArgs
    managedDepartments?: boolean | UserCountOutputTypeCountManagedDepartmentsArgs
    auditRecords?: boolean | UserCountOutputTypeCountAuditRecordsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    procurementsOrdered?: boolean | UserCountOutputTypeCountProcurementsOrderedArgs
    partUsages?: boolean | UserCountOutputTypeCountPartUsagesArgs
    replacementsPerformed?: boolean | UserCountOutputTypeCountReplacementsPerformedArgs
    partRegistrations?: boolean | UserCountOutputTypeCountPartRegistrationsArgs
    componentTransfers?: boolean | UserCountOutputTypeCountComponentTransfersArgs
    componentMaintenance?: boolean | UserCountOutputTypeCountComponentMaintenanceArgs
    custodiedInventories?: boolean | UserCountOutputTypeCountCustodiedInventoriesArgs
    borrowedLoans?: boolean | UserCountOutputTypeCountBorrowedLoansArgs
    approvedLoans?: boolean | UserCountOutputTypeCountApprovedLoansArgs
    responsibleLoans?: boolean | UserCountOutputTypeCountResponsibleLoansArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssetRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovedRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMaintenanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountManagedDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProcurementsOrderedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcurementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPartUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartUsageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReplacementsPerformedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartReplacementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPartRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewPartRegistrationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountComponentTransfersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentTransferWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountComponentMaintenanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentMaintenanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCustodiedInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBorrowedLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryLoanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovedLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryLoanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResponsibleLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryLoanWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    users: number
    assets: number
    assetRequests: number
    inventories: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DepartmentCountOutputTypeCountUsersArgs
    assets?: boolean | DepartmentCountOutputTypeCountAssetsArgs
    assetRequests?: boolean | DepartmentCountOutputTypeCountAssetRequestsArgs
    inventories?: boolean | DepartmentCountOutputTypeCountInventoriesArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountAssetRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetRequestWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    assets: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | LocationCountOutputTypeCountAssetsArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    children: number
    assets: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | CategoryCountOutputTypeCountChildrenArgs
    assets?: boolean | CategoryCountOutputTypeCountAssetsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }


  /**
   * Count Type VendorCountOutputType
   */

  export type VendorCountOutputType = {
    assets: number
    maintenanceContracts: number
    maintenanceRecords: number
    spareParts: number
    procurements: number
  }

  export type VendorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | VendorCountOutputTypeCountAssetsArgs
    maintenanceContracts?: boolean | VendorCountOutputTypeCountMaintenanceContractsArgs
    maintenanceRecords?: boolean | VendorCountOutputTypeCountMaintenanceRecordsArgs
    spareParts?: boolean | VendorCountOutputTypeCountSparePartsArgs
    procurements?: boolean | VendorCountOutputTypeCountProcurementsArgs
  }

  // Custom InputTypes
  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorCountOutputType
     */
    select?: VendorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountMaintenanceContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceContractWhereInput
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountMaintenanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceRecordWhereInput
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountSparePartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SparePartWhereInput
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountProcurementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcurementWhereInput
  }


  /**
   * Count Type AssetCountOutputType
   */

  export type AssetCountOutputType = {
    assetRequests: number
    maintenanceRecords: number
    auditRecords: number
    partUsages: number
    partReplacements: number
    partRegistrations: number
    components: number
    parentComponents: number
    transfersFrom: number
    transfersTo: number
    inventories: number
  }

  export type AssetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assetRequests?: boolean | AssetCountOutputTypeCountAssetRequestsArgs
    maintenanceRecords?: boolean | AssetCountOutputTypeCountMaintenanceRecordsArgs
    auditRecords?: boolean | AssetCountOutputTypeCountAuditRecordsArgs
    partUsages?: boolean | AssetCountOutputTypeCountPartUsagesArgs
    partReplacements?: boolean | AssetCountOutputTypeCountPartReplacementsArgs
    partRegistrations?: boolean | AssetCountOutputTypeCountPartRegistrationsArgs
    components?: boolean | AssetCountOutputTypeCountComponentsArgs
    parentComponents?: boolean | AssetCountOutputTypeCountParentComponentsArgs
    transfersFrom?: boolean | AssetCountOutputTypeCountTransfersFromArgs
    transfersTo?: boolean | AssetCountOutputTypeCountTransfersToArgs
    inventories?: boolean | AssetCountOutputTypeCountInventoriesArgs
  }

  // Custom InputTypes
  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCountOutputType
     */
    select?: AssetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountAssetRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetRequestWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountMaintenanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceRecordWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountAuditRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditRecordWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountPartUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartUsageWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountPartReplacementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartReplacementWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountPartRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewPartRegistrationWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetComponentWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountParentComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetComponentWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountTransfersFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentTransferWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountTransfersToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentTransferWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
  }


  /**
   * Count Type MaintenanceRecordCountOutputType
   */

  export type MaintenanceRecordCountOutputType = {
    partUsages: number
  }

  export type MaintenanceRecordCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partUsages?: boolean | MaintenanceRecordCountOutputTypeCountPartUsagesArgs
  }

  // Custom InputTypes
  /**
   * MaintenanceRecordCountOutputType without action
   */
  export type MaintenanceRecordCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecordCountOutputType
     */
    select?: MaintenanceRecordCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MaintenanceRecordCountOutputType without action
   */
  export type MaintenanceRecordCountOutputTypeCountPartUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartUsageWhereInput
  }


  /**
   * Count Type SparePartCountOutputType
   */

  export type SparePartCountOutputType = {
    procurements: number
    usages: number
    replacements: number
    oldReplacements: number
    registrations: number
    sourceComponents: number
  }

  export type SparePartCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    procurements?: boolean | SparePartCountOutputTypeCountProcurementsArgs
    usages?: boolean | SparePartCountOutputTypeCountUsagesArgs
    replacements?: boolean | SparePartCountOutputTypeCountReplacementsArgs
    oldReplacements?: boolean | SparePartCountOutputTypeCountOldReplacementsArgs
    registrations?: boolean | SparePartCountOutputTypeCountRegistrationsArgs
    sourceComponents?: boolean | SparePartCountOutputTypeCountSourceComponentsArgs
  }

  // Custom InputTypes
  /**
   * SparePartCountOutputType without action
   */
  export type SparePartCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartCountOutputType
     */
    select?: SparePartCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SparePartCountOutputType without action
   */
  export type SparePartCountOutputTypeCountProcurementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcurementWhereInput
  }

  /**
   * SparePartCountOutputType without action
   */
  export type SparePartCountOutputTypeCountUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartUsageWhereInput
  }

  /**
   * SparePartCountOutputType without action
   */
  export type SparePartCountOutputTypeCountReplacementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartReplacementWhereInput
  }

  /**
   * SparePartCountOutputType without action
   */
  export type SparePartCountOutputTypeCountOldReplacementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartReplacementWhereInput
  }

  /**
   * SparePartCountOutputType without action
   */
  export type SparePartCountOutputTypeCountRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewPartRegistrationWhereInput
  }

  /**
   * SparePartCountOutputType without action
   */
  export type SparePartCountOutputTypeCountSourceComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetComponentWhereInput
  }


  /**
   * Count Type AssetComponentCountOutputType
   */

  export type AssetComponentCountOutputType = {
    usages: number
    replacements: number
    transfers: number
    maintenanceRecords: number
  }

  export type AssetComponentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usages?: boolean | AssetComponentCountOutputTypeCountUsagesArgs
    replacements?: boolean | AssetComponentCountOutputTypeCountReplacementsArgs
    transfers?: boolean | AssetComponentCountOutputTypeCountTransfersArgs
    maintenanceRecords?: boolean | AssetComponentCountOutputTypeCountMaintenanceRecordsArgs
  }

  // Custom InputTypes
  /**
   * AssetComponentCountOutputType without action
   */
  export type AssetComponentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponentCountOutputType
     */
    select?: AssetComponentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssetComponentCountOutputType without action
   */
  export type AssetComponentCountOutputTypeCountUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartUsageWhereInput
  }

  /**
   * AssetComponentCountOutputType without action
   */
  export type AssetComponentCountOutputTypeCountReplacementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartReplacementWhereInput
  }

  /**
   * AssetComponentCountOutputType without action
   */
  export type AssetComponentCountOutputTypeCountTransfersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentTransferWhereInput
  }

  /**
   * AssetComponentCountOutputType without action
   */
  export type AssetComponentCountOutputTypeCountMaintenanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentMaintenanceWhereInput
  }


  /**
   * Count Type InventoryCountOutputType
   */

  export type InventoryCountOutputType = {
    loans: number
  }

  export type InventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loans?: boolean | InventoryCountOutputTypeCountLoansArgs
  }

  // Custom InputTypes
  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountOutputType
     */
    select?: InventoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryLoanWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    departmentId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    departmentId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    firstName: number
    lastName: number
    phone: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    departmentId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    firstName?: true
    lastName?: true
    phone?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    departmentId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    firstName?: true
    lastName?: true
    phone?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    departmentId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    firstName?: true
    lastName?: true
    phone?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    departmentId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone: string | null
    role: $Enums.UserRole
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    departmentId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    departmentId?: boolean
    department?: boolean | User$departmentArgs<ExtArgs>
    assetRequests?: boolean | User$assetRequestsArgs<ExtArgs>
    approvedRequests?: boolean | User$approvedRequestsArgs<ExtArgs>
    assignedAssets?: boolean | User$assignedAssetsArgs<ExtArgs>
    maintenanceRecords?: boolean | User$maintenanceRecordsArgs<ExtArgs>
    managedDepartments?: boolean | User$managedDepartmentsArgs<ExtArgs>
    auditRecords?: boolean | User$auditRecordsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    procurementsOrdered?: boolean | User$procurementsOrderedArgs<ExtArgs>
    partUsages?: boolean | User$partUsagesArgs<ExtArgs>
    replacementsPerformed?: boolean | User$replacementsPerformedArgs<ExtArgs>
    partRegistrations?: boolean | User$partRegistrationsArgs<ExtArgs>
    componentTransfers?: boolean | User$componentTransfersArgs<ExtArgs>
    componentMaintenance?: boolean | User$componentMaintenanceArgs<ExtArgs>
    custodiedInventories?: boolean | User$custodiedInventoriesArgs<ExtArgs>
    borrowedLoans?: boolean | User$borrowedLoansArgs<ExtArgs>
    approvedLoans?: boolean | User$approvedLoansArgs<ExtArgs>
    responsibleLoans?: boolean | User$responsibleLoansArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    departmentId?: boolean
    department?: boolean | User$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    departmentId?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | User$departmentArgs<ExtArgs>
    assetRequests?: boolean | User$assetRequestsArgs<ExtArgs>
    approvedRequests?: boolean | User$approvedRequestsArgs<ExtArgs>
    assignedAssets?: boolean | User$assignedAssetsArgs<ExtArgs>
    maintenanceRecords?: boolean | User$maintenanceRecordsArgs<ExtArgs>
    managedDepartments?: boolean | User$managedDepartmentsArgs<ExtArgs>
    auditRecords?: boolean | User$auditRecordsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    procurementsOrdered?: boolean | User$procurementsOrderedArgs<ExtArgs>
    partUsages?: boolean | User$partUsagesArgs<ExtArgs>
    replacementsPerformed?: boolean | User$replacementsPerformedArgs<ExtArgs>
    partRegistrations?: boolean | User$partRegistrationsArgs<ExtArgs>
    componentTransfers?: boolean | User$componentTransfersArgs<ExtArgs>
    componentMaintenance?: boolean | User$componentMaintenanceArgs<ExtArgs>
    custodiedInventories?: boolean | User$custodiedInventoriesArgs<ExtArgs>
    borrowedLoans?: boolean | User$borrowedLoansArgs<ExtArgs>
    approvedLoans?: boolean | User$approvedLoansArgs<ExtArgs>
    responsibleLoans?: boolean | User$responsibleLoansArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | User$departmentArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      assetRequests: Prisma.$AssetRequestPayload<ExtArgs>[]
      approvedRequests: Prisma.$AssetRequestPayload<ExtArgs>[]
      assignedAssets: Prisma.$AssetPayload<ExtArgs>[]
      maintenanceRecords: Prisma.$MaintenanceRecordPayload<ExtArgs>[]
      managedDepartments: Prisma.$DepartmentPayload<ExtArgs>[]
      auditRecords: Prisma.$AuditRecordPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      procurementsOrdered: Prisma.$ProcurementPayload<ExtArgs>[]
      partUsages: Prisma.$PartUsagePayload<ExtArgs>[]
      replacementsPerformed: Prisma.$PartReplacementPayload<ExtArgs>[]
      partRegistrations: Prisma.$NewPartRegistrationPayload<ExtArgs>[]
      componentTransfers: Prisma.$ComponentTransferPayload<ExtArgs>[]
      componentMaintenance: Prisma.$ComponentMaintenancePayload<ExtArgs>[]
      custodiedInventories: Prisma.$InventoryPayload<ExtArgs>[]
      borrowedLoans: Prisma.$InventoryLoanPayload<ExtArgs>[]
      approvedLoans: Prisma.$InventoryLoanPayload<ExtArgs>[]
      responsibleLoans: Prisma.$InventoryLoanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      password: string
      firstName: string
      lastName: string
      phone: string | null
      role: $Enums.UserRole
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      departmentId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends User$departmentArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    assetRequests<T extends User$assetRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$assetRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "findMany"> | Null>
    approvedRequests<T extends User$approvedRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$approvedRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "findMany"> | Null>
    assignedAssets<T extends User$assignedAssetsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany"> | Null>
    maintenanceRecords<T extends User$maintenanceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$maintenanceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "findMany"> | Null>
    managedDepartments<T extends User$managedDepartmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$managedDepartmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany"> | Null>
    auditRecords<T extends User$auditRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditRecordPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    procurementsOrdered<T extends User$procurementsOrderedArgs<ExtArgs> = {}>(args?: Subset<T, User$procurementsOrderedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "findMany"> | Null>
    partUsages<T extends User$partUsagesArgs<ExtArgs> = {}>(args?: Subset<T, User$partUsagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "findMany"> | Null>
    replacementsPerformed<T extends User$replacementsPerformedArgs<ExtArgs> = {}>(args?: Subset<T, User$replacementsPerformedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "findMany"> | Null>
    partRegistrations<T extends User$partRegistrationsArgs<ExtArgs> = {}>(args?: Subset<T, User$partRegistrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "findMany"> | Null>
    componentTransfers<T extends User$componentTransfersArgs<ExtArgs> = {}>(args?: Subset<T, User$componentTransfersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "findMany"> | Null>
    componentMaintenance<T extends User$componentMaintenanceArgs<ExtArgs> = {}>(args?: Subset<T, User$componentMaintenanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentMaintenancePayload<ExtArgs>, T, "findMany"> | Null>
    custodiedInventories<T extends User$custodiedInventoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$custodiedInventoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany"> | Null>
    borrowedLoans<T extends User$borrowedLoansArgs<ExtArgs> = {}>(args?: Subset<T, User$borrowedLoansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "findMany"> | Null>
    approvedLoans<T extends User$approvedLoansArgs<ExtArgs> = {}>(args?: Subset<T, User$approvedLoansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "findMany"> | Null>
    responsibleLoans<T extends User$responsibleLoansArgs<ExtArgs> = {}>(args?: Subset<T, User$responsibleLoansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly departmentId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.department
   */
  export type User$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * User.assetRequests
   */
  export type User$assetRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    where?: AssetRequestWhereInput
    orderBy?: AssetRequestOrderByWithRelationInput | AssetRequestOrderByWithRelationInput[]
    cursor?: AssetRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetRequestScalarFieldEnum | AssetRequestScalarFieldEnum[]
  }

  /**
   * User.approvedRequests
   */
  export type User$approvedRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    where?: AssetRequestWhereInput
    orderBy?: AssetRequestOrderByWithRelationInput | AssetRequestOrderByWithRelationInput[]
    cursor?: AssetRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetRequestScalarFieldEnum | AssetRequestScalarFieldEnum[]
  }

  /**
   * User.assignedAssets
   */
  export type User$assignedAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * User.maintenanceRecords
   */
  export type User$maintenanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    where?: MaintenanceRecordWhereInput
    orderBy?: MaintenanceRecordOrderByWithRelationInput | MaintenanceRecordOrderByWithRelationInput[]
    cursor?: MaintenanceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceRecordScalarFieldEnum | MaintenanceRecordScalarFieldEnum[]
  }

  /**
   * User.managedDepartments
   */
  export type User$managedDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * User.auditRecords
   */
  export type User$auditRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordInclude<ExtArgs> | null
    where?: AuditRecordWhereInput
    orderBy?: AuditRecordOrderByWithRelationInput | AuditRecordOrderByWithRelationInput[]
    cursor?: AuditRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditRecordScalarFieldEnum | AuditRecordScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.procurementsOrdered
   */
  export type User$procurementsOrderedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
    where?: ProcurementWhereInput
    orderBy?: ProcurementOrderByWithRelationInput | ProcurementOrderByWithRelationInput[]
    cursor?: ProcurementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcurementScalarFieldEnum | ProcurementScalarFieldEnum[]
  }

  /**
   * User.partUsages
   */
  export type User$partUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    where?: PartUsageWhereInput
    orderBy?: PartUsageOrderByWithRelationInput | PartUsageOrderByWithRelationInput[]
    cursor?: PartUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartUsageScalarFieldEnum | PartUsageScalarFieldEnum[]
  }

  /**
   * User.replacementsPerformed
   */
  export type User$replacementsPerformedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    where?: PartReplacementWhereInput
    orderBy?: PartReplacementOrderByWithRelationInput | PartReplacementOrderByWithRelationInput[]
    cursor?: PartReplacementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartReplacementScalarFieldEnum | PartReplacementScalarFieldEnum[]
  }

  /**
   * User.partRegistrations
   */
  export type User$partRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
    where?: NewPartRegistrationWhereInput
    orderBy?: NewPartRegistrationOrderByWithRelationInput | NewPartRegistrationOrderByWithRelationInput[]
    cursor?: NewPartRegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NewPartRegistrationScalarFieldEnum | NewPartRegistrationScalarFieldEnum[]
  }

  /**
   * User.componentTransfers
   */
  export type User$componentTransfersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    where?: ComponentTransferWhereInput
    orderBy?: ComponentTransferOrderByWithRelationInput | ComponentTransferOrderByWithRelationInput[]
    cursor?: ComponentTransferWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentTransferScalarFieldEnum | ComponentTransferScalarFieldEnum[]
  }

  /**
   * User.componentMaintenance
   */
  export type User$componentMaintenanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceInclude<ExtArgs> | null
    where?: ComponentMaintenanceWhereInput
    orderBy?: ComponentMaintenanceOrderByWithRelationInput | ComponentMaintenanceOrderByWithRelationInput[]
    cursor?: ComponentMaintenanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentMaintenanceScalarFieldEnum | ComponentMaintenanceScalarFieldEnum[]
  }

  /**
   * User.custodiedInventories
   */
  export type User$custodiedInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    cursor?: InventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * User.borrowedLoans
   */
  export type User$borrowedLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    where?: InventoryLoanWhereInput
    orderBy?: InventoryLoanOrderByWithRelationInput | InventoryLoanOrderByWithRelationInput[]
    cursor?: InventoryLoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryLoanScalarFieldEnum | InventoryLoanScalarFieldEnum[]
  }

  /**
   * User.approvedLoans
   */
  export type User$approvedLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    where?: InventoryLoanWhereInput
    orderBy?: InventoryLoanOrderByWithRelationInput | InventoryLoanOrderByWithRelationInput[]
    cursor?: InventoryLoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryLoanScalarFieldEnum | InventoryLoanScalarFieldEnum[]
  }

  /**
   * User.responsibleLoans
   */
  export type User$responsibleLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    where?: InventoryLoanWhereInput
    orderBy?: InventoryLoanOrderByWithRelationInput | InventoryLoanOrderByWithRelationInput[]
    cursor?: InventoryLoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryLoanScalarFieldEnum | InventoryLoanScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    budgetLimit: Decimal | null
  }

  export type DepartmentSumAggregateOutputType = {
    budgetLimit: Decimal | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    managerId: string | null
    budgetLimit: Decimal | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    managerId: string | null
    budgetLimit: Decimal | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    managerId: number
    budgetLimit: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    budgetLimit?: true
  }

  export type DepartmentSumAggregateInputType = {
    budgetLimit?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    managerId?: true
    budgetLimit?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    managerId?: true
    budgetLimit?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    managerId?: true
    budgetLimit?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    code: string
    description: string | null
    managerId: string | null
    budgetLimit: Decimal | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    managerId?: boolean
    budgetLimit?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    manager?: boolean | Department$managerArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    assets?: boolean | Department$assetsArgs<ExtArgs>
    assetRequests?: boolean | Department$assetRequestsArgs<ExtArgs>
    inventories?: boolean | Department$inventoriesArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    managerId?: boolean
    budgetLimit?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    manager?: boolean | Department$managerArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    managerId?: boolean
    budgetLimit?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manager?: boolean | Department$managerArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    assets?: boolean | Department$assetsArgs<ExtArgs>
    assetRequests?: boolean | Department$assetRequestsArgs<ExtArgs>
    inventories?: boolean | Department$inventoriesArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manager?: boolean | Department$managerArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      manager: Prisma.$UserPayload<ExtArgs> | null
      users: Prisma.$UserPayload<ExtArgs>[]
      assets: Prisma.$AssetPayload<ExtArgs>[]
      assetRequests: Prisma.$AssetRequestPayload<ExtArgs>[]
      inventories: Prisma.$InventoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      description: string | null
      managerId: string | null
      budgetLimit: Prisma.Decimal | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    manager<T extends Department$managerArgs<ExtArgs> = {}>(args?: Subset<T, Department$managerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    users<T extends Department$usersArgs<ExtArgs> = {}>(args?: Subset<T, Department$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    assets<T extends Department$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Department$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany"> | Null>
    assetRequests<T extends Department$assetRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Department$assetRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "findMany"> | Null>
    inventories<T extends Department$inventoriesArgs<ExtArgs> = {}>(args?: Subset<T, Department$inventoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */ 
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly code: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
    readonly managerId: FieldRef<"Department", 'String'>
    readonly budgetLimit: FieldRef<"Department", 'Decimal'>
    readonly isActive: FieldRef<"Department", 'Boolean'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department.manager
   */
  export type Department$managerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Department.users
   */
  export type Department$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Department.assets
   */
  export type Department$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Department.assetRequests
   */
  export type Department$assetRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    where?: AssetRequestWhereInput
    orderBy?: AssetRequestOrderByWithRelationInput | AssetRequestOrderByWithRelationInput[]
    cursor?: AssetRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetRequestScalarFieldEnum | AssetRequestScalarFieldEnum[]
  }

  /**
   * Department.inventories
   */
  export type Department$inventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    cursor?: InventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    name: string | null
    building: string | null
    floor: string | null
    room: string | null
    address: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    building: string | null
    floor: string | null
    room: string | null
    address: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    name: number
    building: number
    floor: number
    room: number
    address: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationMinAggregateInputType = {
    id?: true
    name?: true
    building?: true
    floor?: true
    room?: true
    address?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    name?: true
    building?: true
    floor?: true
    room?: true
    address?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    name?: true
    building?: true
    floor?: true
    room?: true
    address?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: string
    name: string
    building: string | null
    floor: string | null
    room: string | null
    address: string | null
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    building?: boolean
    floor?: boolean
    room?: boolean
    address?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assets?: boolean | Location$assetsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    building?: boolean
    floor?: boolean
    room?: boolean
    address?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    name?: boolean
    building?: boolean
    floor?: boolean
    room?: boolean
    address?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | Location$assetsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      assets: Prisma.$AssetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      building: string | null
      floor: string | null
      room: string | null
      address: string | null
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {LocationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assets<T extends Location$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Location$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */ 
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'String'>
    readonly name: FieldRef<"Location", 'String'>
    readonly building: FieldRef<"Location", 'String'>
    readonly floor: FieldRef<"Location", 'String'>
    readonly room: FieldRef<"Location", 'String'>
    readonly address: FieldRef<"Location", 'String'>
    readonly description: FieldRef<"Location", 'String'>
    readonly isActive: FieldRef<"Location", 'Boolean'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
    readonly updatedAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location createManyAndReturn
   */
  export type LocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
  }

  /**
   * Location.assets
   */
  export type Location$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    parentId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    parentId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    parentId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    parentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    parentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    parentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    code: string
    description: string | null
    parentId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    parentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    assets?: boolean | Category$assetsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    parentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    parentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    assets?: boolean | Category$assetsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      parent: Prisma.$CategoryPayload<ExtArgs> | null
      children: Prisma.$CategoryPayload<ExtArgs>[]
      assets: Prisma.$AssetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      description: string | null
      parentId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Category$parentArgs<ExtArgs> = {}>(args?: Subset<T, Category$parentArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    children<T extends Category$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Category$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    assets<T extends Category$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Category$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly code: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly parentId: FieldRef<"Category", 'String'>
    readonly isActive: FieldRef<"Category", 'Boolean'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.parent
   */
  export type Category$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Category.children
   */
  export type Category$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category.assets
   */
  export type Category$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Vendor
   */

  export type AggregateVendor = {
    _count: VendorCountAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  export type VendorMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    email: string | null
    phone: string | null
    address: string | null
    contactPerson: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VendorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    email: string | null
    phone: string | null
    address: string | null
    contactPerson: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VendorCountAggregateOutputType = {
    id: number
    name: number
    code: number
    email: number
    phone: number
    address: number
    contactPerson: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VendorMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    email?: true
    phone?: true
    address?: true
    contactPerson?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VendorMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    email?: true
    phone?: true
    address?: true
    contactPerson?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VendorCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    email?: true
    phone?: true
    address?: true
    contactPerson?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VendorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendor to aggregate.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendors
    **/
    _count?: true | VendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorMaxAggregateInputType
  }

  export type GetVendorAggregateType<T extends VendorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendor[P]>
      : GetScalarType<T[P], AggregateVendor[P]>
  }




  export type VendorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithAggregationInput | VendorOrderByWithAggregationInput[]
    by: VendorScalarFieldEnum[] | VendorScalarFieldEnum
    having?: VendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorCountAggregateInputType | true
    _min?: VendorMinAggregateInputType
    _max?: VendorMaxAggregateInputType
  }

  export type VendorGroupByOutputType = {
    id: string
    name: string
    code: string
    email: string | null
    phone: string | null
    address: string | null
    contactPerson: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: VendorCountAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  type GetVendorGroupByPayload<T extends VendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorGroupByOutputType[P]>
            : GetScalarType<T[P], VendorGroupByOutputType[P]>
        }
      >
    >


  export type VendorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    contactPerson?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assets?: boolean | Vendor$assetsArgs<ExtArgs>
    maintenanceContracts?: boolean | Vendor$maintenanceContractsArgs<ExtArgs>
    maintenanceRecords?: boolean | Vendor$maintenanceRecordsArgs<ExtArgs>
    spareParts?: boolean | Vendor$sparePartsArgs<ExtArgs>
    procurements?: boolean | Vendor$procurementsArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    contactPerson?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    contactPerson?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VendorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | Vendor$assetsArgs<ExtArgs>
    maintenanceContracts?: boolean | Vendor$maintenanceContractsArgs<ExtArgs>
    maintenanceRecords?: boolean | Vendor$maintenanceRecordsArgs<ExtArgs>
    spareParts?: boolean | Vendor$sparePartsArgs<ExtArgs>
    procurements?: boolean | Vendor$procurementsArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VendorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VendorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vendor"
    objects: {
      assets: Prisma.$AssetPayload<ExtArgs>[]
      maintenanceContracts: Prisma.$MaintenanceContractPayload<ExtArgs>[]
      maintenanceRecords: Prisma.$MaintenanceRecordPayload<ExtArgs>[]
      spareParts: Prisma.$SparePartPayload<ExtArgs>[]
      procurements: Prisma.$ProcurementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      email: string | null
      phone: string | null
      address: string | null
      contactPerson: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vendor"]>
    composites: {}
  }

  type VendorGetPayload<S extends boolean | null | undefined | VendorDefaultArgs> = $Result.GetResult<Prisma.$VendorPayload, S>

  type VendorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VendorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VendorCountAggregateInputType | true
    }

  export interface VendorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendor'], meta: { name: 'Vendor' } }
    /**
     * Find zero or one Vendor that matches the filter.
     * @param {VendorFindUniqueArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendorFindUniqueArgs>(args: SelectSubset<T, VendorFindUniqueArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vendor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VendorFindUniqueOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendorFindUniqueOrThrowArgs>(args: SelectSubset<T, VendorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendorFindFirstArgs>(args?: SelectSubset<T, VendorFindFirstArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vendor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendorFindFirstOrThrowArgs>(args?: SelectSubset<T, VendorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Vendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendors
     * const vendors = await prisma.vendor.findMany()
     * 
     * // Get first 10 Vendors
     * const vendors = await prisma.vendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorWithIdOnly = await prisma.vendor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendorFindManyArgs>(args?: SelectSubset<T, VendorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vendor.
     * @param {VendorCreateArgs} args - Arguments to create a Vendor.
     * @example
     * // Create one Vendor
     * const Vendor = await prisma.vendor.create({
     *   data: {
     *     // ... data to create a Vendor
     *   }
     * })
     * 
     */
    create<T extends VendorCreateArgs>(args: SelectSubset<T, VendorCreateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Vendors.
     * @param {VendorCreateManyArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendorCreateManyArgs>(args?: SelectSubset<T, VendorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vendors and returns the data saved in the database.
     * @param {VendorCreateManyAndReturnArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VendorCreateManyAndReturnArgs>(args?: SelectSubset<T, VendorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Vendor.
     * @param {VendorDeleteArgs} args - Arguments to delete one Vendor.
     * @example
     * // Delete one Vendor
     * const Vendor = await prisma.vendor.delete({
     *   where: {
     *     // ... filter to delete one Vendor
     *   }
     * })
     * 
     */
    delete<T extends VendorDeleteArgs>(args: SelectSubset<T, VendorDeleteArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vendor.
     * @param {VendorUpdateArgs} args - Arguments to update one Vendor.
     * @example
     * // Update one Vendor
     * const vendor = await prisma.vendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendorUpdateArgs>(args: SelectSubset<T, VendorUpdateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Vendors.
     * @param {VendorDeleteManyArgs} args - Arguments to filter Vendors to delete.
     * @example
     * // Delete a few Vendors
     * const { count } = await prisma.vendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendorDeleteManyArgs>(args?: SelectSubset<T, VendorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendorUpdateManyArgs>(args: SelectSubset<T, VendorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendor.
     * @param {VendorUpsertArgs} args - Arguments to update or create a Vendor.
     * @example
     * // Update or create a Vendor
     * const vendor = await prisma.vendor.upsert({
     *   create: {
     *     // ... data to create a Vendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendor we want to update
     *   }
     * })
     */
    upsert<T extends VendorUpsertArgs>(args: SelectSubset<T, VendorUpsertArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorCountArgs} args - Arguments to filter Vendors to count.
     * @example
     * // Count the number of Vendors
     * const count = await prisma.vendor.count({
     *   where: {
     *     // ... the filter for the Vendors we want to count
     *   }
     * })
    **/
    count<T extends VendorCountArgs>(
      args?: Subset<T, VendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorAggregateArgs>(args: Subset<T, VendorAggregateArgs>): Prisma.PrismaPromise<GetVendorAggregateType<T>>

    /**
     * Group by Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorGroupByArgs['orderBy'] }
        : { orderBy?: VendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vendor model
   */
  readonly fields: VendorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assets<T extends Vendor$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany"> | Null>
    maintenanceContracts<T extends Vendor$maintenanceContractsArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$maintenanceContractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceContractPayload<ExtArgs>, T, "findMany"> | Null>
    maintenanceRecords<T extends Vendor$maintenanceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$maintenanceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "findMany"> | Null>
    spareParts<T extends Vendor$sparePartsArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$sparePartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findMany"> | Null>
    procurements<T extends Vendor$procurementsArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$procurementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vendor model
   */ 
  interface VendorFieldRefs {
    readonly id: FieldRef<"Vendor", 'String'>
    readonly name: FieldRef<"Vendor", 'String'>
    readonly code: FieldRef<"Vendor", 'String'>
    readonly email: FieldRef<"Vendor", 'String'>
    readonly phone: FieldRef<"Vendor", 'String'>
    readonly address: FieldRef<"Vendor", 'String'>
    readonly contactPerson: FieldRef<"Vendor", 'String'>
    readonly isActive: FieldRef<"Vendor", 'Boolean'>
    readonly createdAt: FieldRef<"Vendor", 'DateTime'>
    readonly updatedAt: FieldRef<"Vendor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vendor findUnique
   */
  export type VendorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findUniqueOrThrow
   */
  export type VendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findFirst
   */
  export type VendorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findFirstOrThrow
   */
  export type VendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findMany
   */
  export type VendorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendors to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor create
   */
  export type VendorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendor.
     */
    data: XOR<VendorCreateInput, VendorUncheckedCreateInput>
  }

  /**
   * Vendor createMany
   */
  export type VendorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendor createManyAndReturn
   */
  export type VendorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendor update
   */
  export type VendorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendor.
     */
    data: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
    /**
     * Choose, which Vendor to update.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor updateMany
   */
  export type VendorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
  }

  /**
   * Vendor upsert
   */
  export type VendorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendor to update in case it exists.
     */
    where: VendorWhereUniqueInput
    /**
     * In case the Vendor found by the `where` argument doesn't exist, create a new Vendor with this data.
     */
    create: XOR<VendorCreateInput, VendorUncheckedCreateInput>
    /**
     * In case the Vendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
  }

  /**
   * Vendor delete
   */
  export type VendorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter which Vendor to delete.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor deleteMany
   */
  export type VendorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendors to delete
     */
    where?: VendorWhereInput
  }

  /**
   * Vendor.assets
   */
  export type Vendor$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Vendor.maintenanceContracts
   */
  export type Vendor$maintenanceContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceContract
     */
    select?: MaintenanceContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceContractInclude<ExtArgs> | null
    where?: MaintenanceContractWhereInput
    orderBy?: MaintenanceContractOrderByWithRelationInput | MaintenanceContractOrderByWithRelationInput[]
    cursor?: MaintenanceContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceContractScalarFieldEnum | MaintenanceContractScalarFieldEnum[]
  }

  /**
   * Vendor.maintenanceRecords
   */
  export type Vendor$maintenanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    where?: MaintenanceRecordWhereInput
    orderBy?: MaintenanceRecordOrderByWithRelationInput | MaintenanceRecordOrderByWithRelationInput[]
    cursor?: MaintenanceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceRecordScalarFieldEnum | MaintenanceRecordScalarFieldEnum[]
  }

  /**
   * Vendor.spareParts
   */
  export type Vendor$sparePartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    where?: SparePartWhereInput
    orderBy?: SparePartOrderByWithRelationInput | SparePartOrderByWithRelationInput[]
    cursor?: SparePartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SparePartScalarFieldEnum | SparePartScalarFieldEnum[]
  }

  /**
   * Vendor.procurements
   */
  export type Vendor$procurementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
    where?: ProcurementWhereInput
    orderBy?: ProcurementOrderByWithRelationInput | ProcurementOrderByWithRelationInput[]
    cursor?: ProcurementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcurementScalarFieldEnum | ProcurementScalarFieldEnum[]
  }

  /**
   * Vendor without action
   */
  export type VendorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
  }


  /**
   * Model Asset
   */

  export type AggregateAsset = {
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  export type AssetAvgAggregateOutputType = {
    purchasePrice: Decimal | null
    currentValue: Decimal | null
  }

  export type AssetSumAggregateOutputType = {
    purchasePrice: Decimal | null
    currentValue: Decimal | null
  }

  export type AssetMinAggregateOutputType = {
    id: string | null
    assetTag: string | null
    name: string | null
    description: string | null
    serialNumber: string | null
    model: string | null
    brand: string | null
    purchaseDate: Date | null
    purchasePrice: Decimal | null
    currentValue: Decimal | null
    warrantyExpiry: Date | null
    status: $Enums.AssetStatus | null
    condition: string | null
    notes: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    categoryId: string | null
    vendorId: string | null
    locationId: string | null
    departmentId: string | null
    assignedToId: string | null
  }

  export type AssetMaxAggregateOutputType = {
    id: string | null
    assetTag: string | null
    name: string | null
    description: string | null
    serialNumber: string | null
    model: string | null
    brand: string | null
    purchaseDate: Date | null
    purchasePrice: Decimal | null
    currentValue: Decimal | null
    warrantyExpiry: Date | null
    status: $Enums.AssetStatus | null
    condition: string | null
    notes: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    categoryId: string | null
    vendorId: string | null
    locationId: string | null
    departmentId: string | null
    assignedToId: string | null
  }

  export type AssetCountAggregateOutputType = {
    id: number
    assetTag: number
    name: number
    description: number
    serialNumber: number
    model: number
    brand: number
    purchaseDate: number
    purchasePrice: number
    currentValue: number
    warrantyExpiry: number
    status: number
    condition: number
    notes: number
    isActive: number
    createdAt: number
    updatedAt: number
    categoryId: number
    vendorId: number
    locationId: number
    departmentId: number
    assignedToId: number
    _all: number
  }


  export type AssetAvgAggregateInputType = {
    purchasePrice?: true
    currentValue?: true
  }

  export type AssetSumAggregateInputType = {
    purchasePrice?: true
    currentValue?: true
  }

  export type AssetMinAggregateInputType = {
    id?: true
    assetTag?: true
    name?: true
    description?: true
    serialNumber?: true
    model?: true
    brand?: true
    purchaseDate?: true
    purchasePrice?: true
    currentValue?: true
    warrantyExpiry?: true
    status?: true
    condition?: true
    notes?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    vendorId?: true
    locationId?: true
    departmentId?: true
    assignedToId?: true
  }

  export type AssetMaxAggregateInputType = {
    id?: true
    assetTag?: true
    name?: true
    description?: true
    serialNumber?: true
    model?: true
    brand?: true
    purchaseDate?: true
    purchasePrice?: true
    currentValue?: true
    warrantyExpiry?: true
    status?: true
    condition?: true
    notes?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    vendorId?: true
    locationId?: true
    departmentId?: true
    assignedToId?: true
  }

  export type AssetCountAggregateInputType = {
    id?: true
    assetTag?: true
    name?: true
    description?: true
    serialNumber?: true
    model?: true
    brand?: true
    purchaseDate?: true
    purchasePrice?: true
    currentValue?: true
    warrantyExpiry?: true
    status?: true
    condition?: true
    notes?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    vendorId?: true
    locationId?: true
    departmentId?: true
    assignedToId?: true
    _all?: true
  }

  export type AssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asset to aggregate.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assets
    **/
    _count?: true | AssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetMaxAggregateInputType
  }

  export type GetAssetAggregateType<T extends AssetAggregateArgs> = {
        [P in keyof T & keyof AggregateAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsset[P]>
      : GetScalarType<T[P], AggregateAsset[P]>
  }




  export type AssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithAggregationInput | AssetOrderByWithAggregationInput[]
    by: AssetScalarFieldEnum[] | AssetScalarFieldEnum
    having?: AssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetCountAggregateInputType | true
    _avg?: AssetAvgAggregateInputType
    _sum?: AssetSumAggregateInputType
    _min?: AssetMinAggregateInputType
    _max?: AssetMaxAggregateInputType
  }

  export type AssetGroupByOutputType = {
    id: string
    assetTag: string
    name: string
    description: string | null
    serialNumber: string | null
    model: string | null
    brand: string | null
    purchaseDate: Date | null
    purchasePrice: Decimal | null
    currentValue: Decimal | null
    warrantyExpiry: Date | null
    status: $Enums.AssetStatus
    condition: string | null
    notes: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    categoryId: string
    vendorId: string | null
    locationId: string | null
    departmentId: string | null
    assignedToId: string | null
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  type GetAssetGroupByPayload<T extends AssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetGroupByOutputType[P]>
            : GetScalarType<T[P], AssetGroupByOutputType[P]>
        }
      >
    >


  export type AssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetTag?: boolean
    name?: boolean
    description?: boolean
    serialNumber?: boolean
    model?: boolean
    brand?: boolean
    purchaseDate?: boolean
    purchasePrice?: boolean
    currentValue?: boolean
    warrantyExpiry?: boolean
    status?: boolean
    condition?: boolean
    notes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    vendorId?: boolean
    locationId?: boolean
    departmentId?: boolean
    assignedToId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    vendor?: boolean | Asset$vendorArgs<ExtArgs>
    location?: boolean | Asset$locationArgs<ExtArgs>
    department?: boolean | Asset$departmentArgs<ExtArgs>
    assignedTo?: boolean | Asset$assignedToArgs<ExtArgs>
    assetRequests?: boolean | Asset$assetRequestsArgs<ExtArgs>
    maintenanceRecords?: boolean | Asset$maintenanceRecordsArgs<ExtArgs>
    auditRecords?: boolean | Asset$auditRecordsArgs<ExtArgs>
    disposalRecord?: boolean | Asset$disposalRecordArgs<ExtArgs>
    partUsages?: boolean | Asset$partUsagesArgs<ExtArgs>
    partReplacements?: boolean | Asset$partReplacementsArgs<ExtArgs>
    partRegistrations?: boolean | Asset$partRegistrationsArgs<ExtArgs>
    components?: boolean | Asset$componentsArgs<ExtArgs>
    parentComponents?: boolean | Asset$parentComponentsArgs<ExtArgs>
    transfersFrom?: boolean | Asset$transfersFromArgs<ExtArgs>
    transfersTo?: boolean | Asset$transfersToArgs<ExtArgs>
    inventories?: boolean | Asset$inventoriesArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetTag?: boolean
    name?: boolean
    description?: boolean
    serialNumber?: boolean
    model?: boolean
    brand?: boolean
    purchaseDate?: boolean
    purchasePrice?: boolean
    currentValue?: boolean
    warrantyExpiry?: boolean
    status?: boolean
    condition?: boolean
    notes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    vendorId?: boolean
    locationId?: boolean
    departmentId?: boolean
    assignedToId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    vendor?: boolean | Asset$vendorArgs<ExtArgs>
    location?: boolean | Asset$locationArgs<ExtArgs>
    department?: boolean | Asset$departmentArgs<ExtArgs>
    assignedTo?: boolean | Asset$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectScalar = {
    id?: boolean
    assetTag?: boolean
    name?: boolean
    description?: boolean
    serialNumber?: boolean
    model?: boolean
    brand?: boolean
    purchaseDate?: boolean
    purchasePrice?: boolean
    currentValue?: boolean
    warrantyExpiry?: boolean
    status?: boolean
    condition?: boolean
    notes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    vendorId?: boolean
    locationId?: boolean
    departmentId?: boolean
    assignedToId?: boolean
  }

  export type AssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    vendor?: boolean | Asset$vendorArgs<ExtArgs>
    location?: boolean | Asset$locationArgs<ExtArgs>
    department?: boolean | Asset$departmentArgs<ExtArgs>
    assignedTo?: boolean | Asset$assignedToArgs<ExtArgs>
    assetRequests?: boolean | Asset$assetRequestsArgs<ExtArgs>
    maintenanceRecords?: boolean | Asset$maintenanceRecordsArgs<ExtArgs>
    auditRecords?: boolean | Asset$auditRecordsArgs<ExtArgs>
    disposalRecord?: boolean | Asset$disposalRecordArgs<ExtArgs>
    partUsages?: boolean | Asset$partUsagesArgs<ExtArgs>
    partReplacements?: boolean | Asset$partReplacementsArgs<ExtArgs>
    partRegistrations?: boolean | Asset$partRegistrationsArgs<ExtArgs>
    components?: boolean | Asset$componentsArgs<ExtArgs>
    parentComponents?: boolean | Asset$parentComponentsArgs<ExtArgs>
    transfersFrom?: boolean | Asset$transfersFromArgs<ExtArgs>
    transfersTo?: boolean | Asset$transfersToArgs<ExtArgs>
    inventories?: boolean | Asset$inventoriesArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    vendor?: boolean | Asset$vendorArgs<ExtArgs>
    location?: boolean | Asset$locationArgs<ExtArgs>
    department?: boolean | Asset$departmentArgs<ExtArgs>
    assignedTo?: boolean | Asset$assignedToArgs<ExtArgs>
  }

  export type $AssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Asset"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      vendor: Prisma.$VendorPayload<ExtArgs> | null
      location: Prisma.$LocationPayload<ExtArgs> | null
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
      assetRequests: Prisma.$AssetRequestPayload<ExtArgs>[]
      maintenanceRecords: Prisma.$MaintenanceRecordPayload<ExtArgs>[]
      auditRecords: Prisma.$AuditRecordPayload<ExtArgs>[]
      disposalRecord: Prisma.$DisposalRecordPayload<ExtArgs> | null
      partUsages: Prisma.$PartUsagePayload<ExtArgs>[]
      partReplacements: Prisma.$PartReplacementPayload<ExtArgs>[]
      partRegistrations: Prisma.$NewPartRegistrationPayload<ExtArgs>[]
      components: Prisma.$AssetComponentPayload<ExtArgs>[]
      parentComponents: Prisma.$AssetComponentPayload<ExtArgs>[]
      transfersFrom: Prisma.$ComponentTransferPayload<ExtArgs>[]
      transfersTo: Prisma.$ComponentTransferPayload<ExtArgs>[]
      inventories: Prisma.$InventoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assetTag: string
      name: string
      description: string | null
      serialNumber: string | null
      model: string | null
      brand: string | null
      purchaseDate: Date | null
      purchasePrice: Prisma.Decimal | null
      currentValue: Prisma.Decimal | null
      warrantyExpiry: Date | null
      status: $Enums.AssetStatus
      condition: string | null
      notes: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      categoryId: string
      vendorId: string | null
      locationId: string | null
      departmentId: string | null
      assignedToId: string | null
    }, ExtArgs["result"]["asset"]>
    composites: {}
  }

  type AssetGetPayload<S extends boolean | null | undefined | AssetDefaultArgs> = $Result.GetResult<Prisma.$AssetPayload, S>

  type AssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssetCountAggregateInputType | true
    }

  export interface AssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Asset'], meta: { name: 'Asset' } }
    /**
     * Find zero or one Asset that matches the filter.
     * @param {AssetFindUniqueArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetFindUniqueArgs>(args: SelectSubset<T, AssetFindUniqueArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Asset that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssetFindUniqueOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Asset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetFindFirstArgs>(args?: SelectSubset<T, AssetFindFirstArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Asset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Assets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assets
     * const assets = await prisma.asset.findMany()
     * 
     * // Get first 10 Assets
     * const assets = await prisma.asset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetWithIdOnly = await prisma.asset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Asset.
     * @param {AssetCreateArgs} args - Arguments to create a Asset.
     * @example
     * // Create one Asset
     * const Asset = await prisma.asset.create({
     *   data: {
     *     // ... data to create a Asset
     *   }
     * })
     * 
     */
    create<T extends AssetCreateArgs>(args: SelectSubset<T, AssetCreateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Assets.
     * @param {AssetCreateManyArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetCreateManyArgs>(args?: SelectSubset<T, AssetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assets and returns the data saved in the database.
     * @param {AssetCreateManyAndReturnArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assets and only return the `id`
     * const assetWithIdOnly = await prisma.asset.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Asset.
     * @param {AssetDeleteArgs} args - Arguments to delete one Asset.
     * @example
     * // Delete one Asset
     * const Asset = await prisma.asset.delete({
     *   where: {
     *     // ... filter to delete one Asset
     *   }
     * })
     * 
     */
    delete<T extends AssetDeleteArgs>(args: SelectSubset<T, AssetDeleteArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Asset.
     * @param {AssetUpdateArgs} args - Arguments to update one Asset.
     * @example
     * // Update one Asset
     * const asset = await prisma.asset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetUpdateArgs>(args: SelectSubset<T, AssetUpdateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Assets.
     * @param {AssetDeleteManyArgs} args - Arguments to filter Assets to delete.
     * @example
     * // Delete a few Assets
     * const { count } = await prisma.asset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetDeleteManyArgs>(args?: SelectSubset<T, AssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetUpdateManyArgs>(args: SelectSubset<T, AssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Asset.
     * @param {AssetUpsertArgs} args - Arguments to update or create a Asset.
     * @example
     * // Update or create a Asset
     * const asset = await prisma.asset.upsert({
     *   create: {
     *     // ... data to create a Asset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Asset we want to update
     *   }
     * })
     */
    upsert<T extends AssetUpsertArgs>(args: SelectSubset<T, AssetUpsertArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCountArgs} args - Arguments to filter Assets to count.
     * @example
     * // Count the number of Assets
     * const count = await prisma.asset.count({
     *   where: {
     *     // ... the filter for the Assets we want to count
     *   }
     * })
    **/
    count<T extends AssetCountArgs>(
      args?: Subset<T, AssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs>): Prisma.PrismaPromise<GetAssetAggregateType<T>>

    /**
     * Group by Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetGroupByArgs['orderBy'] }
        : { orderBy?: AssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Asset model
   */
  readonly fields: AssetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Asset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    vendor<T extends Asset$vendorArgs<ExtArgs> = {}>(args?: Subset<T, Asset$vendorArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    location<T extends Asset$locationArgs<ExtArgs> = {}>(args?: Subset<T, Asset$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    department<T extends Asset$departmentArgs<ExtArgs> = {}>(args?: Subset<T, Asset$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    assignedTo<T extends Asset$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, Asset$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    assetRequests<T extends Asset$assetRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$assetRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "findMany"> | Null>
    maintenanceRecords<T extends Asset$maintenanceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$maintenanceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "findMany"> | Null>
    auditRecords<T extends Asset$auditRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$auditRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditRecordPayload<ExtArgs>, T, "findMany"> | Null>
    disposalRecord<T extends Asset$disposalRecordArgs<ExtArgs> = {}>(args?: Subset<T, Asset$disposalRecordArgs<ExtArgs>>): Prisma__DisposalRecordClient<$Result.GetResult<Prisma.$DisposalRecordPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    partUsages<T extends Asset$partUsagesArgs<ExtArgs> = {}>(args?: Subset<T, Asset$partUsagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "findMany"> | Null>
    partReplacements<T extends Asset$partReplacementsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$partReplacementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "findMany"> | Null>
    partRegistrations<T extends Asset$partRegistrationsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$partRegistrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "findMany"> | Null>
    components<T extends Asset$componentsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$componentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "findMany"> | Null>
    parentComponents<T extends Asset$parentComponentsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$parentComponentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "findMany"> | Null>
    transfersFrom<T extends Asset$transfersFromArgs<ExtArgs> = {}>(args?: Subset<T, Asset$transfersFromArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "findMany"> | Null>
    transfersTo<T extends Asset$transfersToArgs<ExtArgs> = {}>(args?: Subset<T, Asset$transfersToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "findMany"> | Null>
    inventories<T extends Asset$inventoriesArgs<ExtArgs> = {}>(args?: Subset<T, Asset$inventoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Asset model
   */ 
  interface AssetFieldRefs {
    readonly id: FieldRef<"Asset", 'String'>
    readonly assetTag: FieldRef<"Asset", 'String'>
    readonly name: FieldRef<"Asset", 'String'>
    readonly description: FieldRef<"Asset", 'String'>
    readonly serialNumber: FieldRef<"Asset", 'String'>
    readonly model: FieldRef<"Asset", 'String'>
    readonly brand: FieldRef<"Asset", 'String'>
    readonly purchaseDate: FieldRef<"Asset", 'DateTime'>
    readonly purchasePrice: FieldRef<"Asset", 'Decimal'>
    readonly currentValue: FieldRef<"Asset", 'Decimal'>
    readonly warrantyExpiry: FieldRef<"Asset", 'DateTime'>
    readonly status: FieldRef<"Asset", 'AssetStatus'>
    readonly condition: FieldRef<"Asset", 'String'>
    readonly notes: FieldRef<"Asset", 'String'>
    readonly isActive: FieldRef<"Asset", 'Boolean'>
    readonly createdAt: FieldRef<"Asset", 'DateTime'>
    readonly updatedAt: FieldRef<"Asset", 'DateTime'>
    readonly categoryId: FieldRef<"Asset", 'String'>
    readonly vendorId: FieldRef<"Asset", 'String'>
    readonly locationId: FieldRef<"Asset", 'String'>
    readonly departmentId: FieldRef<"Asset", 'String'>
    readonly assignedToId: FieldRef<"Asset", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Asset findUnique
   */
  export type AssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findUniqueOrThrow
   */
  export type AssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findFirst
   */
  export type AssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findFirstOrThrow
   */
  export type AssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findMany
   */
  export type AssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Assets to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset create
   */
  export type AssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to create a Asset.
     */
    data: XOR<AssetCreateInput, AssetUncheckedCreateInput>
  }

  /**
   * Asset createMany
   */
  export type AssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Asset createManyAndReturn
   */
  export type AssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Asset update
   */
  export type AssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to update a Asset.
     */
    data: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
    /**
     * Choose, which Asset to update.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset updateMany
   */
  export type AssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assets.
     */
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     */
    where?: AssetWhereInput
  }

  /**
   * Asset upsert
   */
  export type AssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The filter to search for the Asset to update in case it exists.
     */
    where: AssetWhereUniqueInput
    /**
     * In case the Asset found by the `where` argument doesn't exist, create a new Asset with this data.
     */
    create: XOR<AssetCreateInput, AssetUncheckedCreateInput>
    /**
     * In case the Asset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
  }

  /**
   * Asset delete
   */
  export type AssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter which Asset to delete.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset deleteMany
   */
  export type AssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assets to delete
     */
    where?: AssetWhereInput
  }

  /**
   * Asset.vendor
   */
  export type Asset$vendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
  }

  /**
   * Asset.location
   */
  export type Asset$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }

  /**
   * Asset.department
   */
  export type Asset$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Asset.assignedTo
   */
  export type Asset$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Asset.assetRequests
   */
  export type Asset$assetRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    where?: AssetRequestWhereInput
    orderBy?: AssetRequestOrderByWithRelationInput | AssetRequestOrderByWithRelationInput[]
    cursor?: AssetRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetRequestScalarFieldEnum | AssetRequestScalarFieldEnum[]
  }

  /**
   * Asset.maintenanceRecords
   */
  export type Asset$maintenanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    where?: MaintenanceRecordWhereInput
    orderBy?: MaintenanceRecordOrderByWithRelationInput | MaintenanceRecordOrderByWithRelationInput[]
    cursor?: MaintenanceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceRecordScalarFieldEnum | MaintenanceRecordScalarFieldEnum[]
  }

  /**
   * Asset.auditRecords
   */
  export type Asset$auditRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordInclude<ExtArgs> | null
    where?: AuditRecordWhereInput
    orderBy?: AuditRecordOrderByWithRelationInput | AuditRecordOrderByWithRelationInput[]
    cursor?: AuditRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditRecordScalarFieldEnum | AuditRecordScalarFieldEnum[]
  }

  /**
   * Asset.disposalRecord
   */
  export type Asset$disposalRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisposalRecord
     */
    select?: DisposalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisposalRecordInclude<ExtArgs> | null
    where?: DisposalRecordWhereInput
  }

  /**
   * Asset.partUsages
   */
  export type Asset$partUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    where?: PartUsageWhereInput
    orderBy?: PartUsageOrderByWithRelationInput | PartUsageOrderByWithRelationInput[]
    cursor?: PartUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartUsageScalarFieldEnum | PartUsageScalarFieldEnum[]
  }

  /**
   * Asset.partReplacements
   */
  export type Asset$partReplacementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    where?: PartReplacementWhereInput
    orderBy?: PartReplacementOrderByWithRelationInput | PartReplacementOrderByWithRelationInput[]
    cursor?: PartReplacementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartReplacementScalarFieldEnum | PartReplacementScalarFieldEnum[]
  }

  /**
   * Asset.partRegistrations
   */
  export type Asset$partRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
    where?: NewPartRegistrationWhereInput
    orderBy?: NewPartRegistrationOrderByWithRelationInput | NewPartRegistrationOrderByWithRelationInput[]
    cursor?: NewPartRegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NewPartRegistrationScalarFieldEnum | NewPartRegistrationScalarFieldEnum[]
  }

  /**
   * Asset.components
   */
  export type Asset$componentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    where?: AssetComponentWhereInput
    orderBy?: AssetComponentOrderByWithRelationInput | AssetComponentOrderByWithRelationInput[]
    cursor?: AssetComponentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetComponentScalarFieldEnum | AssetComponentScalarFieldEnum[]
  }

  /**
   * Asset.parentComponents
   */
  export type Asset$parentComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    where?: AssetComponentWhereInput
    orderBy?: AssetComponentOrderByWithRelationInput | AssetComponentOrderByWithRelationInput[]
    cursor?: AssetComponentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetComponentScalarFieldEnum | AssetComponentScalarFieldEnum[]
  }

  /**
   * Asset.transfersFrom
   */
  export type Asset$transfersFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    where?: ComponentTransferWhereInput
    orderBy?: ComponentTransferOrderByWithRelationInput | ComponentTransferOrderByWithRelationInput[]
    cursor?: ComponentTransferWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentTransferScalarFieldEnum | ComponentTransferScalarFieldEnum[]
  }

  /**
   * Asset.transfersTo
   */
  export type Asset$transfersToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    where?: ComponentTransferWhereInput
    orderBy?: ComponentTransferOrderByWithRelationInput | ComponentTransferOrderByWithRelationInput[]
    cursor?: ComponentTransferWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentTransferScalarFieldEnum | ComponentTransferScalarFieldEnum[]
  }

  /**
   * Asset.inventories
   */
  export type Asset$inventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    cursor?: InventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Asset without action
   */
  export type AssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
  }


  /**
   * Model AssetRequest
   */

  export type AggregateAssetRequest = {
    _count: AssetRequestCountAggregateOutputType | null
    _min: AssetRequestMinAggregateOutputType | null
    _max: AssetRequestMaxAggregateOutputType | null
  }

  export type AssetRequestMinAggregateOutputType = {
    id: string | null
    requestNumber: string | null
    description: string | null
    justification: string | null
    priority: string | null
    status: $Enums.RequestStatus | null
    requestedDate: Date | null
    approvedDate: Date | null
    allocatedDate: Date | null
    rejectionReason: string | null
    notes: string | null
    requesterId: string | null
    departmentId: string | null
    assetId: string | null
    approvedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetRequestMaxAggregateOutputType = {
    id: string | null
    requestNumber: string | null
    description: string | null
    justification: string | null
    priority: string | null
    status: $Enums.RequestStatus | null
    requestedDate: Date | null
    approvedDate: Date | null
    allocatedDate: Date | null
    rejectionReason: string | null
    notes: string | null
    requesterId: string | null
    departmentId: string | null
    assetId: string | null
    approvedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetRequestCountAggregateOutputType = {
    id: number
    requestNumber: number
    description: number
    justification: number
    priority: number
    status: number
    requestedDate: number
    approvedDate: number
    allocatedDate: number
    rejectionReason: number
    notes: number
    requesterId: number
    departmentId: number
    assetId: number
    approvedById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssetRequestMinAggregateInputType = {
    id?: true
    requestNumber?: true
    description?: true
    justification?: true
    priority?: true
    status?: true
    requestedDate?: true
    approvedDate?: true
    allocatedDate?: true
    rejectionReason?: true
    notes?: true
    requesterId?: true
    departmentId?: true
    assetId?: true
    approvedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetRequestMaxAggregateInputType = {
    id?: true
    requestNumber?: true
    description?: true
    justification?: true
    priority?: true
    status?: true
    requestedDate?: true
    approvedDate?: true
    allocatedDate?: true
    rejectionReason?: true
    notes?: true
    requesterId?: true
    departmentId?: true
    assetId?: true
    approvedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetRequestCountAggregateInputType = {
    id?: true
    requestNumber?: true
    description?: true
    justification?: true
    priority?: true
    status?: true
    requestedDate?: true
    approvedDate?: true
    allocatedDate?: true
    rejectionReason?: true
    notes?: true
    requesterId?: true
    departmentId?: true
    assetId?: true
    approvedById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssetRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetRequest to aggregate.
     */
    where?: AssetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetRequests to fetch.
     */
    orderBy?: AssetRequestOrderByWithRelationInput | AssetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssetRequests
    **/
    _count?: true | AssetRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetRequestMaxAggregateInputType
  }

  export type GetAssetRequestAggregateType<T extends AssetRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateAssetRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssetRequest[P]>
      : GetScalarType<T[P], AggregateAssetRequest[P]>
  }




  export type AssetRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetRequestWhereInput
    orderBy?: AssetRequestOrderByWithAggregationInput | AssetRequestOrderByWithAggregationInput[]
    by: AssetRequestScalarFieldEnum[] | AssetRequestScalarFieldEnum
    having?: AssetRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetRequestCountAggregateInputType | true
    _min?: AssetRequestMinAggregateInputType
    _max?: AssetRequestMaxAggregateInputType
  }

  export type AssetRequestGroupByOutputType = {
    id: string
    requestNumber: string
    description: string
    justification: string
    priority: string
    status: $Enums.RequestStatus
    requestedDate: Date
    approvedDate: Date | null
    allocatedDate: Date | null
    rejectionReason: string | null
    notes: string | null
    requesterId: string
    departmentId: string
    assetId: string | null
    approvedById: string | null
    createdAt: Date
    updatedAt: Date
    _count: AssetRequestCountAggregateOutputType | null
    _min: AssetRequestMinAggregateOutputType | null
    _max: AssetRequestMaxAggregateOutputType | null
  }

  type GetAssetRequestGroupByPayload<T extends AssetRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetRequestGroupByOutputType[P]>
            : GetScalarType<T[P], AssetRequestGroupByOutputType[P]>
        }
      >
    >


  export type AssetRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestNumber?: boolean
    description?: boolean
    justification?: boolean
    priority?: boolean
    status?: boolean
    requestedDate?: boolean
    approvedDate?: boolean
    allocatedDate?: boolean
    rejectionReason?: boolean
    notes?: boolean
    requesterId?: boolean
    departmentId?: boolean
    assetId?: boolean
    approvedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    asset?: boolean | AssetRequest$assetArgs<ExtArgs>
    approvedBy?: boolean | AssetRequest$approvedByArgs<ExtArgs>
  }, ExtArgs["result"]["assetRequest"]>

  export type AssetRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestNumber?: boolean
    description?: boolean
    justification?: boolean
    priority?: boolean
    status?: boolean
    requestedDate?: boolean
    approvedDate?: boolean
    allocatedDate?: boolean
    rejectionReason?: boolean
    notes?: boolean
    requesterId?: boolean
    departmentId?: boolean
    assetId?: boolean
    approvedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    asset?: boolean | AssetRequest$assetArgs<ExtArgs>
    approvedBy?: boolean | AssetRequest$approvedByArgs<ExtArgs>
  }, ExtArgs["result"]["assetRequest"]>

  export type AssetRequestSelectScalar = {
    id?: boolean
    requestNumber?: boolean
    description?: boolean
    justification?: boolean
    priority?: boolean
    status?: boolean
    requestedDate?: boolean
    approvedDate?: boolean
    allocatedDate?: boolean
    rejectionReason?: boolean
    notes?: boolean
    requesterId?: boolean
    departmentId?: boolean
    assetId?: boolean
    approvedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssetRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    asset?: boolean | AssetRequest$assetArgs<ExtArgs>
    approvedBy?: boolean | AssetRequest$approvedByArgs<ExtArgs>
  }
  export type AssetRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    asset?: boolean | AssetRequest$assetArgs<ExtArgs>
    approvedBy?: boolean | AssetRequest$approvedByArgs<ExtArgs>
  }

  export type $AssetRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssetRequest"
    objects: {
      requester: Prisma.$UserPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs> | null
      approvedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestNumber: string
      description: string
      justification: string
      priority: string
      status: $Enums.RequestStatus
      requestedDate: Date
      approvedDate: Date | null
      allocatedDate: Date | null
      rejectionReason: string | null
      notes: string | null
      requesterId: string
      departmentId: string
      assetId: string | null
      approvedById: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["assetRequest"]>
    composites: {}
  }

  type AssetRequestGetPayload<S extends boolean | null | undefined | AssetRequestDefaultArgs> = $Result.GetResult<Prisma.$AssetRequestPayload, S>

  type AssetRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssetRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssetRequestCountAggregateInputType | true
    }

  export interface AssetRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetRequest'], meta: { name: 'AssetRequest' } }
    /**
     * Find zero or one AssetRequest that matches the filter.
     * @param {AssetRequestFindUniqueArgs} args - Arguments to find a AssetRequest
     * @example
     * // Get one AssetRequest
     * const assetRequest = await prisma.assetRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetRequestFindUniqueArgs>(args: SelectSubset<T, AssetRequestFindUniqueArgs<ExtArgs>>): Prisma__AssetRequestClient<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AssetRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssetRequestFindUniqueOrThrowArgs} args - Arguments to find a AssetRequest
     * @example
     * // Get one AssetRequest
     * const assetRequest = await prisma.assetRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetRequestClient<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AssetRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRequestFindFirstArgs} args - Arguments to find a AssetRequest
     * @example
     * // Get one AssetRequest
     * const assetRequest = await prisma.assetRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetRequestFindFirstArgs>(args?: SelectSubset<T, AssetRequestFindFirstArgs<ExtArgs>>): Prisma__AssetRequestClient<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AssetRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRequestFindFirstOrThrowArgs} args - Arguments to find a AssetRequest
     * @example
     * // Get one AssetRequest
     * const assetRequest = await prisma.assetRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetRequestClient<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AssetRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssetRequests
     * const assetRequests = await prisma.assetRequest.findMany()
     * 
     * // Get first 10 AssetRequests
     * const assetRequests = await prisma.assetRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetRequestWithIdOnly = await prisma.assetRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetRequestFindManyArgs>(args?: SelectSubset<T, AssetRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AssetRequest.
     * @param {AssetRequestCreateArgs} args - Arguments to create a AssetRequest.
     * @example
     * // Create one AssetRequest
     * const AssetRequest = await prisma.assetRequest.create({
     *   data: {
     *     // ... data to create a AssetRequest
     *   }
     * })
     * 
     */
    create<T extends AssetRequestCreateArgs>(args: SelectSubset<T, AssetRequestCreateArgs<ExtArgs>>): Prisma__AssetRequestClient<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AssetRequests.
     * @param {AssetRequestCreateManyArgs} args - Arguments to create many AssetRequests.
     * @example
     * // Create many AssetRequests
     * const assetRequest = await prisma.assetRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetRequestCreateManyArgs>(args?: SelectSubset<T, AssetRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssetRequests and returns the data saved in the database.
     * @param {AssetRequestCreateManyAndReturnArgs} args - Arguments to create many AssetRequests.
     * @example
     * // Create many AssetRequests
     * const assetRequest = await prisma.assetRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssetRequests and only return the `id`
     * const assetRequestWithIdOnly = await prisma.assetRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AssetRequest.
     * @param {AssetRequestDeleteArgs} args - Arguments to delete one AssetRequest.
     * @example
     * // Delete one AssetRequest
     * const AssetRequest = await prisma.assetRequest.delete({
     *   where: {
     *     // ... filter to delete one AssetRequest
     *   }
     * })
     * 
     */
    delete<T extends AssetRequestDeleteArgs>(args: SelectSubset<T, AssetRequestDeleteArgs<ExtArgs>>): Prisma__AssetRequestClient<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AssetRequest.
     * @param {AssetRequestUpdateArgs} args - Arguments to update one AssetRequest.
     * @example
     * // Update one AssetRequest
     * const assetRequest = await prisma.assetRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetRequestUpdateArgs>(args: SelectSubset<T, AssetRequestUpdateArgs<ExtArgs>>): Prisma__AssetRequestClient<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AssetRequests.
     * @param {AssetRequestDeleteManyArgs} args - Arguments to filter AssetRequests to delete.
     * @example
     * // Delete a few AssetRequests
     * const { count } = await prisma.assetRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetRequestDeleteManyArgs>(args?: SelectSubset<T, AssetRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssetRequests
     * const assetRequest = await prisma.assetRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetRequestUpdateManyArgs>(args: SelectSubset<T, AssetRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AssetRequest.
     * @param {AssetRequestUpsertArgs} args - Arguments to update or create a AssetRequest.
     * @example
     * // Update or create a AssetRequest
     * const assetRequest = await prisma.assetRequest.upsert({
     *   create: {
     *     // ... data to create a AssetRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssetRequest we want to update
     *   }
     * })
     */
    upsert<T extends AssetRequestUpsertArgs>(args: SelectSubset<T, AssetRequestUpsertArgs<ExtArgs>>): Prisma__AssetRequestClient<$Result.GetResult<Prisma.$AssetRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AssetRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRequestCountArgs} args - Arguments to filter AssetRequests to count.
     * @example
     * // Count the number of AssetRequests
     * const count = await prisma.assetRequest.count({
     *   where: {
     *     // ... the filter for the AssetRequests we want to count
     *   }
     * })
    **/
    count<T extends AssetRequestCountArgs>(
      args?: Subset<T, AssetRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssetRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetRequestAggregateArgs>(args: Subset<T, AssetRequestAggregateArgs>): Prisma.PrismaPromise<GetAssetRequestAggregateType<T>>

    /**
     * Group by AssetRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetRequestGroupByArgs['orderBy'] }
        : { orderBy?: AssetRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssetRequest model
   */
  readonly fields: AssetRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssetRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requester<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    asset<T extends AssetRequest$assetArgs<ExtArgs> = {}>(args?: Subset<T, AssetRequest$assetArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    approvedBy<T extends AssetRequest$approvedByArgs<ExtArgs> = {}>(args?: Subset<T, AssetRequest$approvedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssetRequest model
   */ 
  interface AssetRequestFieldRefs {
    readonly id: FieldRef<"AssetRequest", 'String'>
    readonly requestNumber: FieldRef<"AssetRequest", 'String'>
    readonly description: FieldRef<"AssetRequest", 'String'>
    readonly justification: FieldRef<"AssetRequest", 'String'>
    readonly priority: FieldRef<"AssetRequest", 'String'>
    readonly status: FieldRef<"AssetRequest", 'RequestStatus'>
    readonly requestedDate: FieldRef<"AssetRequest", 'DateTime'>
    readonly approvedDate: FieldRef<"AssetRequest", 'DateTime'>
    readonly allocatedDate: FieldRef<"AssetRequest", 'DateTime'>
    readonly rejectionReason: FieldRef<"AssetRequest", 'String'>
    readonly notes: FieldRef<"AssetRequest", 'String'>
    readonly requesterId: FieldRef<"AssetRequest", 'String'>
    readonly departmentId: FieldRef<"AssetRequest", 'String'>
    readonly assetId: FieldRef<"AssetRequest", 'String'>
    readonly approvedById: FieldRef<"AssetRequest", 'String'>
    readonly createdAt: FieldRef<"AssetRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"AssetRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AssetRequest findUnique
   */
  export type AssetRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    /**
     * Filter, which AssetRequest to fetch.
     */
    where: AssetRequestWhereUniqueInput
  }

  /**
   * AssetRequest findUniqueOrThrow
   */
  export type AssetRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    /**
     * Filter, which AssetRequest to fetch.
     */
    where: AssetRequestWhereUniqueInput
  }

  /**
   * AssetRequest findFirst
   */
  export type AssetRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    /**
     * Filter, which AssetRequest to fetch.
     */
    where?: AssetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetRequests to fetch.
     */
    orderBy?: AssetRequestOrderByWithRelationInput | AssetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetRequests.
     */
    cursor?: AssetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetRequests.
     */
    distinct?: AssetRequestScalarFieldEnum | AssetRequestScalarFieldEnum[]
  }

  /**
   * AssetRequest findFirstOrThrow
   */
  export type AssetRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    /**
     * Filter, which AssetRequest to fetch.
     */
    where?: AssetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetRequests to fetch.
     */
    orderBy?: AssetRequestOrderByWithRelationInput | AssetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetRequests.
     */
    cursor?: AssetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetRequests.
     */
    distinct?: AssetRequestScalarFieldEnum | AssetRequestScalarFieldEnum[]
  }

  /**
   * AssetRequest findMany
   */
  export type AssetRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    /**
     * Filter, which AssetRequests to fetch.
     */
    where?: AssetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetRequests to fetch.
     */
    orderBy?: AssetRequestOrderByWithRelationInput | AssetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssetRequests.
     */
    cursor?: AssetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetRequests.
     */
    skip?: number
    distinct?: AssetRequestScalarFieldEnum | AssetRequestScalarFieldEnum[]
  }

  /**
   * AssetRequest create
   */
  export type AssetRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a AssetRequest.
     */
    data: XOR<AssetRequestCreateInput, AssetRequestUncheckedCreateInput>
  }

  /**
   * AssetRequest createMany
   */
  export type AssetRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssetRequests.
     */
    data: AssetRequestCreateManyInput | AssetRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssetRequest createManyAndReturn
   */
  export type AssetRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AssetRequests.
     */
    data: AssetRequestCreateManyInput | AssetRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetRequest update
   */
  export type AssetRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a AssetRequest.
     */
    data: XOR<AssetRequestUpdateInput, AssetRequestUncheckedUpdateInput>
    /**
     * Choose, which AssetRequest to update.
     */
    where: AssetRequestWhereUniqueInput
  }

  /**
   * AssetRequest updateMany
   */
  export type AssetRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssetRequests.
     */
    data: XOR<AssetRequestUpdateManyMutationInput, AssetRequestUncheckedUpdateManyInput>
    /**
     * Filter which AssetRequests to update
     */
    where?: AssetRequestWhereInput
  }

  /**
   * AssetRequest upsert
   */
  export type AssetRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the AssetRequest to update in case it exists.
     */
    where: AssetRequestWhereUniqueInput
    /**
     * In case the AssetRequest found by the `where` argument doesn't exist, create a new AssetRequest with this data.
     */
    create: XOR<AssetRequestCreateInput, AssetRequestUncheckedCreateInput>
    /**
     * In case the AssetRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetRequestUpdateInput, AssetRequestUncheckedUpdateInput>
  }

  /**
   * AssetRequest delete
   */
  export type AssetRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
    /**
     * Filter which AssetRequest to delete.
     */
    where: AssetRequestWhereUniqueInput
  }

  /**
   * AssetRequest deleteMany
   */
  export type AssetRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetRequests to delete
     */
    where?: AssetRequestWhereInput
  }

  /**
   * AssetRequest.asset
   */
  export type AssetRequest$assetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * AssetRequest.approvedBy
   */
  export type AssetRequest$approvedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AssetRequest without action
   */
  export type AssetRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRequest
     */
    select?: AssetRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRequestInclude<ExtArgs> | null
  }


  /**
   * Model MaintenanceRecord
   */

  export type AggregateMaintenanceRecord = {
    _count: MaintenanceRecordCountAggregateOutputType | null
    _avg: MaintenanceRecordAvgAggregateOutputType | null
    _sum: MaintenanceRecordSumAggregateOutputType | null
    _min: MaintenanceRecordMinAggregateOutputType | null
    _max: MaintenanceRecordMaxAggregateOutputType | null
  }

  export type MaintenanceRecordAvgAggregateOutputType = {
    cost: Decimal | null
  }

  export type MaintenanceRecordSumAggregateOutputType = {
    cost: Decimal | null
  }

  export type MaintenanceRecordMinAggregateOutputType = {
    id: string | null
    maintenanceType: string | null
    description: string | null
    scheduledDate: Date | null
    completedDate: Date | null
    status: $Enums.MaintenanceStatus | null
    cost: Decimal | null
    notes: string | null
    assetId: string | null
    technicianId: string | null
    vendorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MaintenanceRecordMaxAggregateOutputType = {
    id: string | null
    maintenanceType: string | null
    description: string | null
    scheduledDate: Date | null
    completedDate: Date | null
    status: $Enums.MaintenanceStatus | null
    cost: Decimal | null
    notes: string | null
    assetId: string | null
    technicianId: string | null
    vendorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MaintenanceRecordCountAggregateOutputType = {
    id: number
    maintenanceType: number
    description: number
    scheduledDate: number
    completedDate: number
    status: number
    cost: number
    notes: number
    assetId: number
    technicianId: number
    vendorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MaintenanceRecordAvgAggregateInputType = {
    cost?: true
  }

  export type MaintenanceRecordSumAggregateInputType = {
    cost?: true
  }

  export type MaintenanceRecordMinAggregateInputType = {
    id?: true
    maintenanceType?: true
    description?: true
    scheduledDate?: true
    completedDate?: true
    status?: true
    cost?: true
    notes?: true
    assetId?: true
    technicianId?: true
    vendorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MaintenanceRecordMaxAggregateInputType = {
    id?: true
    maintenanceType?: true
    description?: true
    scheduledDate?: true
    completedDate?: true
    status?: true
    cost?: true
    notes?: true
    assetId?: true
    technicianId?: true
    vendorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MaintenanceRecordCountAggregateInputType = {
    id?: true
    maintenanceType?: true
    description?: true
    scheduledDate?: true
    completedDate?: true
    status?: true
    cost?: true
    notes?: true
    assetId?: true
    technicianId?: true
    vendorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MaintenanceRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceRecord to aggregate.
     */
    where?: MaintenanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceRecords to fetch.
     */
    orderBy?: MaintenanceRecordOrderByWithRelationInput | MaintenanceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaintenanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaintenanceRecords
    **/
    _count?: true | MaintenanceRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaintenanceRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaintenanceRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaintenanceRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaintenanceRecordMaxAggregateInputType
  }

  export type GetMaintenanceRecordAggregateType<T extends MaintenanceRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateMaintenanceRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaintenanceRecord[P]>
      : GetScalarType<T[P], AggregateMaintenanceRecord[P]>
  }




  export type MaintenanceRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceRecordWhereInput
    orderBy?: MaintenanceRecordOrderByWithAggregationInput | MaintenanceRecordOrderByWithAggregationInput[]
    by: MaintenanceRecordScalarFieldEnum[] | MaintenanceRecordScalarFieldEnum
    having?: MaintenanceRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaintenanceRecordCountAggregateInputType | true
    _avg?: MaintenanceRecordAvgAggregateInputType
    _sum?: MaintenanceRecordSumAggregateInputType
    _min?: MaintenanceRecordMinAggregateInputType
    _max?: MaintenanceRecordMaxAggregateInputType
  }

  export type MaintenanceRecordGroupByOutputType = {
    id: string
    maintenanceType: string
    description: string
    scheduledDate: Date
    completedDate: Date | null
    status: $Enums.MaintenanceStatus
    cost: Decimal | null
    notes: string | null
    assetId: string
    technicianId: string | null
    vendorId: string | null
    createdAt: Date
    updatedAt: Date
    _count: MaintenanceRecordCountAggregateOutputType | null
    _avg: MaintenanceRecordAvgAggregateOutputType | null
    _sum: MaintenanceRecordSumAggregateOutputType | null
    _min: MaintenanceRecordMinAggregateOutputType | null
    _max: MaintenanceRecordMaxAggregateOutputType | null
  }

  type GetMaintenanceRecordGroupByPayload<T extends MaintenanceRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaintenanceRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaintenanceRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaintenanceRecordGroupByOutputType[P]>
            : GetScalarType<T[P], MaintenanceRecordGroupByOutputType[P]>
        }
      >
    >


  export type MaintenanceRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    maintenanceType?: boolean
    description?: boolean
    scheduledDate?: boolean
    completedDate?: boolean
    status?: boolean
    cost?: boolean
    notes?: boolean
    assetId?: boolean
    technicianId?: boolean
    vendorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    technician?: boolean | MaintenanceRecord$technicianArgs<ExtArgs>
    vendor?: boolean | MaintenanceRecord$vendorArgs<ExtArgs>
    partUsages?: boolean | MaintenanceRecord$partUsagesArgs<ExtArgs>
    _count?: boolean | MaintenanceRecordCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceRecord"]>

  export type MaintenanceRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    maintenanceType?: boolean
    description?: boolean
    scheduledDate?: boolean
    completedDate?: boolean
    status?: boolean
    cost?: boolean
    notes?: boolean
    assetId?: boolean
    technicianId?: boolean
    vendorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    technician?: boolean | MaintenanceRecord$technicianArgs<ExtArgs>
    vendor?: boolean | MaintenanceRecord$vendorArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceRecord"]>

  export type MaintenanceRecordSelectScalar = {
    id?: boolean
    maintenanceType?: boolean
    description?: boolean
    scheduledDate?: boolean
    completedDate?: boolean
    status?: boolean
    cost?: boolean
    notes?: boolean
    assetId?: boolean
    technicianId?: boolean
    vendorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MaintenanceRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    technician?: boolean | MaintenanceRecord$technicianArgs<ExtArgs>
    vendor?: boolean | MaintenanceRecord$vendorArgs<ExtArgs>
    partUsages?: boolean | MaintenanceRecord$partUsagesArgs<ExtArgs>
    _count?: boolean | MaintenanceRecordCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MaintenanceRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    technician?: boolean | MaintenanceRecord$technicianArgs<ExtArgs>
    vendor?: boolean | MaintenanceRecord$vendorArgs<ExtArgs>
  }

  export type $MaintenanceRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaintenanceRecord"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs>
      technician: Prisma.$UserPayload<ExtArgs> | null
      vendor: Prisma.$VendorPayload<ExtArgs> | null
      partUsages: Prisma.$PartUsagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      maintenanceType: string
      description: string
      scheduledDate: Date
      completedDate: Date | null
      status: $Enums.MaintenanceStatus
      cost: Prisma.Decimal | null
      notes: string | null
      assetId: string
      technicianId: string | null
      vendorId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["maintenanceRecord"]>
    composites: {}
  }

  type MaintenanceRecordGetPayload<S extends boolean | null | undefined | MaintenanceRecordDefaultArgs> = $Result.GetResult<Prisma.$MaintenanceRecordPayload, S>

  type MaintenanceRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MaintenanceRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MaintenanceRecordCountAggregateInputType | true
    }

  export interface MaintenanceRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaintenanceRecord'], meta: { name: 'MaintenanceRecord' } }
    /**
     * Find zero or one MaintenanceRecord that matches the filter.
     * @param {MaintenanceRecordFindUniqueArgs} args - Arguments to find a MaintenanceRecord
     * @example
     * // Get one MaintenanceRecord
     * const maintenanceRecord = await prisma.maintenanceRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaintenanceRecordFindUniqueArgs>(args: SelectSubset<T, MaintenanceRecordFindUniqueArgs<ExtArgs>>): Prisma__MaintenanceRecordClient<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MaintenanceRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MaintenanceRecordFindUniqueOrThrowArgs} args - Arguments to find a MaintenanceRecord
     * @example
     * // Get one MaintenanceRecord
     * const maintenanceRecord = await prisma.maintenanceRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaintenanceRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, MaintenanceRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaintenanceRecordClient<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MaintenanceRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRecordFindFirstArgs} args - Arguments to find a MaintenanceRecord
     * @example
     * // Get one MaintenanceRecord
     * const maintenanceRecord = await prisma.maintenanceRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaintenanceRecordFindFirstArgs>(args?: SelectSubset<T, MaintenanceRecordFindFirstArgs<ExtArgs>>): Prisma__MaintenanceRecordClient<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MaintenanceRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRecordFindFirstOrThrowArgs} args - Arguments to find a MaintenanceRecord
     * @example
     * // Get one MaintenanceRecord
     * const maintenanceRecord = await prisma.maintenanceRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaintenanceRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, MaintenanceRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaintenanceRecordClient<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MaintenanceRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaintenanceRecords
     * const maintenanceRecords = await prisma.maintenanceRecord.findMany()
     * 
     * // Get first 10 MaintenanceRecords
     * const maintenanceRecords = await prisma.maintenanceRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const maintenanceRecordWithIdOnly = await prisma.maintenanceRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaintenanceRecordFindManyArgs>(args?: SelectSubset<T, MaintenanceRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MaintenanceRecord.
     * @param {MaintenanceRecordCreateArgs} args - Arguments to create a MaintenanceRecord.
     * @example
     * // Create one MaintenanceRecord
     * const MaintenanceRecord = await prisma.maintenanceRecord.create({
     *   data: {
     *     // ... data to create a MaintenanceRecord
     *   }
     * })
     * 
     */
    create<T extends MaintenanceRecordCreateArgs>(args: SelectSubset<T, MaintenanceRecordCreateArgs<ExtArgs>>): Prisma__MaintenanceRecordClient<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MaintenanceRecords.
     * @param {MaintenanceRecordCreateManyArgs} args - Arguments to create many MaintenanceRecords.
     * @example
     * // Create many MaintenanceRecords
     * const maintenanceRecord = await prisma.maintenanceRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaintenanceRecordCreateManyArgs>(args?: SelectSubset<T, MaintenanceRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MaintenanceRecords and returns the data saved in the database.
     * @param {MaintenanceRecordCreateManyAndReturnArgs} args - Arguments to create many MaintenanceRecords.
     * @example
     * // Create many MaintenanceRecords
     * const maintenanceRecord = await prisma.maintenanceRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MaintenanceRecords and only return the `id`
     * const maintenanceRecordWithIdOnly = await prisma.maintenanceRecord.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaintenanceRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, MaintenanceRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MaintenanceRecord.
     * @param {MaintenanceRecordDeleteArgs} args - Arguments to delete one MaintenanceRecord.
     * @example
     * // Delete one MaintenanceRecord
     * const MaintenanceRecord = await prisma.maintenanceRecord.delete({
     *   where: {
     *     // ... filter to delete one MaintenanceRecord
     *   }
     * })
     * 
     */
    delete<T extends MaintenanceRecordDeleteArgs>(args: SelectSubset<T, MaintenanceRecordDeleteArgs<ExtArgs>>): Prisma__MaintenanceRecordClient<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MaintenanceRecord.
     * @param {MaintenanceRecordUpdateArgs} args - Arguments to update one MaintenanceRecord.
     * @example
     * // Update one MaintenanceRecord
     * const maintenanceRecord = await prisma.maintenanceRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaintenanceRecordUpdateArgs>(args: SelectSubset<T, MaintenanceRecordUpdateArgs<ExtArgs>>): Prisma__MaintenanceRecordClient<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MaintenanceRecords.
     * @param {MaintenanceRecordDeleteManyArgs} args - Arguments to filter MaintenanceRecords to delete.
     * @example
     * // Delete a few MaintenanceRecords
     * const { count } = await prisma.maintenanceRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaintenanceRecordDeleteManyArgs>(args?: SelectSubset<T, MaintenanceRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaintenanceRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaintenanceRecords
     * const maintenanceRecord = await prisma.maintenanceRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaintenanceRecordUpdateManyArgs>(args: SelectSubset<T, MaintenanceRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MaintenanceRecord.
     * @param {MaintenanceRecordUpsertArgs} args - Arguments to update or create a MaintenanceRecord.
     * @example
     * // Update or create a MaintenanceRecord
     * const maintenanceRecord = await prisma.maintenanceRecord.upsert({
     *   create: {
     *     // ... data to create a MaintenanceRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaintenanceRecord we want to update
     *   }
     * })
     */
    upsert<T extends MaintenanceRecordUpsertArgs>(args: SelectSubset<T, MaintenanceRecordUpsertArgs<ExtArgs>>): Prisma__MaintenanceRecordClient<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MaintenanceRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRecordCountArgs} args - Arguments to filter MaintenanceRecords to count.
     * @example
     * // Count the number of MaintenanceRecords
     * const count = await prisma.maintenanceRecord.count({
     *   where: {
     *     // ... the filter for the MaintenanceRecords we want to count
     *   }
     * })
    **/
    count<T extends MaintenanceRecordCountArgs>(
      args?: Subset<T, MaintenanceRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaintenanceRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaintenanceRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaintenanceRecordAggregateArgs>(args: Subset<T, MaintenanceRecordAggregateArgs>): Prisma.PrismaPromise<GetMaintenanceRecordAggregateType<T>>

    /**
     * Group by MaintenanceRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaintenanceRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaintenanceRecordGroupByArgs['orderBy'] }
        : { orderBy?: MaintenanceRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaintenanceRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaintenanceRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaintenanceRecord model
   */
  readonly fields: MaintenanceRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaintenanceRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaintenanceRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    technician<T extends MaintenanceRecord$technicianArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRecord$technicianArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    vendor<T extends MaintenanceRecord$vendorArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRecord$vendorArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    partUsages<T extends MaintenanceRecord$partUsagesArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRecord$partUsagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaintenanceRecord model
   */ 
  interface MaintenanceRecordFieldRefs {
    readonly id: FieldRef<"MaintenanceRecord", 'String'>
    readonly maintenanceType: FieldRef<"MaintenanceRecord", 'String'>
    readonly description: FieldRef<"MaintenanceRecord", 'String'>
    readonly scheduledDate: FieldRef<"MaintenanceRecord", 'DateTime'>
    readonly completedDate: FieldRef<"MaintenanceRecord", 'DateTime'>
    readonly status: FieldRef<"MaintenanceRecord", 'MaintenanceStatus'>
    readonly cost: FieldRef<"MaintenanceRecord", 'Decimal'>
    readonly notes: FieldRef<"MaintenanceRecord", 'String'>
    readonly assetId: FieldRef<"MaintenanceRecord", 'String'>
    readonly technicianId: FieldRef<"MaintenanceRecord", 'String'>
    readonly vendorId: FieldRef<"MaintenanceRecord", 'String'>
    readonly createdAt: FieldRef<"MaintenanceRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"MaintenanceRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MaintenanceRecord findUnique
   */
  export type MaintenanceRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceRecord to fetch.
     */
    where: MaintenanceRecordWhereUniqueInput
  }

  /**
   * MaintenanceRecord findUniqueOrThrow
   */
  export type MaintenanceRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceRecord to fetch.
     */
    where: MaintenanceRecordWhereUniqueInput
  }

  /**
   * MaintenanceRecord findFirst
   */
  export type MaintenanceRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceRecord to fetch.
     */
    where?: MaintenanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceRecords to fetch.
     */
    orderBy?: MaintenanceRecordOrderByWithRelationInput | MaintenanceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceRecords.
     */
    cursor?: MaintenanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceRecords.
     */
    distinct?: MaintenanceRecordScalarFieldEnum | MaintenanceRecordScalarFieldEnum[]
  }

  /**
   * MaintenanceRecord findFirstOrThrow
   */
  export type MaintenanceRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceRecord to fetch.
     */
    where?: MaintenanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceRecords to fetch.
     */
    orderBy?: MaintenanceRecordOrderByWithRelationInput | MaintenanceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceRecords.
     */
    cursor?: MaintenanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceRecords.
     */
    distinct?: MaintenanceRecordScalarFieldEnum | MaintenanceRecordScalarFieldEnum[]
  }

  /**
   * MaintenanceRecord findMany
   */
  export type MaintenanceRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceRecords to fetch.
     */
    where?: MaintenanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceRecords to fetch.
     */
    orderBy?: MaintenanceRecordOrderByWithRelationInput | MaintenanceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaintenanceRecords.
     */
    cursor?: MaintenanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceRecords.
     */
    skip?: number
    distinct?: MaintenanceRecordScalarFieldEnum | MaintenanceRecordScalarFieldEnum[]
  }

  /**
   * MaintenanceRecord create
   */
  export type MaintenanceRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a MaintenanceRecord.
     */
    data: XOR<MaintenanceRecordCreateInput, MaintenanceRecordUncheckedCreateInput>
  }

  /**
   * MaintenanceRecord createMany
   */
  export type MaintenanceRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaintenanceRecords.
     */
    data: MaintenanceRecordCreateManyInput | MaintenanceRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MaintenanceRecord createManyAndReturn
   */
  export type MaintenanceRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MaintenanceRecords.
     */
    data: MaintenanceRecordCreateManyInput | MaintenanceRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaintenanceRecord update
   */
  export type MaintenanceRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a MaintenanceRecord.
     */
    data: XOR<MaintenanceRecordUpdateInput, MaintenanceRecordUncheckedUpdateInput>
    /**
     * Choose, which MaintenanceRecord to update.
     */
    where: MaintenanceRecordWhereUniqueInput
  }

  /**
   * MaintenanceRecord updateMany
   */
  export type MaintenanceRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaintenanceRecords.
     */
    data: XOR<MaintenanceRecordUpdateManyMutationInput, MaintenanceRecordUncheckedUpdateManyInput>
    /**
     * Filter which MaintenanceRecords to update
     */
    where?: MaintenanceRecordWhereInput
  }

  /**
   * MaintenanceRecord upsert
   */
  export type MaintenanceRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the MaintenanceRecord to update in case it exists.
     */
    where: MaintenanceRecordWhereUniqueInput
    /**
     * In case the MaintenanceRecord found by the `where` argument doesn't exist, create a new MaintenanceRecord with this data.
     */
    create: XOR<MaintenanceRecordCreateInput, MaintenanceRecordUncheckedCreateInput>
    /**
     * In case the MaintenanceRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaintenanceRecordUpdateInput, MaintenanceRecordUncheckedUpdateInput>
  }

  /**
   * MaintenanceRecord delete
   */
  export type MaintenanceRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    /**
     * Filter which MaintenanceRecord to delete.
     */
    where: MaintenanceRecordWhereUniqueInput
  }

  /**
   * MaintenanceRecord deleteMany
   */
  export type MaintenanceRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceRecords to delete
     */
    where?: MaintenanceRecordWhereInput
  }

  /**
   * MaintenanceRecord.technician
   */
  export type MaintenanceRecord$technicianArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * MaintenanceRecord.vendor
   */
  export type MaintenanceRecord$vendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
  }

  /**
   * MaintenanceRecord.partUsages
   */
  export type MaintenanceRecord$partUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    where?: PartUsageWhereInput
    orderBy?: PartUsageOrderByWithRelationInput | PartUsageOrderByWithRelationInput[]
    cursor?: PartUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartUsageScalarFieldEnum | PartUsageScalarFieldEnum[]
  }

  /**
   * MaintenanceRecord without action
   */
  export type MaintenanceRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
  }


  /**
   * Model MaintenanceContract
   */

  export type AggregateMaintenanceContract = {
    _count: MaintenanceContractCountAggregateOutputType | null
    _avg: MaintenanceContractAvgAggregateOutputType | null
    _sum: MaintenanceContractSumAggregateOutputType | null
    _min: MaintenanceContractMinAggregateOutputType | null
    _max: MaintenanceContractMaxAggregateOutputType | null
  }

  export type MaintenanceContractAvgAggregateOutputType = {
    cost: Decimal | null
  }

  export type MaintenanceContractSumAggregateOutputType = {
    cost: Decimal | null
  }

  export type MaintenanceContractMinAggregateOutputType = {
    id: string | null
    contractNumber: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    cost: Decimal | null
    terms: string | null
    isActive: boolean | null
    vendorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MaintenanceContractMaxAggregateOutputType = {
    id: string | null
    contractNumber: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    cost: Decimal | null
    terms: string | null
    isActive: boolean | null
    vendorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MaintenanceContractCountAggregateOutputType = {
    id: number
    contractNumber: number
    description: number
    startDate: number
    endDate: number
    cost: number
    terms: number
    isActive: number
    vendorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MaintenanceContractAvgAggregateInputType = {
    cost?: true
  }

  export type MaintenanceContractSumAggregateInputType = {
    cost?: true
  }

  export type MaintenanceContractMinAggregateInputType = {
    id?: true
    contractNumber?: true
    description?: true
    startDate?: true
    endDate?: true
    cost?: true
    terms?: true
    isActive?: true
    vendorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MaintenanceContractMaxAggregateInputType = {
    id?: true
    contractNumber?: true
    description?: true
    startDate?: true
    endDate?: true
    cost?: true
    terms?: true
    isActive?: true
    vendorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MaintenanceContractCountAggregateInputType = {
    id?: true
    contractNumber?: true
    description?: true
    startDate?: true
    endDate?: true
    cost?: true
    terms?: true
    isActive?: true
    vendorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MaintenanceContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceContract to aggregate.
     */
    where?: MaintenanceContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceContracts to fetch.
     */
    orderBy?: MaintenanceContractOrderByWithRelationInput | MaintenanceContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaintenanceContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaintenanceContracts
    **/
    _count?: true | MaintenanceContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaintenanceContractAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaintenanceContractSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaintenanceContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaintenanceContractMaxAggregateInputType
  }

  export type GetMaintenanceContractAggregateType<T extends MaintenanceContractAggregateArgs> = {
        [P in keyof T & keyof AggregateMaintenanceContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaintenanceContract[P]>
      : GetScalarType<T[P], AggregateMaintenanceContract[P]>
  }




  export type MaintenanceContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceContractWhereInput
    orderBy?: MaintenanceContractOrderByWithAggregationInput | MaintenanceContractOrderByWithAggregationInput[]
    by: MaintenanceContractScalarFieldEnum[] | MaintenanceContractScalarFieldEnum
    having?: MaintenanceContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaintenanceContractCountAggregateInputType | true
    _avg?: MaintenanceContractAvgAggregateInputType
    _sum?: MaintenanceContractSumAggregateInputType
    _min?: MaintenanceContractMinAggregateInputType
    _max?: MaintenanceContractMaxAggregateInputType
  }

  export type MaintenanceContractGroupByOutputType = {
    id: string
    contractNumber: string
    description: string
    startDate: Date
    endDate: Date
    cost: Decimal
    terms: string | null
    isActive: boolean
    vendorId: string
    createdAt: Date
    updatedAt: Date
    _count: MaintenanceContractCountAggregateOutputType | null
    _avg: MaintenanceContractAvgAggregateOutputType | null
    _sum: MaintenanceContractSumAggregateOutputType | null
    _min: MaintenanceContractMinAggregateOutputType | null
    _max: MaintenanceContractMaxAggregateOutputType | null
  }

  type GetMaintenanceContractGroupByPayload<T extends MaintenanceContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaintenanceContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaintenanceContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaintenanceContractGroupByOutputType[P]>
            : GetScalarType<T[P], MaintenanceContractGroupByOutputType[P]>
        }
      >
    >


  export type MaintenanceContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractNumber?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    cost?: boolean
    terms?: boolean
    isActive?: boolean
    vendorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceContract"]>

  export type MaintenanceContractSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractNumber?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    cost?: boolean
    terms?: boolean
    isActive?: boolean
    vendorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceContract"]>

  export type MaintenanceContractSelectScalar = {
    id?: boolean
    contractNumber?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    cost?: boolean
    terms?: boolean
    isActive?: boolean
    vendorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MaintenanceContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }
  export type MaintenanceContractIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }

  export type $MaintenanceContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaintenanceContract"
    objects: {
      vendor: Prisma.$VendorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      contractNumber: string
      description: string
      startDate: Date
      endDate: Date
      cost: Prisma.Decimal
      terms: string | null
      isActive: boolean
      vendorId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["maintenanceContract"]>
    composites: {}
  }

  type MaintenanceContractGetPayload<S extends boolean | null | undefined | MaintenanceContractDefaultArgs> = $Result.GetResult<Prisma.$MaintenanceContractPayload, S>

  type MaintenanceContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MaintenanceContractFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MaintenanceContractCountAggregateInputType | true
    }

  export interface MaintenanceContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaintenanceContract'], meta: { name: 'MaintenanceContract' } }
    /**
     * Find zero or one MaintenanceContract that matches the filter.
     * @param {MaintenanceContractFindUniqueArgs} args - Arguments to find a MaintenanceContract
     * @example
     * // Get one MaintenanceContract
     * const maintenanceContract = await prisma.maintenanceContract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaintenanceContractFindUniqueArgs>(args: SelectSubset<T, MaintenanceContractFindUniqueArgs<ExtArgs>>): Prisma__MaintenanceContractClient<$Result.GetResult<Prisma.$MaintenanceContractPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MaintenanceContract that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MaintenanceContractFindUniqueOrThrowArgs} args - Arguments to find a MaintenanceContract
     * @example
     * // Get one MaintenanceContract
     * const maintenanceContract = await prisma.maintenanceContract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaintenanceContractFindUniqueOrThrowArgs>(args: SelectSubset<T, MaintenanceContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaintenanceContractClient<$Result.GetResult<Prisma.$MaintenanceContractPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MaintenanceContract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceContractFindFirstArgs} args - Arguments to find a MaintenanceContract
     * @example
     * // Get one MaintenanceContract
     * const maintenanceContract = await prisma.maintenanceContract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaintenanceContractFindFirstArgs>(args?: SelectSubset<T, MaintenanceContractFindFirstArgs<ExtArgs>>): Prisma__MaintenanceContractClient<$Result.GetResult<Prisma.$MaintenanceContractPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MaintenanceContract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceContractFindFirstOrThrowArgs} args - Arguments to find a MaintenanceContract
     * @example
     * // Get one MaintenanceContract
     * const maintenanceContract = await prisma.maintenanceContract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaintenanceContractFindFirstOrThrowArgs>(args?: SelectSubset<T, MaintenanceContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaintenanceContractClient<$Result.GetResult<Prisma.$MaintenanceContractPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MaintenanceContracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaintenanceContracts
     * const maintenanceContracts = await prisma.maintenanceContract.findMany()
     * 
     * // Get first 10 MaintenanceContracts
     * const maintenanceContracts = await prisma.maintenanceContract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const maintenanceContractWithIdOnly = await prisma.maintenanceContract.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaintenanceContractFindManyArgs>(args?: SelectSubset<T, MaintenanceContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceContractPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MaintenanceContract.
     * @param {MaintenanceContractCreateArgs} args - Arguments to create a MaintenanceContract.
     * @example
     * // Create one MaintenanceContract
     * const MaintenanceContract = await prisma.maintenanceContract.create({
     *   data: {
     *     // ... data to create a MaintenanceContract
     *   }
     * })
     * 
     */
    create<T extends MaintenanceContractCreateArgs>(args: SelectSubset<T, MaintenanceContractCreateArgs<ExtArgs>>): Prisma__MaintenanceContractClient<$Result.GetResult<Prisma.$MaintenanceContractPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MaintenanceContracts.
     * @param {MaintenanceContractCreateManyArgs} args - Arguments to create many MaintenanceContracts.
     * @example
     * // Create many MaintenanceContracts
     * const maintenanceContract = await prisma.maintenanceContract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaintenanceContractCreateManyArgs>(args?: SelectSubset<T, MaintenanceContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MaintenanceContracts and returns the data saved in the database.
     * @param {MaintenanceContractCreateManyAndReturnArgs} args - Arguments to create many MaintenanceContracts.
     * @example
     * // Create many MaintenanceContracts
     * const maintenanceContract = await prisma.maintenanceContract.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MaintenanceContracts and only return the `id`
     * const maintenanceContractWithIdOnly = await prisma.maintenanceContract.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaintenanceContractCreateManyAndReturnArgs>(args?: SelectSubset<T, MaintenanceContractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceContractPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MaintenanceContract.
     * @param {MaintenanceContractDeleteArgs} args - Arguments to delete one MaintenanceContract.
     * @example
     * // Delete one MaintenanceContract
     * const MaintenanceContract = await prisma.maintenanceContract.delete({
     *   where: {
     *     // ... filter to delete one MaintenanceContract
     *   }
     * })
     * 
     */
    delete<T extends MaintenanceContractDeleteArgs>(args: SelectSubset<T, MaintenanceContractDeleteArgs<ExtArgs>>): Prisma__MaintenanceContractClient<$Result.GetResult<Prisma.$MaintenanceContractPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MaintenanceContract.
     * @param {MaintenanceContractUpdateArgs} args - Arguments to update one MaintenanceContract.
     * @example
     * // Update one MaintenanceContract
     * const maintenanceContract = await prisma.maintenanceContract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaintenanceContractUpdateArgs>(args: SelectSubset<T, MaintenanceContractUpdateArgs<ExtArgs>>): Prisma__MaintenanceContractClient<$Result.GetResult<Prisma.$MaintenanceContractPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MaintenanceContracts.
     * @param {MaintenanceContractDeleteManyArgs} args - Arguments to filter MaintenanceContracts to delete.
     * @example
     * // Delete a few MaintenanceContracts
     * const { count } = await prisma.maintenanceContract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaintenanceContractDeleteManyArgs>(args?: SelectSubset<T, MaintenanceContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaintenanceContracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaintenanceContracts
     * const maintenanceContract = await prisma.maintenanceContract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaintenanceContractUpdateManyArgs>(args: SelectSubset<T, MaintenanceContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MaintenanceContract.
     * @param {MaintenanceContractUpsertArgs} args - Arguments to update or create a MaintenanceContract.
     * @example
     * // Update or create a MaintenanceContract
     * const maintenanceContract = await prisma.maintenanceContract.upsert({
     *   create: {
     *     // ... data to create a MaintenanceContract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaintenanceContract we want to update
     *   }
     * })
     */
    upsert<T extends MaintenanceContractUpsertArgs>(args: SelectSubset<T, MaintenanceContractUpsertArgs<ExtArgs>>): Prisma__MaintenanceContractClient<$Result.GetResult<Prisma.$MaintenanceContractPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MaintenanceContracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceContractCountArgs} args - Arguments to filter MaintenanceContracts to count.
     * @example
     * // Count the number of MaintenanceContracts
     * const count = await prisma.maintenanceContract.count({
     *   where: {
     *     // ... the filter for the MaintenanceContracts we want to count
     *   }
     * })
    **/
    count<T extends MaintenanceContractCountArgs>(
      args?: Subset<T, MaintenanceContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaintenanceContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaintenanceContract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaintenanceContractAggregateArgs>(args: Subset<T, MaintenanceContractAggregateArgs>): Prisma.PrismaPromise<GetMaintenanceContractAggregateType<T>>

    /**
     * Group by MaintenanceContract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaintenanceContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaintenanceContractGroupByArgs['orderBy'] }
        : { orderBy?: MaintenanceContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaintenanceContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaintenanceContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaintenanceContract model
   */
  readonly fields: MaintenanceContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaintenanceContract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaintenanceContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vendor<T extends VendorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VendorDefaultArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaintenanceContract model
   */ 
  interface MaintenanceContractFieldRefs {
    readonly id: FieldRef<"MaintenanceContract", 'String'>
    readonly contractNumber: FieldRef<"MaintenanceContract", 'String'>
    readonly description: FieldRef<"MaintenanceContract", 'String'>
    readonly startDate: FieldRef<"MaintenanceContract", 'DateTime'>
    readonly endDate: FieldRef<"MaintenanceContract", 'DateTime'>
    readonly cost: FieldRef<"MaintenanceContract", 'Decimal'>
    readonly terms: FieldRef<"MaintenanceContract", 'String'>
    readonly isActive: FieldRef<"MaintenanceContract", 'Boolean'>
    readonly vendorId: FieldRef<"MaintenanceContract", 'String'>
    readonly createdAt: FieldRef<"MaintenanceContract", 'DateTime'>
    readonly updatedAt: FieldRef<"MaintenanceContract", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MaintenanceContract findUnique
   */
  export type MaintenanceContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceContract
     */
    select?: MaintenanceContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceContractInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceContract to fetch.
     */
    where: MaintenanceContractWhereUniqueInput
  }

  /**
   * MaintenanceContract findUniqueOrThrow
   */
  export type MaintenanceContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceContract
     */
    select?: MaintenanceContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceContractInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceContract to fetch.
     */
    where: MaintenanceContractWhereUniqueInput
  }

  /**
   * MaintenanceContract findFirst
   */
  export type MaintenanceContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceContract
     */
    select?: MaintenanceContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceContractInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceContract to fetch.
     */
    where?: MaintenanceContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceContracts to fetch.
     */
    orderBy?: MaintenanceContractOrderByWithRelationInput | MaintenanceContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceContracts.
     */
    cursor?: MaintenanceContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceContracts.
     */
    distinct?: MaintenanceContractScalarFieldEnum | MaintenanceContractScalarFieldEnum[]
  }

  /**
   * MaintenanceContract findFirstOrThrow
   */
  export type MaintenanceContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceContract
     */
    select?: MaintenanceContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceContractInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceContract to fetch.
     */
    where?: MaintenanceContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceContracts to fetch.
     */
    orderBy?: MaintenanceContractOrderByWithRelationInput | MaintenanceContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceContracts.
     */
    cursor?: MaintenanceContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceContracts.
     */
    distinct?: MaintenanceContractScalarFieldEnum | MaintenanceContractScalarFieldEnum[]
  }

  /**
   * MaintenanceContract findMany
   */
  export type MaintenanceContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceContract
     */
    select?: MaintenanceContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceContractInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceContracts to fetch.
     */
    where?: MaintenanceContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceContracts to fetch.
     */
    orderBy?: MaintenanceContractOrderByWithRelationInput | MaintenanceContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaintenanceContracts.
     */
    cursor?: MaintenanceContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceContracts.
     */
    skip?: number
    distinct?: MaintenanceContractScalarFieldEnum | MaintenanceContractScalarFieldEnum[]
  }

  /**
   * MaintenanceContract create
   */
  export type MaintenanceContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceContract
     */
    select?: MaintenanceContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceContractInclude<ExtArgs> | null
    /**
     * The data needed to create a MaintenanceContract.
     */
    data: XOR<MaintenanceContractCreateInput, MaintenanceContractUncheckedCreateInput>
  }

  /**
   * MaintenanceContract createMany
   */
  export type MaintenanceContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaintenanceContracts.
     */
    data: MaintenanceContractCreateManyInput | MaintenanceContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MaintenanceContract createManyAndReturn
   */
  export type MaintenanceContractCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceContract
     */
    select?: MaintenanceContractSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MaintenanceContracts.
     */
    data: MaintenanceContractCreateManyInput | MaintenanceContractCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceContractIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaintenanceContract update
   */
  export type MaintenanceContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceContract
     */
    select?: MaintenanceContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceContractInclude<ExtArgs> | null
    /**
     * The data needed to update a MaintenanceContract.
     */
    data: XOR<MaintenanceContractUpdateInput, MaintenanceContractUncheckedUpdateInput>
    /**
     * Choose, which MaintenanceContract to update.
     */
    where: MaintenanceContractWhereUniqueInput
  }

  /**
   * MaintenanceContract updateMany
   */
  export type MaintenanceContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaintenanceContracts.
     */
    data: XOR<MaintenanceContractUpdateManyMutationInput, MaintenanceContractUncheckedUpdateManyInput>
    /**
     * Filter which MaintenanceContracts to update
     */
    where?: MaintenanceContractWhereInput
  }

  /**
   * MaintenanceContract upsert
   */
  export type MaintenanceContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceContract
     */
    select?: MaintenanceContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceContractInclude<ExtArgs> | null
    /**
     * The filter to search for the MaintenanceContract to update in case it exists.
     */
    where: MaintenanceContractWhereUniqueInput
    /**
     * In case the MaintenanceContract found by the `where` argument doesn't exist, create a new MaintenanceContract with this data.
     */
    create: XOR<MaintenanceContractCreateInput, MaintenanceContractUncheckedCreateInput>
    /**
     * In case the MaintenanceContract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaintenanceContractUpdateInput, MaintenanceContractUncheckedUpdateInput>
  }

  /**
   * MaintenanceContract delete
   */
  export type MaintenanceContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceContract
     */
    select?: MaintenanceContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceContractInclude<ExtArgs> | null
    /**
     * Filter which MaintenanceContract to delete.
     */
    where: MaintenanceContractWhereUniqueInput
  }

  /**
   * MaintenanceContract deleteMany
   */
  export type MaintenanceContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceContracts to delete
     */
    where?: MaintenanceContractWhereInput
  }

  /**
   * MaintenanceContract without action
   */
  export type MaintenanceContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceContract
     */
    select?: MaintenanceContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceContractInclude<ExtArgs> | null
  }


  /**
   * Model AuditRecord
   */

  export type AggregateAuditRecord = {
    _count: AuditRecordCountAggregateOutputType | null
    _min: AuditRecordMinAggregateOutputType | null
    _max: AuditRecordMaxAggregateOutputType | null
  }

  export type AuditRecordMinAggregateOutputType = {
    id: string | null
    auditType: string | null
    scheduledDate: Date | null
    completedDate: Date | null
    status: $Enums.AuditStatus | null
    findings: string | null
    recommendations: string | null
    assetId: string | null
    auditorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AuditRecordMaxAggregateOutputType = {
    id: string | null
    auditType: string | null
    scheduledDate: Date | null
    completedDate: Date | null
    status: $Enums.AuditStatus | null
    findings: string | null
    recommendations: string | null
    assetId: string | null
    auditorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AuditRecordCountAggregateOutputType = {
    id: number
    auditType: number
    scheduledDate: number
    completedDate: number
    status: number
    findings: number
    recommendations: number
    assetId: number
    auditorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AuditRecordMinAggregateInputType = {
    id?: true
    auditType?: true
    scheduledDate?: true
    completedDate?: true
    status?: true
    findings?: true
    recommendations?: true
    assetId?: true
    auditorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AuditRecordMaxAggregateInputType = {
    id?: true
    auditType?: true
    scheduledDate?: true
    completedDate?: true
    status?: true
    findings?: true
    recommendations?: true
    assetId?: true
    auditorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AuditRecordCountAggregateInputType = {
    id?: true
    auditType?: true
    scheduledDate?: true
    completedDate?: true
    status?: true
    findings?: true
    recommendations?: true
    assetId?: true
    auditorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AuditRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditRecord to aggregate.
     */
    where?: AuditRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditRecords to fetch.
     */
    orderBy?: AuditRecordOrderByWithRelationInput | AuditRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditRecords
    **/
    _count?: true | AuditRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditRecordMaxAggregateInputType
  }

  export type GetAuditRecordAggregateType<T extends AuditRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditRecord[P]>
      : GetScalarType<T[P], AggregateAuditRecord[P]>
  }




  export type AuditRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditRecordWhereInput
    orderBy?: AuditRecordOrderByWithAggregationInput | AuditRecordOrderByWithAggregationInput[]
    by: AuditRecordScalarFieldEnum[] | AuditRecordScalarFieldEnum
    having?: AuditRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditRecordCountAggregateInputType | true
    _min?: AuditRecordMinAggregateInputType
    _max?: AuditRecordMaxAggregateInputType
  }

  export type AuditRecordGroupByOutputType = {
    id: string
    auditType: string
    scheduledDate: Date
    completedDate: Date | null
    status: $Enums.AuditStatus
    findings: string | null
    recommendations: string | null
    assetId: string | null
    auditorId: string
    createdAt: Date
    updatedAt: Date
    _count: AuditRecordCountAggregateOutputType | null
    _min: AuditRecordMinAggregateOutputType | null
    _max: AuditRecordMaxAggregateOutputType | null
  }

  type GetAuditRecordGroupByPayload<T extends AuditRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditRecordGroupByOutputType[P]>
            : GetScalarType<T[P], AuditRecordGroupByOutputType[P]>
        }
      >
    >


  export type AuditRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    auditType?: boolean
    scheduledDate?: boolean
    completedDate?: boolean
    status?: boolean
    findings?: boolean
    recommendations?: boolean
    assetId?: boolean
    auditorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AuditRecord$assetArgs<ExtArgs>
    auditor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditRecord"]>

  export type AuditRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    auditType?: boolean
    scheduledDate?: boolean
    completedDate?: boolean
    status?: boolean
    findings?: boolean
    recommendations?: boolean
    assetId?: boolean
    auditorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AuditRecord$assetArgs<ExtArgs>
    auditor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditRecord"]>

  export type AuditRecordSelectScalar = {
    id?: boolean
    auditType?: boolean
    scheduledDate?: boolean
    completedDate?: boolean
    status?: boolean
    findings?: boolean
    recommendations?: boolean
    assetId?: boolean
    auditorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AuditRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AuditRecord$assetArgs<ExtArgs>
    auditor?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AuditRecord$assetArgs<ExtArgs>
    auditor?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditRecord"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs> | null
      auditor: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      auditType: string
      scheduledDate: Date
      completedDate: Date | null
      status: $Enums.AuditStatus
      findings: string | null
      recommendations: string | null
      assetId: string | null
      auditorId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["auditRecord"]>
    composites: {}
  }

  type AuditRecordGetPayload<S extends boolean | null | undefined | AuditRecordDefaultArgs> = $Result.GetResult<Prisma.$AuditRecordPayload, S>

  type AuditRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditRecordCountAggregateInputType | true
    }

  export interface AuditRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditRecord'], meta: { name: 'AuditRecord' } }
    /**
     * Find zero or one AuditRecord that matches the filter.
     * @param {AuditRecordFindUniqueArgs} args - Arguments to find a AuditRecord
     * @example
     * // Get one AuditRecord
     * const auditRecord = await prisma.auditRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditRecordFindUniqueArgs>(args: SelectSubset<T, AuditRecordFindUniqueArgs<ExtArgs>>): Prisma__AuditRecordClient<$Result.GetResult<Prisma.$AuditRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditRecordFindUniqueOrThrowArgs} args - Arguments to find a AuditRecord
     * @example
     * // Get one AuditRecord
     * const auditRecord = await prisma.auditRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditRecordClient<$Result.GetResult<Prisma.$AuditRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditRecordFindFirstArgs} args - Arguments to find a AuditRecord
     * @example
     * // Get one AuditRecord
     * const auditRecord = await prisma.auditRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditRecordFindFirstArgs>(args?: SelectSubset<T, AuditRecordFindFirstArgs<ExtArgs>>): Prisma__AuditRecordClient<$Result.GetResult<Prisma.$AuditRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditRecordFindFirstOrThrowArgs} args - Arguments to find a AuditRecord
     * @example
     * // Get one AuditRecord
     * const auditRecord = await prisma.auditRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditRecordClient<$Result.GetResult<Prisma.$AuditRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditRecords
     * const auditRecords = await prisma.auditRecord.findMany()
     * 
     * // Get first 10 AuditRecords
     * const auditRecords = await prisma.auditRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditRecordWithIdOnly = await prisma.auditRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditRecordFindManyArgs>(args?: SelectSubset<T, AuditRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditRecord.
     * @param {AuditRecordCreateArgs} args - Arguments to create a AuditRecord.
     * @example
     * // Create one AuditRecord
     * const AuditRecord = await prisma.auditRecord.create({
     *   data: {
     *     // ... data to create a AuditRecord
     *   }
     * })
     * 
     */
    create<T extends AuditRecordCreateArgs>(args: SelectSubset<T, AuditRecordCreateArgs<ExtArgs>>): Prisma__AuditRecordClient<$Result.GetResult<Prisma.$AuditRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditRecords.
     * @param {AuditRecordCreateManyArgs} args - Arguments to create many AuditRecords.
     * @example
     * // Create many AuditRecords
     * const auditRecord = await prisma.auditRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditRecordCreateManyArgs>(args?: SelectSubset<T, AuditRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditRecords and returns the data saved in the database.
     * @param {AuditRecordCreateManyAndReturnArgs} args - Arguments to create many AuditRecords.
     * @example
     * // Create many AuditRecords
     * const auditRecord = await prisma.auditRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditRecords and only return the `id`
     * const auditRecordWithIdOnly = await prisma.auditRecord.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditRecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditRecord.
     * @param {AuditRecordDeleteArgs} args - Arguments to delete one AuditRecord.
     * @example
     * // Delete one AuditRecord
     * const AuditRecord = await prisma.auditRecord.delete({
     *   where: {
     *     // ... filter to delete one AuditRecord
     *   }
     * })
     * 
     */
    delete<T extends AuditRecordDeleteArgs>(args: SelectSubset<T, AuditRecordDeleteArgs<ExtArgs>>): Prisma__AuditRecordClient<$Result.GetResult<Prisma.$AuditRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditRecord.
     * @param {AuditRecordUpdateArgs} args - Arguments to update one AuditRecord.
     * @example
     * // Update one AuditRecord
     * const auditRecord = await prisma.auditRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditRecordUpdateArgs>(args: SelectSubset<T, AuditRecordUpdateArgs<ExtArgs>>): Prisma__AuditRecordClient<$Result.GetResult<Prisma.$AuditRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditRecords.
     * @param {AuditRecordDeleteManyArgs} args - Arguments to filter AuditRecords to delete.
     * @example
     * // Delete a few AuditRecords
     * const { count } = await prisma.auditRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditRecordDeleteManyArgs>(args?: SelectSubset<T, AuditRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditRecords
     * const auditRecord = await prisma.auditRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditRecordUpdateManyArgs>(args: SelectSubset<T, AuditRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditRecord.
     * @param {AuditRecordUpsertArgs} args - Arguments to update or create a AuditRecord.
     * @example
     * // Update or create a AuditRecord
     * const auditRecord = await prisma.auditRecord.upsert({
     *   create: {
     *     // ... data to create a AuditRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditRecord we want to update
     *   }
     * })
     */
    upsert<T extends AuditRecordUpsertArgs>(args: SelectSubset<T, AuditRecordUpsertArgs<ExtArgs>>): Prisma__AuditRecordClient<$Result.GetResult<Prisma.$AuditRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditRecordCountArgs} args - Arguments to filter AuditRecords to count.
     * @example
     * // Count the number of AuditRecords
     * const count = await prisma.auditRecord.count({
     *   where: {
     *     // ... the filter for the AuditRecords we want to count
     *   }
     * })
    **/
    count<T extends AuditRecordCountArgs>(
      args?: Subset<T, AuditRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditRecordAggregateArgs>(args: Subset<T, AuditRecordAggregateArgs>): Prisma.PrismaPromise<GetAuditRecordAggregateType<T>>

    /**
     * Group by AuditRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditRecordGroupByArgs['orderBy'] }
        : { orderBy?: AuditRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditRecord model
   */
  readonly fields: AuditRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AuditRecord$assetArgs<ExtArgs> = {}>(args?: Subset<T, AuditRecord$assetArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    auditor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditRecord model
   */ 
  interface AuditRecordFieldRefs {
    readonly id: FieldRef<"AuditRecord", 'String'>
    readonly auditType: FieldRef<"AuditRecord", 'String'>
    readonly scheduledDate: FieldRef<"AuditRecord", 'DateTime'>
    readonly completedDate: FieldRef<"AuditRecord", 'DateTime'>
    readonly status: FieldRef<"AuditRecord", 'AuditStatus'>
    readonly findings: FieldRef<"AuditRecord", 'String'>
    readonly recommendations: FieldRef<"AuditRecord", 'String'>
    readonly assetId: FieldRef<"AuditRecord", 'String'>
    readonly auditorId: FieldRef<"AuditRecord", 'String'>
    readonly createdAt: FieldRef<"AuditRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"AuditRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditRecord findUnique
   */
  export type AuditRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordInclude<ExtArgs> | null
    /**
     * Filter, which AuditRecord to fetch.
     */
    where: AuditRecordWhereUniqueInput
  }

  /**
   * AuditRecord findUniqueOrThrow
   */
  export type AuditRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordInclude<ExtArgs> | null
    /**
     * Filter, which AuditRecord to fetch.
     */
    where: AuditRecordWhereUniqueInput
  }

  /**
   * AuditRecord findFirst
   */
  export type AuditRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordInclude<ExtArgs> | null
    /**
     * Filter, which AuditRecord to fetch.
     */
    where?: AuditRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditRecords to fetch.
     */
    orderBy?: AuditRecordOrderByWithRelationInput | AuditRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditRecords.
     */
    cursor?: AuditRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditRecords.
     */
    distinct?: AuditRecordScalarFieldEnum | AuditRecordScalarFieldEnum[]
  }

  /**
   * AuditRecord findFirstOrThrow
   */
  export type AuditRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordInclude<ExtArgs> | null
    /**
     * Filter, which AuditRecord to fetch.
     */
    where?: AuditRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditRecords to fetch.
     */
    orderBy?: AuditRecordOrderByWithRelationInput | AuditRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditRecords.
     */
    cursor?: AuditRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditRecords.
     */
    distinct?: AuditRecordScalarFieldEnum | AuditRecordScalarFieldEnum[]
  }

  /**
   * AuditRecord findMany
   */
  export type AuditRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordInclude<ExtArgs> | null
    /**
     * Filter, which AuditRecords to fetch.
     */
    where?: AuditRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditRecords to fetch.
     */
    orderBy?: AuditRecordOrderByWithRelationInput | AuditRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditRecords.
     */
    cursor?: AuditRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditRecords.
     */
    skip?: number
    distinct?: AuditRecordScalarFieldEnum | AuditRecordScalarFieldEnum[]
  }

  /**
   * AuditRecord create
   */
  export type AuditRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditRecord.
     */
    data: XOR<AuditRecordCreateInput, AuditRecordUncheckedCreateInput>
  }

  /**
   * AuditRecord createMany
   */
  export type AuditRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditRecords.
     */
    data: AuditRecordCreateManyInput | AuditRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditRecord createManyAndReturn
   */
  export type AuditRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditRecords.
     */
    data: AuditRecordCreateManyInput | AuditRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditRecord update
   */
  export type AuditRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditRecord.
     */
    data: XOR<AuditRecordUpdateInput, AuditRecordUncheckedUpdateInput>
    /**
     * Choose, which AuditRecord to update.
     */
    where: AuditRecordWhereUniqueInput
  }

  /**
   * AuditRecord updateMany
   */
  export type AuditRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditRecords.
     */
    data: XOR<AuditRecordUpdateManyMutationInput, AuditRecordUncheckedUpdateManyInput>
    /**
     * Filter which AuditRecords to update
     */
    where?: AuditRecordWhereInput
  }

  /**
   * AuditRecord upsert
   */
  export type AuditRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditRecord to update in case it exists.
     */
    where: AuditRecordWhereUniqueInput
    /**
     * In case the AuditRecord found by the `where` argument doesn't exist, create a new AuditRecord with this data.
     */
    create: XOR<AuditRecordCreateInput, AuditRecordUncheckedCreateInput>
    /**
     * In case the AuditRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditRecordUpdateInput, AuditRecordUncheckedUpdateInput>
  }

  /**
   * AuditRecord delete
   */
  export type AuditRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordInclude<ExtArgs> | null
    /**
     * Filter which AuditRecord to delete.
     */
    where: AuditRecordWhereUniqueInput
  }

  /**
   * AuditRecord deleteMany
   */
  export type AuditRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditRecords to delete
     */
    where?: AuditRecordWhereInput
  }

  /**
   * AuditRecord.asset
   */
  export type AuditRecord$assetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * AuditRecord without action
   */
  export type AuditRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditRecord
     */
    select?: AuditRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditRecordInclude<ExtArgs> | null
  }


  /**
   * Model DisposalRecord
   */

  export type AggregateDisposalRecord = {
    _count: DisposalRecordCountAggregateOutputType | null
    _avg: DisposalRecordAvgAggregateOutputType | null
    _sum: DisposalRecordSumAggregateOutputType | null
    _min: DisposalRecordMinAggregateOutputType | null
    _max: DisposalRecordMaxAggregateOutputType | null
  }

  export type DisposalRecordAvgAggregateOutputType = {
    disposalValue: Decimal | null
  }

  export type DisposalRecordSumAggregateOutputType = {
    disposalValue: Decimal | null
  }

  export type DisposalRecordMinAggregateOutputType = {
    id: string | null
    disposalType: string | null
    disposalDate: Date | null
    disposalValue: Decimal | null
    reason: string | null
    approvalReference: string | null
    notes: string | null
    assetId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DisposalRecordMaxAggregateOutputType = {
    id: string | null
    disposalType: string | null
    disposalDate: Date | null
    disposalValue: Decimal | null
    reason: string | null
    approvalReference: string | null
    notes: string | null
    assetId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DisposalRecordCountAggregateOutputType = {
    id: number
    disposalType: number
    disposalDate: number
    disposalValue: number
    reason: number
    approvalReference: number
    notes: number
    assetId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DisposalRecordAvgAggregateInputType = {
    disposalValue?: true
  }

  export type DisposalRecordSumAggregateInputType = {
    disposalValue?: true
  }

  export type DisposalRecordMinAggregateInputType = {
    id?: true
    disposalType?: true
    disposalDate?: true
    disposalValue?: true
    reason?: true
    approvalReference?: true
    notes?: true
    assetId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DisposalRecordMaxAggregateInputType = {
    id?: true
    disposalType?: true
    disposalDate?: true
    disposalValue?: true
    reason?: true
    approvalReference?: true
    notes?: true
    assetId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DisposalRecordCountAggregateInputType = {
    id?: true
    disposalType?: true
    disposalDate?: true
    disposalValue?: true
    reason?: true
    approvalReference?: true
    notes?: true
    assetId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DisposalRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DisposalRecord to aggregate.
     */
    where?: DisposalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisposalRecords to fetch.
     */
    orderBy?: DisposalRecordOrderByWithRelationInput | DisposalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DisposalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisposalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisposalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DisposalRecords
    **/
    _count?: true | DisposalRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DisposalRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DisposalRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisposalRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisposalRecordMaxAggregateInputType
  }

  export type GetDisposalRecordAggregateType<T extends DisposalRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateDisposalRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDisposalRecord[P]>
      : GetScalarType<T[P], AggregateDisposalRecord[P]>
  }




  export type DisposalRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisposalRecordWhereInput
    orderBy?: DisposalRecordOrderByWithAggregationInput | DisposalRecordOrderByWithAggregationInput[]
    by: DisposalRecordScalarFieldEnum[] | DisposalRecordScalarFieldEnum
    having?: DisposalRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisposalRecordCountAggregateInputType | true
    _avg?: DisposalRecordAvgAggregateInputType
    _sum?: DisposalRecordSumAggregateInputType
    _min?: DisposalRecordMinAggregateInputType
    _max?: DisposalRecordMaxAggregateInputType
  }

  export type DisposalRecordGroupByOutputType = {
    id: string
    disposalType: string
    disposalDate: Date
    disposalValue: Decimal | null
    reason: string
    approvalReference: string | null
    notes: string | null
    assetId: string
    createdAt: Date
    updatedAt: Date
    _count: DisposalRecordCountAggregateOutputType | null
    _avg: DisposalRecordAvgAggregateOutputType | null
    _sum: DisposalRecordSumAggregateOutputType | null
    _min: DisposalRecordMinAggregateOutputType | null
    _max: DisposalRecordMaxAggregateOutputType | null
  }

  type GetDisposalRecordGroupByPayload<T extends DisposalRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DisposalRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisposalRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisposalRecordGroupByOutputType[P]>
            : GetScalarType<T[P], DisposalRecordGroupByOutputType[P]>
        }
      >
    >


  export type DisposalRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    disposalType?: boolean
    disposalDate?: boolean
    disposalValue?: boolean
    reason?: boolean
    approvalReference?: boolean
    notes?: boolean
    assetId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["disposalRecord"]>

  export type DisposalRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    disposalType?: boolean
    disposalDate?: boolean
    disposalValue?: boolean
    reason?: boolean
    approvalReference?: boolean
    notes?: boolean
    assetId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["disposalRecord"]>

  export type DisposalRecordSelectScalar = {
    id?: boolean
    disposalType?: boolean
    disposalDate?: boolean
    disposalValue?: boolean
    reason?: boolean
    approvalReference?: boolean
    notes?: boolean
    assetId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DisposalRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type DisposalRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }

  export type $DisposalRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DisposalRecord"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      disposalType: string
      disposalDate: Date
      disposalValue: Prisma.Decimal | null
      reason: string
      approvalReference: string | null
      notes: string | null
      assetId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["disposalRecord"]>
    composites: {}
  }

  type DisposalRecordGetPayload<S extends boolean | null | undefined | DisposalRecordDefaultArgs> = $Result.GetResult<Prisma.$DisposalRecordPayload, S>

  type DisposalRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DisposalRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DisposalRecordCountAggregateInputType | true
    }

  export interface DisposalRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DisposalRecord'], meta: { name: 'DisposalRecord' } }
    /**
     * Find zero or one DisposalRecord that matches the filter.
     * @param {DisposalRecordFindUniqueArgs} args - Arguments to find a DisposalRecord
     * @example
     * // Get one DisposalRecord
     * const disposalRecord = await prisma.disposalRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DisposalRecordFindUniqueArgs>(args: SelectSubset<T, DisposalRecordFindUniqueArgs<ExtArgs>>): Prisma__DisposalRecordClient<$Result.GetResult<Prisma.$DisposalRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DisposalRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DisposalRecordFindUniqueOrThrowArgs} args - Arguments to find a DisposalRecord
     * @example
     * // Get one DisposalRecord
     * const disposalRecord = await prisma.disposalRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DisposalRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, DisposalRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DisposalRecordClient<$Result.GetResult<Prisma.$DisposalRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DisposalRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisposalRecordFindFirstArgs} args - Arguments to find a DisposalRecord
     * @example
     * // Get one DisposalRecord
     * const disposalRecord = await prisma.disposalRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DisposalRecordFindFirstArgs>(args?: SelectSubset<T, DisposalRecordFindFirstArgs<ExtArgs>>): Prisma__DisposalRecordClient<$Result.GetResult<Prisma.$DisposalRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DisposalRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisposalRecordFindFirstOrThrowArgs} args - Arguments to find a DisposalRecord
     * @example
     * // Get one DisposalRecord
     * const disposalRecord = await prisma.disposalRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DisposalRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, DisposalRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__DisposalRecordClient<$Result.GetResult<Prisma.$DisposalRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DisposalRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisposalRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DisposalRecords
     * const disposalRecords = await prisma.disposalRecord.findMany()
     * 
     * // Get first 10 DisposalRecords
     * const disposalRecords = await prisma.disposalRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const disposalRecordWithIdOnly = await prisma.disposalRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DisposalRecordFindManyArgs>(args?: SelectSubset<T, DisposalRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisposalRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DisposalRecord.
     * @param {DisposalRecordCreateArgs} args - Arguments to create a DisposalRecord.
     * @example
     * // Create one DisposalRecord
     * const DisposalRecord = await prisma.disposalRecord.create({
     *   data: {
     *     // ... data to create a DisposalRecord
     *   }
     * })
     * 
     */
    create<T extends DisposalRecordCreateArgs>(args: SelectSubset<T, DisposalRecordCreateArgs<ExtArgs>>): Prisma__DisposalRecordClient<$Result.GetResult<Prisma.$DisposalRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DisposalRecords.
     * @param {DisposalRecordCreateManyArgs} args - Arguments to create many DisposalRecords.
     * @example
     * // Create many DisposalRecords
     * const disposalRecord = await prisma.disposalRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DisposalRecordCreateManyArgs>(args?: SelectSubset<T, DisposalRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DisposalRecords and returns the data saved in the database.
     * @param {DisposalRecordCreateManyAndReturnArgs} args - Arguments to create many DisposalRecords.
     * @example
     * // Create many DisposalRecords
     * const disposalRecord = await prisma.disposalRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DisposalRecords and only return the `id`
     * const disposalRecordWithIdOnly = await prisma.disposalRecord.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DisposalRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, DisposalRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisposalRecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DisposalRecord.
     * @param {DisposalRecordDeleteArgs} args - Arguments to delete one DisposalRecord.
     * @example
     * // Delete one DisposalRecord
     * const DisposalRecord = await prisma.disposalRecord.delete({
     *   where: {
     *     // ... filter to delete one DisposalRecord
     *   }
     * })
     * 
     */
    delete<T extends DisposalRecordDeleteArgs>(args: SelectSubset<T, DisposalRecordDeleteArgs<ExtArgs>>): Prisma__DisposalRecordClient<$Result.GetResult<Prisma.$DisposalRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DisposalRecord.
     * @param {DisposalRecordUpdateArgs} args - Arguments to update one DisposalRecord.
     * @example
     * // Update one DisposalRecord
     * const disposalRecord = await prisma.disposalRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DisposalRecordUpdateArgs>(args: SelectSubset<T, DisposalRecordUpdateArgs<ExtArgs>>): Prisma__DisposalRecordClient<$Result.GetResult<Prisma.$DisposalRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DisposalRecords.
     * @param {DisposalRecordDeleteManyArgs} args - Arguments to filter DisposalRecords to delete.
     * @example
     * // Delete a few DisposalRecords
     * const { count } = await prisma.disposalRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DisposalRecordDeleteManyArgs>(args?: SelectSubset<T, DisposalRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DisposalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisposalRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DisposalRecords
     * const disposalRecord = await prisma.disposalRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DisposalRecordUpdateManyArgs>(args: SelectSubset<T, DisposalRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DisposalRecord.
     * @param {DisposalRecordUpsertArgs} args - Arguments to update or create a DisposalRecord.
     * @example
     * // Update or create a DisposalRecord
     * const disposalRecord = await prisma.disposalRecord.upsert({
     *   create: {
     *     // ... data to create a DisposalRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DisposalRecord we want to update
     *   }
     * })
     */
    upsert<T extends DisposalRecordUpsertArgs>(args: SelectSubset<T, DisposalRecordUpsertArgs<ExtArgs>>): Prisma__DisposalRecordClient<$Result.GetResult<Prisma.$DisposalRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DisposalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisposalRecordCountArgs} args - Arguments to filter DisposalRecords to count.
     * @example
     * // Count the number of DisposalRecords
     * const count = await prisma.disposalRecord.count({
     *   where: {
     *     // ... the filter for the DisposalRecords we want to count
     *   }
     * })
    **/
    count<T extends DisposalRecordCountArgs>(
      args?: Subset<T, DisposalRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisposalRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DisposalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisposalRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisposalRecordAggregateArgs>(args: Subset<T, DisposalRecordAggregateArgs>): Prisma.PrismaPromise<GetDisposalRecordAggregateType<T>>

    /**
     * Group by DisposalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisposalRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisposalRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisposalRecordGroupByArgs['orderBy'] }
        : { orderBy?: DisposalRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisposalRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisposalRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DisposalRecord model
   */
  readonly fields: DisposalRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DisposalRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DisposalRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DisposalRecord model
   */ 
  interface DisposalRecordFieldRefs {
    readonly id: FieldRef<"DisposalRecord", 'String'>
    readonly disposalType: FieldRef<"DisposalRecord", 'String'>
    readonly disposalDate: FieldRef<"DisposalRecord", 'DateTime'>
    readonly disposalValue: FieldRef<"DisposalRecord", 'Decimal'>
    readonly reason: FieldRef<"DisposalRecord", 'String'>
    readonly approvalReference: FieldRef<"DisposalRecord", 'String'>
    readonly notes: FieldRef<"DisposalRecord", 'String'>
    readonly assetId: FieldRef<"DisposalRecord", 'String'>
    readonly createdAt: FieldRef<"DisposalRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"DisposalRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DisposalRecord findUnique
   */
  export type DisposalRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisposalRecord
     */
    select?: DisposalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisposalRecordInclude<ExtArgs> | null
    /**
     * Filter, which DisposalRecord to fetch.
     */
    where: DisposalRecordWhereUniqueInput
  }

  /**
   * DisposalRecord findUniqueOrThrow
   */
  export type DisposalRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisposalRecord
     */
    select?: DisposalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisposalRecordInclude<ExtArgs> | null
    /**
     * Filter, which DisposalRecord to fetch.
     */
    where: DisposalRecordWhereUniqueInput
  }

  /**
   * DisposalRecord findFirst
   */
  export type DisposalRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisposalRecord
     */
    select?: DisposalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisposalRecordInclude<ExtArgs> | null
    /**
     * Filter, which DisposalRecord to fetch.
     */
    where?: DisposalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisposalRecords to fetch.
     */
    orderBy?: DisposalRecordOrderByWithRelationInput | DisposalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DisposalRecords.
     */
    cursor?: DisposalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisposalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisposalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DisposalRecords.
     */
    distinct?: DisposalRecordScalarFieldEnum | DisposalRecordScalarFieldEnum[]
  }

  /**
   * DisposalRecord findFirstOrThrow
   */
  export type DisposalRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisposalRecord
     */
    select?: DisposalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisposalRecordInclude<ExtArgs> | null
    /**
     * Filter, which DisposalRecord to fetch.
     */
    where?: DisposalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisposalRecords to fetch.
     */
    orderBy?: DisposalRecordOrderByWithRelationInput | DisposalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DisposalRecords.
     */
    cursor?: DisposalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisposalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisposalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DisposalRecords.
     */
    distinct?: DisposalRecordScalarFieldEnum | DisposalRecordScalarFieldEnum[]
  }

  /**
   * DisposalRecord findMany
   */
  export type DisposalRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisposalRecord
     */
    select?: DisposalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisposalRecordInclude<ExtArgs> | null
    /**
     * Filter, which DisposalRecords to fetch.
     */
    where?: DisposalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisposalRecords to fetch.
     */
    orderBy?: DisposalRecordOrderByWithRelationInput | DisposalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DisposalRecords.
     */
    cursor?: DisposalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisposalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisposalRecords.
     */
    skip?: number
    distinct?: DisposalRecordScalarFieldEnum | DisposalRecordScalarFieldEnum[]
  }

  /**
   * DisposalRecord create
   */
  export type DisposalRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisposalRecord
     */
    select?: DisposalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisposalRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a DisposalRecord.
     */
    data: XOR<DisposalRecordCreateInput, DisposalRecordUncheckedCreateInput>
  }

  /**
   * DisposalRecord createMany
   */
  export type DisposalRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DisposalRecords.
     */
    data: DisposalRecordCreateManyInput | DisposalRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DisposalRecord createManyAndReturn
   */
  export type DisposalRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisposalRecord
     */
    select?: DisposalRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DisposalRecords.
     */
    data: DisposalRecordCreateManyInput | DisposalRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisposalRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DisposalRecord update
   */
  export type DisposalRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisposalRecord
     */
    select?: DisposalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisposalRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a DisposalRecord.
     */
    data: XOR<DisposalRecordUpdateInput, DisposalRecordUncheckedUpdateInput>
    /**
     * Choose, which DisposalRecord to update.
     */
    where: DisposalRecordWhereUniqueInput
  }

  /**
   * DisposalRecord updateMany
   */
  export type DisposalRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DisposalRecords.
     */
    data: XOR<DisposalRecordUpdateManyMutationInput, DisposalRecordUncheckedUpdateManyInput>
    /**
     * Filter which DisposalRecords to update
     */
    where?: DisposalRecordWhereInput
  }

  /**
   * DisposalRecord upsert
   */
  export type DisposalRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisposalRecord
     */
    select?: DisposalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisposalRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the DisposalRecord to update in case it exists.
     */
    where: DisposalRecordWhereUniqueInput
    /**
     * In case the DisposalRecord found by the `where` argument doesn't exist, create a new DisposalRecord with this data.
     */
    create: XOR<DisposalRecordCreateInput, DisposalRecordUncheckedCreateInput>
    /**
     * In case the DisposalRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DisposalRecordUpdateInput, DisposalRecordUncheckedUpdateInput>
  }

  /**
   * DisposalRecord delete
   */
  export type DisposalRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisposalRecord
     */
    select?: DisposalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisposalRecordInclude<ExtArgs> | null
    /**
     * Filter which DisposalRecord to delete.
     */
    where: DisposalRecordWhereUniqueInput
  }

  /**
   * DisposalRecord deleteMany
   */
  export type DisposalRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DisposalRecords to delete
     */
    where?: DisposalRecordWhereInput
  }

  /**
   * DisposalRecord without action
   */
  export type DisposalRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisposalRecord
     */
    select?: DisposalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisposalRecordInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    title: number
    message: number
    type: number
    isRead: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead: boolean
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      message: string
      type: $Enums.NotificationType
      isRead: boolean
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model SystemSettings
   */

  export type AggregateSystemSettings = {
    _count: SystemSettingsCountAggregateOutputType | null
    _min: SystemSettingsMinAggregateOutputType | null
    _max: SystemSettingsMaxAggregateOutputType | null
  }

  export type SystemSettingsMinAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemSettingsMaxAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemSettingsCountAggregateOutputType = {
    id: number
    key: number
    value: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemSettingsMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemSettingsMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemSettingsCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to aggregate.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemSettings
    **/
    _count?: true | SystemSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemSettingsMaxAggregateInputType
  }

  export type GetSystemSettingsAggregateType<T extends SystemSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemSettings[P]>
      : GetScalarType<T[P], AggregateSystemSettings[P]>
  }




  export type SystemSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemSettingsWhereInput
    orderBy?: SystemSettingsOrderByWithAggregationInput | SystemSettingsOrderByWithAggregationInput[]
    by: SystemSettingsScalarFieldEnum[] | SystemSettingsScalarFieldEnum
    having?: SystemSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemSettingsCountAggregateInputType | true
    _min?: SystemSettingsMinAggregateInputType
    _max?: SystemSettingsMaxAggregateInputType
  }

  export type SystemSettingsGroupByOutputType = {
    id: string
    key: string
    value: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: SystemSettingsCountAggregateOutputType | null
    _min: SystemSettingsMinAggregateOutputType | null
    _max: SystemSettingsMaxAggregateOutputType | null
  }

  type GetSystemSettingsGroupByPayload<T extends SystemSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
        }
      >
    >


  export type SystemSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $SystemSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemSettings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemSettings"]>
    composites: {}
  }

  type SystemSettingsGetPayload<S extends boolean | null | undefined | SystemSettingsDefaultArgs> = $Result.GetResult<Prisma.$SystemSettingsPayload, S>

  type SystemSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SystemSettingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SystemSettingsCountAggregateInputType | true
    }

  export interface SystemSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemSettings'], meta: { name: 'SystemSettings' } }
    /**
     * Find zero or one SystemSettings that matches the filter.
     * @param {SystemSettingsFindUniqueArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemSettingsFindUniqueArgs>(args: SelectSubset<T, SystemSettingsFindUniqueArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SystemSettings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SystemSettingsFindUniqueOrThrowArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindFirstArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemSettingsFindFirstArgs>(args?: SelectSubset<T, SystemSettingsFindFirstArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SystemSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindFirstOrThrowArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemSettings
     * const systemSettings = await prisma.systemSettings.findMany()
     * 
     * // Get first 10 SystemSettings
     * const systemSettings = await prisma.systemSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemSettingsFindManyArgs>(args?: SelectSubset<T, SystemSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SystemSettings.
     * @param {SystemSettingsCreateArgs} args - Arguments to create a SystemSettings.
     * @example
     * // Create one SystemSettings
     * const SystemSettings = await prisma.systemSettings.create({
     *   data: {
     *     // ... data to create a SystemSettings
     *   }
     * })
     * 
     */
    create<T extends SystemSettingsCreateArgs>(args: SelectSubset<T, SystemSettingsCreateArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SystemSettings.
     * @param {SystemSettingsCreateManyArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSettings = await prisma.systemSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemSettingsCreateManyArgs>(args?: SelectSubset<T, SystemSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemSettings and returns the data saved in the database.
     * @param {SystemSettingsCreateManyAndReturnArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSettings = await prisma.systemSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemSettings and only return the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SystemSettings.
     * @param {SystemSettingsDeleteArgs} args - Arguments to delete one SystemSettings.
     * @example
     * // Delete one SystemSettings
     * const SystemSettings = await prisma.systemSettings.delete({
     *   where: {
     *     // ... filter to delete one SystemSettings
     *   }
     * })
     * 
     */
    delete<T extends SystemSettingsDeleteArgs>(args: SelectSubset<T, SystemSettingsDeleteArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SystemSettings.
     * @param {SystemSettingsUpdateArgs} args - Arguments to update one SystemSettings.
     * @example
     * // Update one SystemSettings
     * const systemSettings = await prisma.systemSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemSettingsUpdateArgs>(args: SelectSubset<T, SystemSettingsUpdateArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SystemSettings.
     * @param {SystemSettingsDeleteManyArgs} args - Arguments to filter SystemSettings to delete.
     * @example
     * // Delete a few SystemSettings
     * const { count } = await prisma.systemSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemSettingsDeleteManyArgs>(args?: SelectSubset<T, SystemSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemSettings
     * const systemSettings = await prisma.systemSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemSettingsUpdateManyArgs>(args: SelectSubset<T, SystemSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemSettings.
     * @param {SystemSettingsUpsertArgs} args - Arguments to update or create a SystemSettings.
     * @example
     * // Update or create a SystemSettings
     * const systemSettings = await prisma.systemSettings.upsert({
     *   create: {
     *     // ... data to create a SystemSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemSettings we want to update
     *   }
     * })
     */
    upsert<T extends SystemSettingsUpsertArgs>(args: SelectSubset<T, SystemSettingsUpsertArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsCountArgs} args - Arguments to filter SystemSettings to count.
     * @example
     * // Count the number of SystemSettings
     * const count = await prisma.systemSettings.count({
     *   where: {
     *     // ... the filter for the SystemSettings we want to count
     *   }
     * })
    **/
    count<T extends SystemSettingsCountArgs>(
      args?: Subset<T, SystemSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemSettingsAggregateArgs>(args: Subset<T, SystemSettingsAggregateArgs>): Prisma.PrismaPromise<GetSystemSettingsAggregateType<T>>

    /**
     * Group by SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemSettingsGroupByArgs['orderBy'] }
        : { orderBy?: SystemSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemSettings model
   */
  readonly fields: SystemSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemSettings model
   */ 
  interface SystemSettingsFieldRefs {
    readonly id: FieldRef<"SystemSettings", 'String'>
    readonly key: FieldRef<"SystemSettings", 'String'>
    readonly value: FieldRef<"SystemSettings", 'String'>
    readonly description: FieldRef<"SystemSettings", 'String'>
    readonly isActive: FieldRef<"SystemSettings", 'Boolean'>
    readonly createdAt: FieldRef<"SystemSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemSettings findUnique
   */
  export type SystemSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings findUniqueOrThrow
   */
  export type SystemSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings findFirst
   */
  export type SystemSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings findFirstOrThrow
   */
  export type SystemSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings findMany
   */
  export type SystemSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings create
   */
  export type SystemSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * The data needed to create a SystemSettings.
     */
    data: XOR<SystemSettingsCreateInput, SystemSettingsUncheckedCreateInput>
  }

  /**
   * SystemSettings createMany
   */
  export type SystemSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingsCreateManyInput | SystemSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemSettings createManyAndReturn
   */
  export type SystemSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingsCreateManyInput | SystemSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemSettings update
   */
  export type SystemSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * The data needed to update a SystemSettings.
     */
    data: XOR<SystemSettingsUpdateInput, SystemSettingsUncheckedUpdateInput>
    /**
     * Choose, which SystemSettings to update.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings updateMany
   */
  export type SystemSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingsUpdateManyMutationInput, SystemSettingsUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingsWhereInput
  }

  /**
   * SystemSettings upsert
   */
  export type SystemSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * The filter to search for the SystemSettings to update in case it exists.
     */
    where: SystemSettingsWhereUniqueInput
    /**
     * In case the SystemSettings found by the `where` argument doesn't exist, create a new SystemSettings with this data.
     */
    create: XOR<SystemSettingsCreateInput, SystemSettingsUncheckedCreateInput>
    /**
     * In case the SystemSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemSettingsUpdateInput, SystemSettingsUncheckedUpdateInput>
  }

  /**
   * SystemSettings delete
   */
  export type SystemSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Filter which SystemSettings to delete.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings deleteMany
   */
  export type SystemSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to delete
     */
    where?: SystemSettingsWhereInput
  }

  /**
   * SystemSettings without action
   */
  export type SystemSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
  }


  /**
   * Model SparePart
   */

  export type AggregateSparePart = {
    _count: SparePartCountAggregateOutputType | null
    _avg: SparePartAvgAggregateOutputType | null
    _sum: SparePartSumAggregateOutputType | null
    _min: SparePartMinAggregateOutputType | null
    _max: SparePartMaxAggregateOutputType | null
  }

  export type SparePartAvgAggregateOutputType = {
    unitPrice: Decimal | null
    stockLevel: number | null
    minStockLevel: number | null
    maxStockLevel: number | null
    reorderPoint: number | null
  }

  export type SparePartSumAggregateOutputType = {
    unitPrice: Decimal | null
    stockLevel: number | null
    minStockLevel: number | null
    maxStockLevel: number | null
    reorderPoint: number | null
  }

  export type SparePartMinAggregateOutputType = {
    id: string | null
    partNumber: string | null
    name: string | null
    description: string | null
    brand: string | null
    model: string | null
    category: $Enums.SparePartCategory | null
    partType: $Enums.SparePartType | null
    status: $Enums.SparePartStatus | null
    unitPrice: Decimal | null
    stockLevel: number | null
    minStockLevel: number | null
    maxStockLevel: number | null
    reorderPoint: number | null
    storageLocation: string | null
    notes: string | null
    isActive: boolean | null
    vendorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SparePartMaxAggregateOutputType = {
    id: string | null
    partNumber: string | null
    name: string | null
    description: string | null
    brand: string | null
    model: string | null
    category: $Enums.SparePartCategory | null
    partType: $Enums.SparePartType | null
    status: $Enums.SparePartStatus | null
    unitPrice: Decimal | null
    stockLevel: number | null
    minStockLevel: number | null
    maxStockLevel: number | null
    reorderPoint: number | null
    storageLocation: string | null
    notes: string | null
    isActive: boolean | null
    vendorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SparePartCountAggregateOutputType = {
    id: number
    partNumber: number
    name: number
    description: number
    brand: number
    model: number
    category: number
    partType: number
    status: number
    unitPrice: number
    stockLevel: number
    minStockLevel: number
    maxStockLevel: number
    reorderPoint: number
    storageLocation: number
    specifications: number
    compatibleWith: number
    notes: number
    isActive: number
    vendorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SparePartAvgAggregateInputType = {
    unitPrice?: true
    stockLevel?: true
    minStockLevel?: true
    maxStockLevel?: true
    reorderPoint?: true
  }

  export type SparePartSumAggregateInputType = {
    unitPrice?: true
    stockLevel?: true
    minStockLevel?: true
    maxStockLevel?: true
    reorderPoint?: true
  }

  export type SparePartMinAggregateInputType = {
    id?: true
    partNumber?: true
    name?: true
    description?: true
    brand?: true
    model?: true
    category?: true
    partType?: true
    status?: true
    unitPrice?: true
    stockLevel?: true
    minStockLevel?: true
    maxStockLevel?: true
    reorderPoint?: true
    storageLocation?: true
    notes?: true
    isActive?: true
    vendorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SparePartMaxAggregateInputType = {
    id?: true
    partNumber?: true
    name?: true
    description?: true
    brand?: true
    model?: true
    category?: true
    partType?: true
    status?: true
    unitPrice?: true
    stockLevel?: true
    minStockLevel?: true
    maxStockLevel?: true
    reorderPoint?: true
    storageLocation?: true
    notes?: true
    isActive?: true
    vendorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SparePartCountAggregateInputType = {
    id?: true
    partNumber?: true
    name?: true
    description?: true
    brand?: true
    model?: true
    category?: true
    partType?: true
    status?: true
    unitPrice?: true
    stockLevel?: true
    minStockLevel?: true
    maxStockLevel?: true
    reorderPoint?: true
    storageLocation?: true
    specifications?: true
    compatibleWith?: true
    notes?: true
    isActive?: true
    vendorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SparePartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SparePart to aggregate.
     */
    where?: SparePartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpareParts to fetch.
     */
    orderBy?: SparePartOrderByWithRelationInput | SparePartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SparePartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpareParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpareParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpareParts
    **/
    _count?: true | SparePartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SparePartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SparePartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SparePartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SparePartMaxAggregateInputType
  }

  export type GetSparePartAggregateType<T extends SparePartAggregateArgs> = {
        [P in keyof T & keyof AggregateSparePart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSparePart[P]>
      : GetScalarType<T[P], AggregateSparePart[P]>
  }




  export type SparePartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SparePartWhereInput
    orderBy?: SparePartOrderByWithAggregationInput | SparePartOrderByWithAggregationInput[]
    by: SparePartScalarFieldEnum[] | SparePartScalarFieldEnum
    having?: SparePartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SparePartCountAggregateInputType | true
    _avg?: SparePartAvgAggregateInputType
    _sum?: SparePartSumAggregateInputType
    _min?: SparePartMinAggregateInputType
    _max?: SparePartMaxAggregateInputType
  }

  export type SparePartGroupByOutputType = {
    id: string
    partNumber: string
    name: string
    description: string | null
    brand: string | null
    model: string | null
    category: $Enums.SparePartCategory
    partType: $Enums.SparePartType
    status: $Enums.SparePartStatus
    unitPrice: Decimal
    stockLevel: number
    minStockLevel: number
    maxStockLevel: number
    reorderPoint: number
    storageLocation: string | null
    specifications: JsonValue | null
    compatibleWith: string[]
    notes: string | null
    isActive: boolean
    vendorId: string | null
    createdAt: Date
    updatedAt: Date
    _count: SparePartCountAggregateOutputType | null
    _avg: SparePartAvgAggregateOutputType | null
    _sum: SparePartSumAggregateOutputType | null
    _min: SparePartMinAggregateOutputType | null
    _max: SparePartMaxAggregateOutputType | null
  }

  type GetSparePartGroupByPayload<T extends SparePartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SparePartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SparePartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SparePartGroupByOutputType[P]>
            : GetScalarType<T[P], SparePartGroupByOutputType[P]>
        }
      >
    >


  export type SparePartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partNumber?: boolean
    name?: boolean
    description?: boolean
    brand?: boolean
    model?: boolean
    category?: boolean
    partType?: boolean
    status?: boolean
    unitPrice?: boolean
    stockLevel?: boolean
    minStockLevel?: boolean
    maxStockLevel?: boolean
    reorderPoint?: boolean
    storageLocation?: boolean
    specifications?: boolean
    compatibleWith?: boolean
    notes?: boolean
    isActive?: boolean
    vendorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendor?: boolean | SparePart$vendorArgs<ExtArgs>
    procurements?: boolean | SparePart$procurementsArgs<ExtArgs>
    usages?: boolean | SparePart$usagesArgs<ExtArgs>
    replacements?: boolean | SparePart$replacementsArgs<ExtArgs>
    oldReplacements?: boolean | SparePart$oldReplacementsArgs<ExtArgs>
    registrations?: boolean | SparePart$registrationsArgs<ExtArgs>
    sourceComponents?: boolean | SparePart$sourceComponentsArgs<ExtArgs>
    _count?: boolean | SparePartCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sparePart"]>

  export type SparePartSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partNumber?: boolean
    name?: boolean
    description?: boolean
    brand?: boolean
    model?: boolean
    category?: boolean
    partType?: boolean
    status?: boolean
    unitPrice?: boolean
    stockLevel?: boolean
    minStockLevel?: boolean
    maxStockLevel?: boolean
    reorderPoint?: boolean
    storageLocation?: boolean
    specifications?: boolean
    compatibleWith?: boolean
    notes?: boolean
    isActive?: boolean
    vendorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendor?: boolean | SparePart$vendorArgs<ExtArgs>
  }, ExtArgs["result"]["sparePart"]>

  export type SparePartSelectScalar = {
    id?: boolean
    partNumber?: boolean
    name?: boolean
    description?: boolean
    brand?: boolean
    model?: boolean
    category?: boolean
    partType?: boolean
    status?: boolean
    unitPrice?: boolean
    stockLevel?: boolean
    minStockLevel?: boolean
    maxStockLevel?: boolean
    reorderPoint?: boolean
    storageLocation?: boolean
    specifications?: boolean
    compatibleWith?: boolean
    notes?: boolean
    isActive?: boolean
    vendorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SparePartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | SparePart$vendorArgs<ExtArgs>
    procurements?: boolean | SparePart$procurementsArgs<ExtArgs>
    usages?: boolean | SparePart$usagesArgs<ExtArgs>
    replacements?: boolean | SparePart$replacementsArgs<ExtArgs>
    oldReplacements?: boolean | SparePart$oldReplacementsArgs<ExtArgs>
    registrations?: boolean | SparePart$registrationsArgs<ExtArgs>
    sourceComponents?: boolean | SparePart$sourceComponentsArgs<ExtArgs>
    _count?: boolean | SparePartCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SparePartIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | SparePart$vendorArgs<ExtArgs>
  }

  export type $SparePartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SparePart"
    objects: {
      vendor: Prisma.$VendorPayload<ExtArgs> | null
      procurements: Prisma.$ProcurementPayload<ExtArgs>[]
      usages: Prisma.$PartUsagePayload<ExtArgs>[]
      replacements: Prisma.$PartReplacementPayload<ExtArgs>[]
      oldReplacements: Prisma.$PartReplacementPayload<ExtArgs>[]
      registrations: Prisma.$NewPartRegistrationPayload<ExtArgs>[]
      sourceComponents: Prisma.$AssetComponentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      partNumber: string
      name: string
      description: string | null
      brand: string | null
      model: string | null
      category: $Enums.SparePartCategory
      partType: $Enums.SparePartType
      status: $Enums.SparePartStatus
      unitPrice: Prisma.Decimal
      stockLevel: number
      minStockLevel: number
      maxStockLevel: number
      reorderPoint: number
      storageLocation: string | null
      specifications: Prisma.JsonValue | null
      compatibleWith: string[]
      notes: string | null
      isActive: boolean
      vendorId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sparePart"]>
    composites: {}
  }

  type SparePartGetPayload<S extends boolean | null | undefined | SparePartDefaultArgs> = $Result.GetResult<Prisma.$SparePartPayload, S>

  type SparePartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SparePartFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SparePartCountAggregateInputType | true
    }

  export interface SparePartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SparePart'], meta: { name: 'SparePart' } }
    /**
     * Find zero or one SparePart that matches the filter.
     * @param {SparePartFindUniqueArgs} args - Arguments to find a SparePart
     * @example
     * // Get one SparePart
     * const sparePart = await prisma.sparePart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SparePartFindUniqueArgs>(args: SelectSubset<T, SparePartFindUniqueArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SparePart that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SparePartFindUniqueOrThrowArgs} args - Arguments to find a SparePart
     * @example
     * // Get one SparePart
     * const sparePart = await prisma.sparePart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SparePartFindUniqueOrThrowArgs>(args: SelectSubset<T, SparePartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SparePart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartFindFirstArgs} args - Arguments to find a SparePart
     * @example
     * // Get one SparePart
     * const sparePart = await prisma.sparePart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SparePartFindFirstArgs>(args?: SelectSubset<T, SparePartFindFirstArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SparePart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartFindFirstOrThrowArgs} args - Arguments to find a SparePart
     * @example
     * // Get one SparePart
     * const sparePart = await prisma.sparePart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SparePartFindFirstOrThrowArgs>(args?: SelectSubset<T, SparePartFindFirstOrThrowArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SpareParts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpareParts
     * const spareParts = await prisma.sparePart.findMany()
     * 
     * // Get first 10 SpareParts
     * const spareParts = await prisma.sparePart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sparePartWithIdOnly = await prisma.sparePart.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SparePartFindManyArgs>(args?: SelectSubset<T, SparePartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SparePart.
     * @param {SparePartCreateArgs} args - Arguments to create a SparePart.
     * @example
     * // Create one SparePart
     * const SparePart = await prisma.sparePart.create({
     *   data: {
     *     // ... data to create a SparePart
     *   }
     * })
     * 
     */
    create<T extends SparePartCreateArgs>(args: SelectSubset<T, SparePartCreateArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SpareParts.
     * @param {SparePartCreateManyArgs} args - Arguments to create many SpareParts.
     * @example
     * // Create many SpareParts
     * const sparePart = await prisma.sparePart.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SparePartCreateManyArgs>(args?: SelectSubset<T, SparePartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SpareParts and returns the data saved in the database.
     * @param {SparePartCreateManyAndReturnArgs} args - Arguments to create many SpareParts.
     * @example
     * // Create many SpareParts
     * const sparePart = await prisma.sparePart.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SpareParts and only return the `id`
     * const sparePartWithIdOnly = await prisma.sparePart.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SparePartCreateManyAndReturnArgs>(args?: SelectSubset<T, SparePartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SparePart.
     * @param {SparePartDeleteArgs} args - Arguments to delete one SparePart.
     * @example
     * // Delete one SparePart
     * const SparePart = await prisma.sparePart.delete({
     *   where: {
     *     // ... filter to delete one SparePart
     *   }
     * })
     * 
     */
    delete<T extends SparePartDeleteArgs>(args: SelectSubset<T, SparePartDeleteArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SparePart.
     * @param {SparePartUpdateArgs} args - Arguments to update one SparePart.
     * @example
     * // Update one SparePart
     * const sparePart = await prisma.sparePart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SparePartUpdateArgs>(args: SelectSubset<T, SparePartUpdateArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SpareParts.
     * @param {SparePartDeleteManyArgs} args - Arguments to filter SpareParts to delete.
     * @example
     * // Delete a few SpareParts
     * const { count } = await prisma.sparePart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SparePartDeleteManyArgs>(args?: SelectSubset<T, SparePartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpareParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpareParts
     * const sparePart = await prisma.sparePart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SparePartUpdateManyArgs>(args: SelectSubset<T, SparePartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SparePart.
     * @param {SparePartUpsertArgs} args - Arguments to update or create a SparePart.
     * @example
     * // Update or create a SparePart
     * const sparePart = await prisma.sparePart.upsert({
     *   create: {
     *     // ... data to create a SparePart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SparePart we want to update
     *   }
     * })
     */
    upsert<T extends SparePartUpsertArgs>(args: SelectSubset<T, SparePartUpsertArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SpareParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartCountArgs} args - Arguments to filter SpareParts to count.
     * @example
     * // Count the number of SpareParts
     * const count = await prisma.sparePart.count({
     *   where: {
     *     // ... the filter for the SpareParts we want to count
     *   }
     * })
    **/
    count<T extends SparePartCountArgs>(
      args?: Subset<T, SparePartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SparePartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SparePart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SparePartAggregateArgs>(args: Subset<T, SparePartAggregateArgs>): Prisma.PrismaPromise<GetSparePartAggregateType<T>>

    /**
     * Group by SparePart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SparePartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SparePartGroupByArgs['orderBy'] }
        : { orderBy?: SparePartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SparePartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSparePartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SparePart model
   */
  readonly fields: SparePartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SparePart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SparePartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vendor<T extends SparePart$vendorArgs<ExtArgs> = {}>(args?: Subset<T, SparePart$vendorArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    procurements<T extends SparePart$procurementsArgs<ExtArgs> = {}>(args?: Subset<T, SparePart$procurementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "findMany"> | Null>
    usages<T extends SparePart$usagesArgs<ExtArgs> = {}>(args?: Subset<T, SparePart$usagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "findMany"> | Null>
    replacements<T extends SparePart$replacementsArgs<ExtArgs> = {}>(args?: Subset<T, SparePart$replacementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "findMany"> | Null>
    oldReplacements<T extends SparePart$oldReplacementsArgs<ExtArgs> = {}>(args?: Subset<T, SparePart$oldReplacementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "findMany"> | Null>
    registrations<T extends SparePart$registrationsArgs<ExtArgs> = {}>(args?: Subset<T, SparePart$registrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "findMany"> | Null>
    sourceComponents<T extends SparePart$sourceComponentsArgs<ExtArgs> = {}>(args?: Subset<T, SparePart$sourceComponentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SparePart model
   */ 
  interface SparePartFieldRefs {
    readonly id: FieldRef<"SparePart", 'String'>
    readonly partNumber: FieldRef<"SparePart", 'String'>
    readonly name: FieldRef<"SparePart", 'String'>
    readonly description: FieldRef<"SparePart", 'String'>
    readonly brand: FieldRef<"SparePart", 'String'>
    readonly model: FieldRef<"SparePart", 'String'>
    readonly category: FieldRef<"SparePart", 'SparePartCategory'>
    readonly partType: FieldRef<"SparePart", 'SparePartType'>
    readonly status: FieldRef<"SparePart", 'SparePartStatus'>
    readonly unitPrice: FieldRef<"SparePart", 'Decimal'>
    readonly stockLevel: FieldRef<"SparePart", 'Int'>
    readonly minStockLevel: FieldRef<"SparePart", 'Int'>
    readonly maxStockLevel: FieldRef<"SparePart", 'Int'>
    readonly reorderPoint: FieldRef<"SparePart", 'Int'>
    readonly storageLocation: FieldRef<"SparePart", 'String'>
    readonly specifications: FieldRef<"SparePart", 'Json'>
    readonly compatibleWith: FieldRef<"SparePart", 'String[]'>
    readonly notes: FieldRef<"SparePart", 'String'>
    readonly isActive: FieldRef<"SparePart", 'Boolean'>
    readonly vendorId: FieldRef<"SparePart", 'String'>
    readonly createdAt: FieldRef<"SparePart", 'DateTime'>
    readonly updatedAt: FieldRef<"SparePart", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SparePart findUnique
   */
  export type SparePartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * Filter, which SparePart to fetch.
     */
    where: SparePartWhereUniqueInput
  }

  /**
   * SparePart findUniqueOrThrow
   */
  export type SparePartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * Filter, which SparePart to fetch.
     */
    where: SparePartWhereUniqueInput
  }

  /**
   * SparePart findFirst
   */
  export type SparePartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * Filter, which SparePart to fetch.
     */
    where?: SparePartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpareParts to fetch.
     */
    orderBy?: SparePartOrderByWithRelationInput | SparePartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpareParts.
     */
    cursor?: SparePartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpareParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpareParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpareParts.
     */
    distinct?: SparePartScalarFieldEnum | SparePartScalarFieldEnum[]
  }

  /**
   * SparePart findFirstOrThrow
   */
  export type SparePartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * Filter, which SparePart to fetch.
     */
    where?: SparePartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpareParts to fetch.
     */
    orderBy?: SparePartOrderByWithRelationInput | SparePartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpareParts.
     */
    cursor?: SparePartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpareParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpareParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpareParts.
     */
    distinct?: SparePartScalarFieldEnum | SparePartScalarFieldEnum[]
  }

  /**
   * SparePart findMany
   */
  export type SparePartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * Filter, which SpareParts to fetch.
     */
    where?: SparePartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpareParts to fetch.
     */
    orderBy?: SparePartOrderByWithRelationInput | SparePartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpareParts.
     */
    cursor?: SparePartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpareParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpareParts.
     */
    skip?: number
    distinct?: SparePartScalarFieldEnum | SparePartScalarFieldEnum[]
  }

  /**
   * SparePart create
   */
  export type SparePartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * The data needed to create a SparePart.
     */
    data: XOR<SparePartCreateInput, SparePartUncheckedCreateInput>
  }

  /**
   * SparePart createMany
   */
  export type SparePartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpareParts.
     */
    data: SparePartCreateManyInput | SparePartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SparePart createManyAndReturn
   */
  export type SparePartCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SpareParts.
     */
    data: SparePartCreateManyInput | SparePartCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SparePart update
   */
  export type SparePartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * The data needed to update a SparePart.
     */
    data: XOR<SparePartUpdateInput, SparePartUncheckedUpdateInput>
    /**
     * Choose, which SparePart to update.
     */
    where: SparePartWhereUniqueInput
  }

  /**
   * SparePart updateMany
   */
  export type SparePartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpareParts.
     */
    data: XOR<SparePartUpdateManyMutationInput, SparePartUncheckedUpdateManyInput>
    /**
     * Filter which SpareParts to update
     */
    where?: SparePartWhereInput
  }

  /**
   * SparePart upsert
   */
  export type SparePartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * The filter to search for the SparePart to update in case it exists.
     */
    where: SparePartWhereUniqueInput
    /**
     * In case the SparePart found by the `where` argument doesn't exist, create a new SparePart with this data.
     */
    create: XOR<SparePartCreateInput, SparePartUncheckedCreateInput>
    /**
     * In case the SparePart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SparePartUpdateInput, SparePartUncheckedUpdateInput>
  }

  /**
   * SparePart delete
   */
  export type SparePartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * Filter which SparePart to delete.
     */
    where: SparePartWhereUniqueInput
  }

  /**
   * SparePart deleteMany
   */
  export type SparePartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpareParts to delete
     */
    where?: SparePartWhereInput
  }

  /**
   * SparePart.vendor
   */
  export type SparePart$vendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
  }

  /**
   * SparePart.procurements
   */
  export type SparePart$procurementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
    where?: ProcurementWhereInput
    orderBy?: ProcurementOrderByWithRelationInput | ProcurementOrderByWithRelationInput[]
    cursor?: ProcurementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcurementScalarFieldEnum | ProcurementScalarFieldEnum[]
  }

  /**
   * SparePart.usages
   */
  export type SparePart$usagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    where?: PartUsageWhereInput
    orderBy?: PartUsageOrderByWithRelationInput | PartUsageOrderByWithRelationInput[]
    cursor?: PartUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartUsageScalarFieldEnum | PartUsageScalarFieldEnum[]
  }

  /**
   * SparePart.replacements
   */
  export type SparePart$replacementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    where?: PartReplacementWhereInput
    orderBy?: PartReplacementOrderByWithRelationInput | PartReplacementOrderByWithRelationInput[]
    cursor?: PartReplacementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartReplacementScalarFieldEnum | PartReplacementScalarFieldEnum[]
  }

  /**
   * SparePart.oldReplacements
   */
  export type SparePart$oldReplacementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    where?: PartReplacementWhereInput
    orderBy?: PartReplacementOrderByWithRelationInput | PartReplacementOrderByWithRelationInput[]
    cursor?: PartReplacementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartReplacementScalarFieldEnum | PartReplacementScalarFieldEnum[]
  }

  /**
   * SparePart.registrations
   */
  export type SparePart$registrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
    where?: NewPartRegistrationWhereInput
    orderBy?: NewPartRegistrationOrderByWithRelationInput | NewPartRegistrationOrderByWithRelationInput[]
    cursor?: NewPartRegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NewPartRegistrationScalarFieldEnum | NewPartRegistrationScalarFieldEnum[]
  }

  /**
   * SparePart.sourceComponents
   */
  export type SparePart$sourceComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    where?: AssetComponentWhereInput
    orderBy?: AssetComponentOrderByWithRelationInput | AssetComponentOrderByWithRelationInput[]
    cursor?: AssetComponentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetComponentScalarFieldEnum | AssetComponentScalarFieldEnum[]
  }

  /**
   * SparePart without action
   */
  export type SparePartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
  }


  /**
   * Model Procurement
   */

  export type AggregateProcurement = {
    _count: ProcurementCountAggregateOutputType | null
    _avg: ProcurementAvgAggregateOutputType | null
    _sum: ProcurementSumAggregateOutputType | null
    _min: ProcurementMinAggregateOutputType | null
    _max: ProcurementMaxAggregateOutputType | null
  }

  export type ProcurementAvgAggregateOutputType = {
    quantity: number | null
    unitPrice: Decimal | null
    totalCost: Decimal | null
    receivedQuantity: number | null
  }

  export type ProcurementSumAggregateOutputType = {
    quantity: number | null
    unitPrice: Decimal | null
    totalCost: Decimal | null
    receivedQuantity: number | null
  }

  export type ProcurementMinAggregateOutputType = {
    id: string | null
    procurementNumber: string | null
    quantity: number | null
    unitPrice: Decimal | null
    totalCost: Decimal | null
    status: $Enums.ProcurementStatus | null
    orderedDate: Date | null
    expectedDate: Date | null
    receivedDate: Date | null
    receivedQuantity: number | null
    invoiceNumber: string | null
    notes: string | null
    partId: string | null
    vendorId: string | null
    orderedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProcurementMaxAggregateOutputType = {
    id: string | null
    procurementNumber: string | null
    quantity: number | null
    unitPrice: Decimal | null
    totalCost: Decimal | null
    status: $Enums.ProcurementStatus | null
    orderedDate: Date | null
    expectedDate: Date | null
    receivedDate: Date | null
    receivedQuantity: number | null
    invoiceNumber: string | null
    notes: string | null
    partId: string | null
    vendorId: string | null
    orderedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProcurementCountAggregateOutputType = {
    id: number
    procurementNumber: number
    quantity: number
    unitPrice: number
    totalCost: number
    status: number
    orderedDate: number
    expectedDate: number
    receivedDate: number
    receivedQuantity: number
    invoiceNumber: number
    notes: number
    partId: number
    vendorId: number
    orderedById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProcurementAvgAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalCost?: true
    receivedQuantity?: true
  }

  export type ProcurementSumAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalCost?: true
    receivedQuantity?: true
  }

  export type ProcurementMinAggregateInputType = {
    id?: true
    procurementNumber?: true
    quantity?: true
    unitPrice?: true
    totalCost?: true
    status?: true
    orderedDate?: true
    expectedDate?: true
    receivedDate?: true
    receivedQuantity?: true
    invoiceNumber?: true
    notes?: true
    partId?: true
    vendorId?: true
    orderedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProcurementMaxAggregateInputType = {
    id?: true
    procurementNumber?: true
    quantity?: true
    unitPrice?: true
    totalCost?: true
    status?: true
    orderedDate?: true
    expectedDate?: true
    receivedDate?: true
    receivedQuantity?: true
    invoiceNumber?: true
    notes?: true
    partId?: true
    vendorId?: true
    orderedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProcurementCountAggregateInputType = {
    id?: true
    procurementNumber?: true
    quantity?: true
    unitPrice?: true
    totalCost?: true
    status?: true
    orderedDate?: true
    expectedDate?: true
    receivedDate?: true
    receivedQuantity?: true
    invoiceNumber?: true
    notes?: true
    partId?: true
    vendorId?: true
    orderedById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProcurementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Procurement to aggregate.
     */
    where?: ProcurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Procurements to fetch.
     */
    orderBy?: ProcurementOrderByWithRelationInput | ProcurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Procurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Procurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Procurements
    **/
    _count?: true | ProcurementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProcurementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProcurementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcurementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcurementMaxAggregateInputType
  }

  export type GetProcurementAggregateType<T extends ProcurementAggregateArgs> = {
        [P in keyof T & keyof AggregateProcurement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcurement[P]>
      : GetScalarType<T[P], AggregateProcurement[P]>
  }




  export type ProcurementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcurementWhereInput
    orderBy?: ProcurementOrderByWithAggregationInput | ProcurementOrderByWithAggregationInput[]
    by: ProcurementScalarFieldEnum[] | ProcurementScalarFieldEnum
    having?: ProcurementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcurementCountAggregateInputType | true
    _avg?: ProcurementAvgAggregateInputType
    _sum?: ProcurementSumAggregateInputType
    _min?: ProcurementMinAggregateInputType
    _max?: ProcurementMaxAggregateInputType
  }

  export type ProcurementGroupByOutputType = {
    id: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal
    totalCost: Decimal
    status: $Enums.ProcurementStatus
    orderedDate: Date
    expectedDate: Date | null
    receivedDate: Date | null
    receivedQuantity: number | null
    invoiceNumber: string | null
    notes: string | null
    partId: string
    vendorId: string | null
    orderedById: string
    createdAt: Date
    updatedAt: Date
    _count: ProcurementCountAggregateOutputType | null
    _avg: ProcurementAvgAggregateOutputType | null
    _sum: ProcurementSumAggregateOutputType | null
    _min: ProcurementMinAggregateOutputType | null
    _max: ProcurementMaxAggregateOutputType | null
  }

  type GetProcurementGroupByPayload<T extends ProcurementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcurementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcurementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcurementGroupByOutputType[P]>
            : GetScalarType<T[P], ProcurementGroupByOutputType[P]>
        }
      >
    >


  export type ProcurementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    procurementNumber?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalCost?: boolean
    status?: boolean
    orderedDate?: boolean
    expectedDate?: boolean
    receivedDate?: boolean
    receivedQuantity?: boolean
    invoiceNumber?: boolean
    notes?: boolean
    partId?: boolean
    vendorId?: boolean
    orderedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    part?: boolean | SparePartDefaultArgs<ExtArgs>
    vendor?: boolean | Procurement$vendorArgs<ExtArgs>
    orderedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["procurement"]>

  export type ProcurementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    procurementNumber?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalCost?: boolean
    status?: boolean
    orderedDate?: boolean
    expectedDate?: boolean
    receivedDate?: boolean
    receivedQuantity?: boolean
    invoiceNumber?: boolean
    notes?: boolean
    partId?: boolean
    vendorId?: boolean
    orderedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    part?: boolean | SparePartDefaultArgs<ExtArgs>
    vendor?: boolean | Procurement$vendorArgs<ExtArgs>
    orderedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["procurement"]>

  export type ProcurementSelectScalar = {
    id?: boolean
    procurementNumber?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalCost?: boolean
    status?: boolean
    orderedDate?: boolean
    expectedDate?: boolean
    receivedDate?: boolean
    receivedQuantity?: boolean
    invoiceNumber?: boolean
    notes?: boolean
    partId?: boolean
    vendorId?: boolean
    orderedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProcurementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    part?: boolean | SparePartDefaultArgs<ExtArgs>
    vendor?: boolean | Procurement$vendorArgs<ExtArgs>
    orderedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProcurementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    part?: boolean | SparePartDefaultArgs<ExtArgs>
    vendor?: boolean | Procurement$vendorArgs<ExtArgs>
    orderedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProcurementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Procurement"
    objects: {
      part: Prisma.$SparePartPayload<ExtArgs>
      vendor: Prisma.$VendorPayload<ExtArgs> | null
      orderedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      procurementNumber: string
      quantity: number
      unitPrice: Prisma.Decimal
      totalCost: Prisma.Decimal
      status: $Enums.ProcurementStatus
      orderedDate: Date
      expectedDate: Date | null
      receivedDate: Date | null
      receivedQuantity: number | null
      invoiceNumber: string | null
      notes: string | null
      partId: string
      vendorId: string | null
      orderedById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["procurement"]>
    composites: {}
  }

  type ProcurementGetPayload<S extends boolean | null | undefined | ProcurementDefaultArgs> = $Result.GetResult<Prisma.$ProcurementPayload, S>

  type ProcurementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProcurementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProcurementCountAggregateInputType | true
    }

  export interface ProcurementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Procurement'], meta: { name: 'Procurement' } }
    /**
     * Find zero or one Procurement that matches the filter.
     * @param {ProcurementFindUniqueArgs} args - Arguments to find a Procurement
     * @example
     * // Get one Procurement
     * const procurement = await prisma.procurement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProcurementFindUniqueArgs>(args: SelectSubset<T, ProcurementFindUniqueArgs<ExtArgs>>): Prisma__ProcurementClient<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Procurement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProcurementFindUniqueOrThrowArgs} args - Arguments to find a Procurement
     * @example
     * // Get one Procurement
     * const procurement = await prisma.procurement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProcurementFindUniqueOrThrowArgs>(args: SelectSubset<T, ProcurementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProcurementClient<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Procurement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementFindFirstArgs} args - Arguments to find a Procurement
     * @example
     * // Get one Procurement
     * const procurement = await prisma.procurement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProcurementFindFirstArgs>(args?: SelectSubset<T, ProcurementFindFirstArgs<ExtArgs>>): Prisma__ProcurementClient<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Procurement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementFindFirstOrThrowArgs} args - Arguments to find a Procurement
     * @example
     * // Get one Procurement
     * const procurement = await prisma.procurement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProcurementFindFirstOrThrowArgs>(args?: SelectSubset<T, ProcurementFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProcurementClient<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Procurements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Procurements
     * const procurements = await prisma.procurement.findMany()
     * 
     * // Get first 10 Procurements
     * const procurements = await prisma.procurement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const procurementWithIdOnly = await prisma.procurement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProcurementFindManyArgs>(args?: SelectSubset<T, ProcurementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Procurement.
     * @param {ProcurementCreateArgs} args - Arguments to create a Procurement.
     * @example
     * // Create one Procurement
     * const Procurement = await prisma.procurement.create({
     *   data: {
     *     // ... data to create a Procurement
     *   }
     * })
     * 
     */
    create<T extends ProcurementCreateArgs>(args: SelectSubset<T, ProcurementCreateArgs<ExtArgs>>): Prisma__ProcurementClient<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Procurements.
     * @param {ProcurementCreateManyArgs} args - Arguments to create many Procurements.
     * @example
     * // Create many Procurements
     * const procurement = await prisma.procurement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProcurementCreateManyArgs>(args?: SelectSubset<T, ProcurementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Procurements and returns the data saved in the database.
     * @param {ProcurementCreateManyAndReturnArgs} args - Arguments to create many Procurements.
     * @example
     * // Create many Procurements
     * const procurement = await prisma.procurement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Procurements and only return the `id`
     * const procurementWithIdOnly = await prisma.procurement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProcurementCreateManyAndReturnArgs>(args?: SelectSubset<T, ProcurementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Procurement.
     * @param {ProcurementDeleteArgs} args - Arguments to delete one Procurement.
     * @example
     * // Delete one Procurement
     * const Procurement = await prisma.procurement.delete({
     *   where: {
     *     // ... filter to delete one Procurement
     *   }
     * })
     * 
     */
    delete<T extends ProcurementDeleteArgs>(args: SelectSubset<T, ProcurementDeleteArgs<ExtArgs>>): Prisma__ProcurementClient<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Procurement.
     * @param {ProcurementUpdateArgs} args - Arguments to update one Procurement.
     * @example
     * // Update one Procurement
     * const procurement = await prisma.procurement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProcurementUpdateArgs>(args: SelectSubset<T, ProcurementUpdateArgs<ExtArgs>>): Prisma__ProcurementClient<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Procurements.
     * @param {ProcurementDeleteManyArgs} args - Arguments to filter Procurements to delete.
     * @example
     * // Delete a few Procurements
     * const { count } = await prisma.procurement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProcurementDeleteManyArgs>(args?: SelectSubset<T, ProcurementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Procurements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Procurements
     * const procurement = await prisma.procurement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProcurementUpdateManyArgs>(args: SelectSubset<T, ProcurementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Procurement.
     * @param {ProcurementUpsertArgs} args - Arguments to update or create a Procurement.
     * @example
     * // Update or create a Procurement
     * const procurement = await prisma.procurement.upsert({
     *   create: {
     *     // ... data to create a Procurement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Procurement we want to update
     *   }
     * })
     */
    upsert<T extends ProcurementUpsertArgs>(args: SelectSubset<T, ProcurementUpsertArgs<ExtArgs>>): Prisma__ProcurementClient<$Result.GetResult<Prisma.$ProcurementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Procurements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementCountArgs} args - Arguments to filter Procurements to count.
     * @example
     * // Count the number of Procurements
     * const count = await prisma.procurement.count({
     *   where: {
     *     // ... the filter for the Procurements we want to count
     *   }
     * })
    **/
    count<T extends ProcurementCountArgs>(
      args?: Subset<T, ProcurementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcurementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Procurement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcurementAggregateArgs>(args: Subset<T, ProcurementAggregateArgs>): Prisma.PrismaPromise<GetProcurementAggregateType<T>>

    /**
     * Group by Procurement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcurementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcurementGroupByArgs['orderBy'] }
        : { orderBy?: ProcurementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcurementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcurementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Procurement model
   */
  readonly fields: ProcurementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Procurement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcurementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    part<T extends SparePartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SparePartDefaultArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    vendor<T extends Procurement$vendorArgs<ExtArgs> = {}>(args?: Subset<T, Procurement$vendorArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    orderedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Procurement model
   */ 
  interface ProcurementFieldRefs {
    readonly id: FieldRef<"Procurement", 'String'>
    readonly procurementNumber: FieldRef<"Procurement", 'String'>
    readonly quantity: FieldRef<"Procurement", 'Int'>
    readonly unitPrice: FieldRef<"Procurement", 'Decimal'>
    readonly totalCost: FieldRef<"Procurement", 'Decimal'>
    readonly status: FieldRef<"Procurement", 'ProcurementStatus'>
    readonly orderedDate: FieldRef<"Procurement", 'DateTime'>
    readonly expectedDate: FieldRef<"Procurement", 'DateTime'>
    readonly receivedDate: FieldRef<"Procurement", 'DateTime'>
    readonly receivedQuantity: FieldRef<"Procurement", 'Int'>
    readonly invoiceNumber: FieldRef<"Procurement", 'String'>
    readonly notes: FieldRef<"Procurement", 'String'>
    readonly partId: FieldRef<"Procurement", 'String'>
    readonly vendorId: FieldRef<"Procurement", 'String'>
    readonly orderedById: FieldRef<"Procurement", 'String'>
    readonly createdAt: FieldRef<"Procurement", 'DateTime'>
    readonly updatedAt: FieldRef<"Procurement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Procurement findUnique
   */
  export type ProcurementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
    /**
     * Filter, which Procurement to fetch.
     */
    where: ProcurementWhereUniqueInput
  }

  /**
   * Procurement findUniqueOrThrow
   */
  export type ProcurementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
    /**
     * Filter, which Procurement to fetch.
     */
    where: ProcurementWhereUniqueInput
  }

  /**
   * Procurement findFirst
   */
  export type ProcurementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
    /**
     * Filter, which Procurement to fetch.
     */
    where?: ProcurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Procurements to fetch.
     */
    orderBy?: ProcurementOrderByWithRelationInput | ProcurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Procurements.
     */
    cursor?: ProcurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Procurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Procurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Procurements.
     */
    distinct?: ProcurementScalarFieldEnum | ProcurementScalarFieldEnum[]
  }

  /**
   * Procurement findFirstOrThrow
   */
  export type ProcurementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
    /**
     * Filter, which Procurement to fetch.
     */
    where?: ProcurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Procurements to fetch.
     */
    orderBy?: ProcurementOrderByWithRelationInput | ProcurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Procurements.
     */
    cursor?: ProcurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Procurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Procurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Procurements.
     */
    distinct?: ProcurementScalarFieldEnum | ProcurementScalarFieldEnum[]
  }

  /**
   * Procurement findMany
   */
  export type ProcurementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
    /**
     * Filter, which Procurements to fetch.
     */
    where?: ProcurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Procurements to fetch.
     */
    orderBy?: ProcurementOrderByWithRelationInput | ProcurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Procurements.
     */
    cursor?: ProcurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Procurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Procurements.
     */
    skip?: number
    distinct?: ProcurementScalarFieldEnum | ProcurementScalarFieldEnum[]
  }

  /**
   * Procurement create
   */
  export type ProcurementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
    /**
     * The data needed to create a Procurement.
     */
    data: XOR<ProcurementCreateInput, ProcurementUncheckedCreateInput>
  }

  /**
   * Procurement createMany
   */
  export type ProcurementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Procurements.
     */
    data: ProcurementCreateManyInput | ProcurementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Procurement createManyAndReturn
   */
  export type ProcurementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Procurements.
     */
    data: ProcurementCreateManyInput | ProcurementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Procurement update
   */
  export type ProcurementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
    /**
     * The data needed to update a Procurement.
     */
    data: XOR<ProcurementUpdateInput, ProcurementUncheckedUpdateInput>
    /**
     * Choose, which Procurement to update.
     */
    where: ProcurementWhereUniqueInput
  }

  /**
   * Procurement updateMany
   */
  export type ProcurementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Procurements.
     */
    data: XOR<ProcurementUpdateManyMutationInput, ProcurementUncheckedUpdateManyInput>
    /**
     * Filter which Procurements to update
     */
    where?: ProcurementWhereInput
  }

  /**
   * Procurement upsert
   */
  export type ProcurementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
    /**
     * The filter to search for the Procurement to update in case it exists.
     */
    where: ProcurementWhereUniqueInput
    /**
     * In case the Procurement found by the `where` argument doesn't exist, create a new Procurement with this data.
     */
    create: XOR<ProcurementCreateInput, ProcurementUncheckedCreateInput>
    /**
     * In case the Procurement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcurementUpdateInput, ProcurementUncheckedUpdateInput>
  }

  /**
   * Procurement delete
   */
  export type ProcurementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
    /**
     * Filter which Procurement to delete.
     */
    where: ProcurementWhereUniqueInput
  }

  /**
   * Procurement deleteMany
   */
  export type ProcurementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Procurements to delete
     */
    where?: ProcurementWhereInput
  }

  /**
   * Procurement.vendor
   */
  export type Procurement$vendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
  }

  /**
   * Procurement without action
   */
  export type ProcurementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procurement
     */
    select?: ProcurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementInclude<ExtArgs> | null
  }


  /**
   * Model PartUsage
   */

  export type AggregatePartUsage = {
    _count: PartUsageCountAggregateOutputType | null
    _avg: PartUsageAvgAggregateOutputType | null
    _sum: PartUsageSumAggregateOutputType | null
    _min: PartUsageMinAggregateOutputType | null
    _max: PartUsageMaxAggregateOutputType | null
  }

  export type PartUsageAvgAggregateOutputType = {
    quantity: number | null
  }

  export type PartUsageSumAggregateOutputType = {
    quantity: number | null
  }

  export type PartUsageMinAggregateOutputType = {
    id: string | null
    quantity: number | null
    usageType: $Enums.PartUsageType | null
    usageDate: Date | null
    notes: string | null
    partId: string | null
    assetId: string | null
    componentId: string | null
    maintenanceId: string | null
    usedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartUsageMaxAggregateOutputType = {
    id: string | null
    quantity: number | null
    usageType: $Enums.PartUsageType | null
    usageDate: Date | null
    notes: string | null
    partId: string | null
    assetId: string | null
    componentId: string | null
    maintenanceId: string | null
    usedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartUsageCountAggregateOutputType = {
    id: number
    quantity: number
    usageType: number
    usageDate: number
    notes: number
    partId: number
    assetId: number
    componentId: number
    maintenanceId: number
    usedById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PartUsageAvgAggregateInputType = {
    quantity?: true
  }

  export type PartUsageSumAggregateInputType = {
    quantity?: true
  }

  export type PartUsageMinAggregateInputType = {
    id?: true
    quantity?: true
    usageType?: true
    usageDate?: true
    notes?: true
    partId?: true
    assetId?: true
    componentId?: true
    maintenanceId?: true
    usedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartUsageMaxAggregateInputType = {
    id?: true
    quantity?: true
    usageType?: true
    usageDate?: true
    notes?: true
    partId?: true
    assetId?: true
    componentId?: true
    maintenanceId?: true
    usedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartUsageCountAggregateInputType = {
    id?: true
    quantity?: true
    usageType?: true
    usageDate?: true
    notes?: true
    partId?: true
    assetId?: true
    componentId?: true
    maintenanceId?: true
    usedById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PartUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartUsage to aggregate.
     */
    where?: PartUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartUsages to fetch.
     */
    orderBy?: PartUsageOrderByWithRelationInput | PartUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PartUsages
    **/
    _count?: true | PartUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartUsageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartUsageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartUsageMaxAggregateInputType
  }

  export type GetPartUsageAggregateType<T extends PartUsageAggregateArgs> = {
        [P in keyof T & keyof AggregatePartUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartUsage[P]>
      : GetScalarType<T[P], AggregatePartUsage[P]>
  }




  export type PartUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartUsageWhereInput
    orderBy?: PartUsageOrderByWithAggregationInput | PartUsageOrderByWithAggregationInput[]
    by: PartUsageScalarFieldEnum[] | PartUsageScalarFieldEnum
    having?: PartUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartUsageCountAggregateInputType | true
    _avg?: PartUsageAvgAggregateInputType
    _sum?: PartUsageSumAggregateInputType
    _min?: PartUsageMinAggregateInputType
    _max?: PartUsageMaxAggregateInputType
  }

  export type PartUsageGroupByOutputType = {
    id: string
    quantity: number
    usageType: $Enums.PartUsageType
    usageDate: Date
    notes: string | null
    partId: string
    assetId: string | null
    componentId: string | null
    maintenanceId: string | null
    usedById: string
    createdAt: Date
    updatedAt: Date
    _count: PartUsageCountAggregateOutputType | null
    _avg: PartUsageAvgAggregateOutputType | null
    _sum: PartUsageSumAggregateOutputType | null
    _min: PartUsageMinAggregateOutputType | null
    _max: PartUsageMaxAggregateOutputType | null
  }

  type GetPartUsageGroupByPayload<T extends PartUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartUsageGroupByOutputType[P]>
            : GetScalarType<T[P], PartUsageGroupByOutputType[P]>
        }
      >
    >


  export type PartUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    usageType?: boolean
    usageDate?: boolean
    notes?: boolean
    partId?: boolean
    assetId?: boolean
    componentId?: boolean
    maintenanceId?: boolean
    usedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    part?: boolean | SparePartDefaultArgs<ExtArgs>
    asset?: boolean | PartUsage$assetArgs<ExtArgs>
    component?: boolean | PartUsage$componentArgs<ExtArgs>
    maintenance?: boolean | PartUsage$maintenanceArgs<ExtArgs>
    usedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partUsage"]>

  export type PartUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    usageType?: boolean
    usageDate?: boolean
    notes?: boolean
    partId?: boolean
    assetId?: boolean
    componentId?: boolean
    maintenanceId?: boolean
    usedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    part?: boolean | SparePartDefaultArgs<ExtArgs>
    asset?: boolean | PartUsage$assetArgs<ExtArgs>
    component?: boolean | PartUsage$componentArgs<ExtArgs>
    maintenance?: boolean | PartUsage$maintenanceArgs<ExtArgs>
    usedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partUsage"]>

  export type PartUsageSelectScalar = {
    id?: boolean
    quantity?: boolean
    usageType?: boolean
    usageDate?: boolean
    notes?: boolean
    partId?: boolean
    assetId?: boolean
    componentId?: boolean
    maintenanceId?: boolean
    usedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PartUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    part?: boolean | SparePartDefaultArgs<ExtArgs>
    asset?: boolean | PartUsage$assetArgs<ExtArgs>
    component?: boolean | PartUsage$componentArgs<ExtArgs>
    maintenance?: boolean | PartUsage$maintenanceArgs<ExtArgs>
    usedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PartUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    part?: boolean | SparePartDefaultArgs<ExtArgs>
    asset?: boolean | PartUsage$assetArgs<ExtArgs>
    component?: boolean | PartUsage$componentArgs<ExtArgs>
    maintenance?: boolean | PartUsage$maintenanceArgs<ExtArgs>
    usedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PartUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PartUsage"
    objects: {
      part: Prisma.$SparePartPayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs> | null
      component: Prisma.$AssetComponentPayload<ExtArgs> | null
      maintenance: Prisma.$MaintenanceRecordPayload<ExtArgs> | null
      usedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quantity: number
      usageType: $Enums.PartUsageType
      usageDate: Date
      notes: string | null
      partId: string
      assetId: string | null
      componentId: string | null
      maintenanceId: string | null
      usedById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["partUsage"]>
    composites: {}
  }

  type PartUsageGetPayload<S extends boolean | null | undefined | PartUsageDefaultArgs> = $Result.GetResult<Prisma.$PartUsagePayload, S>

  type PartUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PartUsageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PartUsageCountAggregateInputType | true
    }

  export interface PartUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PartUsage'], meta: { name: 'PartUsage' } }
    /**
     * Find zero or one PartUsage that matches the filter.
     * @param {PartUsageFindUniqueArgs} args - Arguments to find a PartUsage
     * @example
     * // Get one PartUsage
     * const partUsage = await prisma.partUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartUsageFindUniqueArgs>(args: SelectSubset<T, PartUsageFindUniqueArgs<ExtArgs>>): Prisma__PartUsageClient<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PartUsage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PartUsageFindUniqueOrThrowArgs} args - Arguments to find a PartUsage
     * @example
     * // Get one PartUsage
     * const partUsage = await prisma.partUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, PartUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartUsageClient<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PartUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartUsageFindFirstArgs} args - Arguments to find a PartUsage
     * @example
     * // Get one PartUsage
     * const partUsage = await prisma.partUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartUsageFindFirstArgs>(args?: SelectSubset<T, PartUsageFindFirstArgs<ExtArgs>>): Prisma__PartUsageClient<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PartUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartUsageFindFirstOrThrowArgs} args - Arguments to find a PartUsage
     * @example
     * // Get one PartUsage
     * const partUsage = await prisma.partUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, PartUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartUsageClient<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PartUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PartUsages
     * const partUsages = await prisma.partUsage.findMany()
     * 
     * // Get first 10 PartUsages
     * const partUsages = await prisma.partUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partUsageWithIdOnly = await prisma.partUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartUsageFindManyArgs>(args?: SelectSubset<T, PartUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PartUsage.
     * @param {PartUsageCreateArgs} args - Arguments to create a PartUsage.
     * @example
     * // Create one PartUsage
     * const PartUsage = await prisma.partUsage.create({
     *   data: {
     *     // ... data to create a PartUsage
     *   }
     * })
     * 
     */
    create<T extends PartUsageCreateArgs>(args: SelectSubset<T, PartUsageCreateArgs<ExtArgs>>): Prisma__PartUsageClient<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PartUsages.
     * @param {PartUsageCreateManyArgs} args - Arguments to create many PartUsages.
     * @example
     * // Create many PartUsages
     * const partUsage = await prisma.partUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartUsageCreateManyArgs>(args?: SelectSubset<T, PartUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PartUsages and returns the data saved in the database.
     * @param {PartUsageCreateManyAndReturnArgs} args - Arguments to create many PartUsages.
     * @example
     * // Create many PartUsages
     * const partUsage = await prisma.partUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PartUsages and only return the `id`
     * const partUsageWithIdOnly = await prisma.partUsage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, PartUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PartUsage.
     * @param {PartUsageDeleteArgs} args - Arguments to delete one PartUsage.
     * @example
     * // Delete one PartUsage
     * const PartUsage = await prisma.partUsage.delete({
     *   where: {
     *     // ... filter to delete one PartUsage
     *   }
     * })
     * 
     */
    delete<T extends PartUsageDeleteArgs>(args: SelectSubset<T, PartUsageDeleteArgs<ExtArgs>>): Prisma__PartUsageClient<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PartUsage.
     * @param {PartUsageUpdateArgs} args - Arguments to update one PartUsage.
     * @example
     * // Update one PartUsage
     * const partUsage = await prisma.partUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartUsageUpdateArgs>(args: SelectSubset<T, PartUsageUpdateArgs<ExtArgs>>): Prisma__PartUsageClient<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PartUsages.
     * @param {PartUsageDeleteManyArgs} args - Arguments to filter PartUsages to delete.
     * @example
     * // Delete a few PartUsages
     * const { count } = await prisma.partUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartUsageDeleteManyArgs>(args?: SelectSubset<T, PartUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PartUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PartUsages
     * const partUsage = await prisma.partUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartUsageUpdateManyArgs>(args: SelectSubset<T, PartUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PartUsage.
     * @param {PartUsageUpsertArgs} args - Arguments to update or create a PartUsage.
     * @example
     * // Update or create a PartUsage
     * const partUsage = await prisma.partUsage.upsert({
     *   create: {
     *     // ... data to create a PartUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PartUsage we want to update
     *   }
     * })
     */
    upsert<T extends PartUsageUpsertArgs>(args: SelectSubset<T, PartUsageUpsertArgs<ExtArgs>>): Prisma__PartUsageClient<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PartUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartUsageCountArgs} args - Arguments to filter PartUsages to count.
     * @example
     * // Count the number of PartUsages
     * const count = await prisma.partUsage.count({
     *   where: {
     *     // ... the filter for the PartUsages we want to count
     *   }
     * })
    **/
    count<T extends PartUsageCountArgs>(
      args?: Subset<T, PartUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PartUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartUsageAggregateArgs>(args: Subset<T, PartUsageAggregateArgs>): Prisma.PrismaPromise<GetPartUsageAggregateType<T>>

    /**
     * Group by PartUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartUsageGroupByArgs['orderBy'] }
        : { orderBy?: PartUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PartUsage model
   */
  readonly fields: PartUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PartUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    part<T extends SparePartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SparePartDefaultArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    asset<T extends PartUsage$assetArgs<ExtArgs> = {}>(args?: Subset<T, PartUsage$assetArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    component<T extends PartUsage$componentArgs<ExtArgs> = {}>(args?: Subset<T, PartUsage$componentArgs<ExtArgs>>): Prisma__AssetComponentClient<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    maintenance<T extends PartUsage$maintenanceArgs<ExtArgs> = {}>(args?: Subset<T, PartUsage$maintenanceArgs<ExtArgs>>): Prisma__MaintenanceRecordClient<$Result.GetResult<Prisma.$MaintenanceRecordPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    usedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PartUsage model
   */ 
  interface PartUsageFieldRefs {
    readonly id: FieldRef<"PartUsage", 'String'>
    readonly quantity: FieldRef<"PartUsage", 'Int'>
    readonly usageType: FieldRef<"PartUsage", 'PartUsageType'>
    readonly usageDate: FieldRef<"PartUsage", 'DateTime'>
    readonly notes: FieldRef<"PartUsage", 'String'>
    readonly partId: FieldRef<"PartUsage", 'String'>
    readonly assetId: FieldRef<"PartUsage", 'String'>
    readonly componentId: FieldRef<"PartUsage", 'String'>
    readonly maintenanceId: FieldRef<"PartUsage", 'String'>
    readonly usedById: FieldRef<"PartUsage", 'String'>
    readonly createdAt: FieldRef<"PartUsage", 'DateTime'>
    readonly updatedAt: FieldRef<"PartUsage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PartUsage findUnique
   */
  export type PartUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    /**
     * Filter, which PartUsage to fetch.
     */
    where: PartUsageWhereUniqueInput
  }

  /**
   * PartUsage findUniqueOrThrow
   */
  export type PartUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    /**
     * Filter, which PartUsage to fetch.
     */
    where: PartUsageWhereUniqueInput
  }

  /**
   * PartUsage findFirst
   */
  export type PartUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    /**
     * Filter, which PartUsage to fetch.
     */
    where?: PartUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartUsages to fetch.
     */
    orderBy?: PartUsageOrderByWithRelationInput | PartUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartUsages.
     */
    cursor?: PartUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartUsages.
     */
    distinct?: PartUsageScalarFieldEnum | PartUsageScalarFieldEnum[]
  }

  /**
   * PartUsage findFirstOrThrow
   */
  export type PartUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    /**
     * Filter, which PartUsage to fetch.
     */
    where?: PartUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartUsages to fetch.
     */
    orderBy?: PartUsageOrderByWithRelationInput | PartUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartUsages.
     */
    cursor?: PartUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartUsages.
     */
    distinct?: PartUsageScalarFieldEnum | PartUsageScalarFieldEnum[]
  }

  /**
   * PartUsage findMany
   */
  export type PartUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    /**
     * Filter, which PartUsages to fetch.
     */
    where?: PartUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartUsages to fetch.
     */
    orderBy?: PartUsageOrderByWithRelationInput | PartUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PartUsages.
     */
    cursor?: PartUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartUsages.
     */
    skip?: number
    distinct?: PartUsageScalarFieldEnum | PartUsageScalarFieldEnum[]
  }

  /**
   * PartUsage create
   */
  export type PartUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a PartUsage.
     */
    data: XOR<PartUsageCreateInput, PartUsageUncheckedCreateInput>
  }

  /**
   * PartUsage createMany
   */
  export type PartUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PartUsages.
     */
    data: PartUsageCreateManyInput | PartUsageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PartUsage createManyAndReturn
   */
  export type PartUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PartUsages.
     */
    data: PartUsageCreateManyInput | PartUsageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PartUsage update
   */
  export type PartUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a PartUsage.
     */
    data: XOR<PartUsageUpdateInput, PartUsageUncheckedUpdateInput>
    /**
     * Choose, which PartUsage to update.
     */
    where: PartUsageWhereUniqueInput
  }

  /**
   * PartUsage updateMany
   */
  export type PartUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PartUsages.
     */
    data: XOR<PartUsageUpdateManyMutationInput, PartUsageUncheckedUpdateManyInput>
    /**
     * Filter which PartUsages to update
     */
    where?: PartUsageWhereInput
  }

  /**
   * PartUsage upsert
   */
  export type PartUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the PartUsage to update in case it exists.
     */
    where: PartUsageWhereUniqueInput
    /**
     * In case the PartUsage found by the `where` argument doesn't exist, create a new PartUsage with this data.
     */
    create: XOR<PartUsageCreateInput, PartUsageUncheckedCreateInput>
    /**
     * In case the PartUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartUsageUpdateInput, PartUsageUncheckedUpdateInput>
  }

  /**
   * PartUsage delete
   */
  export type PartUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    /**
     * Filter which PartUsage to delete.
     */
    where: PartUsageWhereUniqueInput
  }

  /**
   * PartUsage deleteMany
   */
  export type PartUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartUsages to delete
     */
    where?: PartUsageWhereInput
  }

  /**
   * PartUsage.asset
   */
  export type PartUsage$assetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * PartUsage.component
   */
  export type PartUsage$componentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    where?: AssetComponentWhereInput
  }

  /**
   * PartUsage.maintenance
   */
  export type PartUsage$maintenanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRecord
     */
    select?: MaintenanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRecordInclude<ExtArgs> | null
    where?: MaintenanceRecordWhereInput
  }

  /**
   * PartUsage without action
   */
  export type PartUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
  }


  /**
   * Model PartReplacement
   */

  export type AggregatePartReplacement = {
    _count: PartReplacementCountAggregateOutputType | null
    _avg: PartReplacementAvgAggregateOutputType | null
    _sum: PartReplacementSumAggregateOutputType | null
    _min: PartReplacementMinAggregateOutputType | null
    _max: PartReplacementMaxAggregateOutputType | null
  }

  export type PartReplacementAvgAggregateOutputType = {
    cost: Decimal | null
  }

  export type PartReplacementSumAggregateOutputType = {
    cost: Decimal | null
  }

  export type PartReplacementMinAggregateOutputType = {
    id: string | null
    replacementNumber: string | null
    reason: string | null
    status: $Enums.ReplacementStatus | null
    plannedDate: Date | null
    completedDate: Date | null
    cost: Decimal | null
    notes: string | null
    oldPartId: string | null
    oldComponentId: string | null
    newPartId: string | null
    assetId: string | null
    performedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartReplacementMaxAggregateOutputType = {
    id: string | null
    replacementNumber: string | null
    reason: string | null
    status: $Enums.ReplacementStatus | null
    plannedDate: Date | null
    completedDate: Date | null
    cost: Decimal | null
    notes: string | null
    oldPartId: string | null
    oldComponentId: string | null
    newPartId: string | null
    assetId: string | null
    performedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartReplacementCountAggregateOutputType = {
    id: number
    replacementNumber: number
    reason: number
    status: number
    plannedDate: number
    completedDate: number
    cost: number
    notes: number
    oldPartId: number
    oldComponentId: number
    newPartId: number
    assetId: number
    performedById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PartReplacementAvgAggregateInputType = {
    cost?: true
  }

  export type PartReplacementSumAggregateInputType = {
    cost?: true
  }

  export type PartReplacementMinAggregateInputType = {
    id?: true
    replacementNumber?: true
    reason?: true
    status?: true
    plannedDate?: true
    completedDate?: true
    cost?: true
    notes?: true
    oldPartId?: true
    oldComponentId?: true
    newPartId?: true
    assetId?: true
    performedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartReplacementMaxAggregateInputType = {
    id?: true
    replacementNumber?: true
    reason?: true
    status?: true
    plannedDate?: true
    completedDate?: true
    cost?: true
    notes?: true
    oldPartId?: true
    oldComponentId?: true
    newPartId?: true
    assetId?: true
    performedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartReplacementCountAggregateInputType = {
    id?: true
    replacementNumber?: true
    reason?: true
    status?: true
    plannedDate?: true
    completedDate?: true
    cost?: true
    notes?: true
    oldPartId?: true
    oldComponentId?: true
    newPartId?: true
    assetId?: true
    performedById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PartReplacementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartReplacement to aggregate.
     */
    where?: PartReplacementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartReplacements to fetch.
     */
    orderBy?: PartReplacementOrderByWithRelationInput | PartReplacementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartReplacementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartReplacements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartReplacements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PartReplacements
    **/
    _count?: true | PartReplacementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartReplacementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartReplacementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartReplacementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartReplacementMaxAggregateInputType
  }

  export type GetPartReplacementAggregateType<T extends PartReplacementAggregateArgs> = {
        [P in keyof T & keyof AggregatePartReplacement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartReplacement[P]>
      : GetScalarType<T[P], AggregatePartReplacement[P]>
  }




  export type PartReplacementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartReplacementWhereInput
    orderBy?: PartReplacementOrderByWithAggregationInput | PartReplacementOrderByWithAggregationInput[]
    by: PartReplacementScalarFieldEnum[] | PartReplacementScalarFieldEnum
    having?: PartReplacementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartReplacementCountAggregateInputType | true
    _avg?: PartReplacementAvgAggregateInputType
    _sum?: PartReplacementSumAggregateInputType
    _min?: PartReplacementMinAggregateInputType
    _max?: PartReplacementMaxAggregateInputType
  }

  export type PartReplacementGroupByOutputType = {
    id: string
    replacementNumber: string
    reason: string
    status: $Enums.ReplacementStatus
    plannedDate: Date | null
    completedDate: Date | null
    cost: Decimal | null
    notes: string | null
    oldPartId: string | null
    oldComponentId: string | null
    newPartId: string
    assetId: string
    performedById: string | null
    createdAt: Date
    updatedAt: Date
    _count: PartReplacementCountAggregateOutputType | null
    _avg: PartReplacementAvgAggregateOutputType | null
    _sum: PartReplacementSumAggregateOutputType | null
    _min: PartReplacementMinAggregateOutputType | null
    _max: PartReplacementMaxAggregateOutputType | null
  }

  type GetPartReplacementGroupByPayload<T extends PartReplacementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartReplacementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartReplacementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartReplacementGroupByOutputType[P]>
            : GetScalarType<T[P], PartReplacementGroupByOutputType[P]>
        }
      >
    >


  export type PartReplacementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replacementNumber?: boolean
    reason?: boolean
    status?: boolean
    plannedDate?: boolean
    completedDate?: boolean
    cost?: boolean
    notes?: boolean
    oldPartId?: boolean
    oldComponentId?: boolean
    newPartId?: boolean
    assetId?: boolean
    performedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    oldPart?: boolean | PartReplacement$oldPartArgs<ExtArgs>
    oldComponent?: boolean | PartReplacement$oldComponentArgs<ExtArgs>
    newPart?: boolean | SparePartDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    performedBy?: boolean | PartReplacement$performedByArgs<ExtArgs>
  }, ExtArgs["result"]["partReplacement"]>

  export type PartReplacementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replacementNumber?: boolean
    reason?: boolean
    status?: boolean
    plannedDate?: boolean
    completedDate?: boolean
    cost?: boolean
    notes?: boolean
    oldPartId?: boolean
    oldComponentId?: boolean
    newPartId?: boolean
    assetId?: boolean
    performedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    oldPart?: boolean | PartReplacement$oldPartArgs<ExtArgs>
    oldComponent?: boolean | PartReplacement$oldComponentArgs<ExtArgs>
    newPart?: boolean | SparePartDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    performedBy?: boolean | PartReplacement$performedByArgs<ExtArgs>
  }, ExtArgs["result"]["partReplacement"]>

  export type PartReplacementSelectScalar = {
    id?: boolean
    replacementNumber?: boolean
    reason?: boolean
    status?: boolean
    plannedDate?: boolean
    completedDate?: boolean
    cost?: boolean
    notes?: boolean
    oldPartId?: boolean
    oldComponentId?: boolean
    newPartId?: boolean
    assetId?: boolean
    performedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PartReplacementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oldPart?: boolean | PartReplacement$oldPartArgs<ExtArgs>
    oldComponent?: boolean | PartReplacement$oldComponentArgs<ExtArgs>
    newPart?: boolean | SparePartDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    performedBy?: boolean | PartReplacement$performedByArgs<ExtArgs>
  }
  export type PartReplacementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oldPart?: boolean | PartReplacement$oldPartArgs<ExtArgs>
    oldComponent?: boolean | PartReplacement$oldComponentArgs<ExtArgs>
    newPart?: boolean | SparePartDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    performedBy?: boolean | PartReplacement$performedByArgs<ExtArgs>
  }

  export type $PartReplacementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PartReplacement"
    objects: {
      oldPart: Prisma.$SparePartPayload<ExtArgs> | null
      oldComponent: Prisma.$AssetComponentPayload<ExtArgs> | null
      newPart: Prisma.$SparePartPayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs>
      performedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      replacementNumber: string
      reason: string
      status: $Enums.ReplacementStatus
      plannedDate: Date | null
      completedDate: Date | null
      cost: Prisma.Decimal | null
      notes: string | null
      oldPartId: string | null
      oldComponentId: string | null
      newPartId: string
      assetId: string
      performedById: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["partReplacement"]>
    composites: {}
  }

  type PartReplacementGetPayload<S extends boolean | null | undefined | PartReplacementDefaultArgs> = $Result.GetResult<Prisma.$PartReplacementPayload, S>

  type PartReplacementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PartReplacementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PartReplacementCountAggregateInputType | true
    }

  export interface PartReplacementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PartReplacement'], meta: { name: 'PartReplacement' } }
    /**
     * Find zero or one PartReplacement that matches the filter.
     * @param {PartReplacementFindUniqueArgs} args - Arguments to find a PartReplacement
     * @example
     * // Get one PartReplacement
     * const partReplacement = await prisma.partReplacement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartReplacementFindUniqueArgs>(args: SelectSubset<T, PartReplacementFindUniqueArgs<ExtArgs>>): Prisma__PartReplacementClient<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PartReplacement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PartReplacementFindUniqueOrThrowArgs} args - Arguments to find a PartReplacement
     * @example
     * // Get one PartReplacement
     * const partReplacement = await prisma.partReplacement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartReplacementFindUniqueOrThrowArgs>(args: SelectSubset<T, PartReplacementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartReplacementClient<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PartReplacement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartReplacementFindFirstArgs} args - Arguments to find a PartReplacement
     * @example
     * // Get one PartReplacement
     * const partReplacement = await prisma.partReplacement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartReplacementFindFirstArgs>(args?: SelectSubset<T, PartReplacementFindFirstArgs<ExtArgs>>): Prisma__PartReplacementClient<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PartReplacement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartReplacementFindFirstOrThrowArgs} args - Arguments to find a PartReplacement
     * @example
     * // Get one PartReplacement
     * const partReplacement = await prisma.partReplacement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartReplacementFindFirstOrThrowArgs>(args?: SelectSubset<T, PartReplacementFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartReplacementClient<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PartReplacements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartReplacementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PartReplacements
     * const partReplacements = await prisma.partReplacement.findMany()
     * 
     * // Get first 10 PartReplacements
     * const partReplacements = await prisma.partReplacement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partReplacementWithIdOnly = await prisma.partReplacement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartReplacementFindManyArgs>(args?: SelectSubset<T, PartReplacementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PartReplacement.
     * @param {PartReplacementCreateArgs} args - Arguments to create a PartReplacement.
     * @example
     * // Create one PartReplacement
     * const PartReplacement = await prisma.partReplacement.create({
     *   data: {
     *     // ... data to create a PartReplacement
     *   }
     * })
     * 
     */
    create<T extends PartReplacementCreateArgs>(args: SelectSubset<T, PartReplacementCreateArgs<ExtArgs>>): Prisma__PartReplacementClient<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PartReplacements.
     * @param {PartReplacementCreateManyArgs} args - Arguments to create many PartReplacements.
     * @example
     * // Create many PartReplacements
     * const partReplacement = await prisma.partReplacement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartReplacementCreateManyArgs>(args?: SelectSubset<T, PartReplacementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PartReplacements and returns the data saved in the database.
     * @param {PartReplacementCreateManyAndReturnArgs} args - Arguments to create many PartReplacements.
     * @example
     * // Create many PartReplacements
     * const partReplacement = await prisma.partReplacement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PartReplacements and only return the `id`
     * const partReplacementWithIdOnly = await prisma.partReplacement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartReplacementCreateManyAndReturnArgs>(args?: SelectSubset<T, PartReplacementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PartReplacement.
     * @param {PartReplacementDeleteArgs} args - Arguments to delete one PartReplacement.
     * @example
     * // Delete one PartReplacement
     * const PartReplacement = await prisma.partReplacement.delete({
     *   where: {
     *     // ... filter to delete one PartReplacement
     *   }
     * })
     * 
     */
    delete<T extends PartReplacementDeleteArgs>(args: SelectSubset<T, PartReplacementDeleteArgs<ExtArgs>>): Prisma__PartReplacementClient<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PartReplacement.
     * @param {PartReplacementUpdateArgs} args - Arguments to update one PartReplacement.
     * @example
     * // Update one PartReplacement
     * const partReplacement = await prisma.partReplacement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartReplacementUpdateArgs>(args: SelectSubset<T, PartReplacementUpdateArgs<ExtArgs>>): Prisma__PartReplacementClient<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PartReplacements.
     * @param {PartReplacementDeleteManyArgs} args - Arguments to filter PartReplacements to delete.
     * @example
     * // Delete a few PartReplacements
     * const { count } = await prisma.partReplacement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartReplacementDeleteManyArgs>(args?: SelectSubset<T, PartReplacementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PartReplacements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartReplacementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PartReplacements
     * const partReplacement = await prisma.partReplacement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartReplacementUpdateManyArgs>(args: SelectSubset<T, PartReplacementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PartReplacement.
     * @param {PartReplacementUpsertArgs} args - Arguments to update or create a PartReplacement.
     * @example
     * // Update or create a PartReplacement
     * const partReplacement = await prisma.partReplacement.upsert({
     *   create: {
     *     // ... data to create a PartReplacement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PartReplacement we want to update
     *   }
     * })
     */
    upsert<T extends PartReplacementUpsertArgs>(args: SelectSubset<T, PartReplacementUpsertArgs<ExtArgs>>): Prisma__PartReplacementClient<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PartReplacements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartReplacementCountArgs} args - Arguments to filter PartReplacements to count.
     * @example
     * // Count the number of PartReplacements
     * const count = await prisma.partReplacement.count({
     *   where: {
     *     // ... the filter for the PartReplacements we want to count
     *   }
     * })
    **/
    count<T extends PartReplacementCountArgs>(
      args?: Subset<T, PartReplacementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartReplacementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PartReplacement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartReplacementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartReplacementAggregateArgs>(args: Subset<T, PartReplacementAggregateArgs>): Prisma.PrismaPromise<GetPartReplacementAggregateType<T>>

    /**
     * Group by PartReplacement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartReplacementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartReplacementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartReplacementGroupByArgs['orderBy'] }
        : { orderBy?: PartReplacementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartReplacementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartReplacementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PartReplacement model
   */
  readonly fields: PartReplacementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PartReplacement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartReplacementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    oldPart<T extends PartReplacement$oldPartArgs<ExtArgs> = {}>(args?: Subset<T, PartReplacement$oldPartArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    oldComponent<T extends PartReplacement$oldComponentArgs<ExtArgs> = {}>(args?: Subset<T, PartReplacement$oldComponentArgs<ExtArgs>>): Prisma__AssetComponentClient<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    newPart<T extends SparePartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SparePartDefaultArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    performedBy<T extends PartReplacement$performedByArgs<ExtArgs> = {}>(args?: Subset<T, PartReplacement$performedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PartReplacement model
   */ 
  interface PartReplacementFieldRefs {
    readonly id: FieldRef<"PartReplacement", 'String'>
    readonly replacementNumber: FieldRef<"PartReplacement", 'String'>
    readonly reason: FieldRef<"PartReplacement", 'String'>
    readonly status: FieldRef<"PartReplacement", 'ReplacementStatus'>
    readonly plannedDate: FieldRef<"PartReplacement", 'DateTime'>
    readonly completedDate: FieldRef<"PartReplacement", 'DateTime'>
    readonly cost: FieldRef<"PartReplacement", 'Decimal'>
    readonly notes: FieldRef<"PartReplacement", 'String'>
    readonly oldPartId: FieldRef<"PartReplacement", 'String'>
    readonly oldComponentId: FieldRef<"PartReplacement", 'String'>
    readonly newPartId: FieldRef<"PartReplacement", 'String'>
    readonly assetId: FieldRef<"PartReplacement", 'String'>
    readonly performedById: FieldRef<"PartReplacement", 'String'>
    readonly createdAt: FieldRef<"PartReplacement", 'DateTime'>
    readonly updatedAt: FieldRef<"PartReplacement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PartReplacement findUnique
   */
  export type PartReplacementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    /**
     * Filter, which PartReplacement to fetch.
     */
    where: PartReplacementWhereUniqueInput
  }

  /**
   * PartReplacement findUniqueOrThrow
   */
  export type PartReplacementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    /**
     * Filter, which PartReplacement to fetch.
     */
    where: PartReplacementWhereUniqueInput
  }

  /**
   * PartReplacement findFirst
   */
  export type PartReplacementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    /**
     * Filter, which PartReplacement to fetch.
     */
    where?: PartReplacementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartReplacements to fetch.
     */
    orderBy?: PartReplacementOrderByWithRelationInput | PartReplacementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartReplacements.
     */
    cursor?: PartReplacementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartReplacements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartReplacements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartReplacements.
     */
    distinct?: PartReplacementScalarFieldEnum | PartReplacementScalarFieldEnum[]
  }

  /**
   * PartReplacement findFirstOrThrow
   */
  export type PartReplacementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    /**
     * Filter, which PartReplacement to fetch.
     */
    where?: PartReplacementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartReplacements to fetch.
     */
    orderBy?: PartReplacementOrderByWithRelationInput | PartReplacementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartReplacements.
     */
    cursor?: PartReplacementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartReplacements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartReplacements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartReplacements.
     */
    distinct?: PartReplacementScalarFieldEnum | PartReplacementScalarFieldEnum[]
  }

  /**
   * PartReplacement findMany
   */
  export type PartReplacementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    /**
     * Filter, which PartReplacements to fetch.
     */
    where?: PartReplacementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartReplacements to fetch.
     */
    orderBy?: PartReplacementOrderByWithRelationInput | PartReplacementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PartReplacements.
     */
    cursor?: PartReplacementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartReplacements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartReplacements.
     */
    skip?: number
    distinct?: PartReplacementScalarFieldEnum | PartReplacementScalarFieldEnum[]
  }

  /**
   * PartReplacement create
   */
  export type PartReplacementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    /**
     * The data needed to create a PartReplacement.
     */
    data: XOR<PartReplacementCreateInput, PartReplacementUncheckedCreateInput>
  }

  /**
   * PartReplacement createMany
   */
  export type PartReplacementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PartReplacements.
     */
    data: PartReplacementCreateManyInput | PartReplacementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PartReplacement createManyAndReturn
   */
  export type PartReplacementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PartReplacements.
     */
    data: PartReplacementCreateManyInput | PartReplacementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PartReplacement update
   */
  export type PartReplacementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    /**
     * The data needed to update a PartReplacement.
     */
    data: XOR<PartReplacementUpdateInput, PartReplacementUncheckedUpdateInput>
    /**
     * Choose, which PartReplacement to update.
     */
    where: PartReplacementWhereUniqueInput
  }

  /**
   * PartReplacement updateMany
   */
  export type PartReplacementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PartReplacements.
     */
    data: XOR<PartReplacementUpdateManyMutationInput, PartReplacementUncheckedUpdateManyInput>
    /**
     * Filter which PartReplacements to update
     */
    where?: PartReplacementWhereInput
  }

  /**
   * PartReplacement upsert
   */
  export type PartReplacementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    /**
     * The filter to search for the PartReplacement to update in case it exists.
     */
    where: PartReplacementWhereUniqueInput
    /**
     * In case the PartReplacement found by the `where` argument doesn't exist, create a new PartReplacement with this data.
     */
    create: XOR<PartReplacementCreateInput, PartReplacementUncheckedCreateInput>
    /**
     * In case the PartReplacement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartReplacementUpdateInput, PartReplacementUncheckedUpdateInput>
  }

  /**
   * PartReplacement delete
   */
  export type PartReplacementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    /**
     * Filter which PartReplacement to delete.
     */
    where: PartReplacementWhereUniqueInput
  }

  /**
   * PartReplacement deleteMany
   */
  export type PartReplacementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartReplacements to delete
     */
    where?: PartReplacementWhereInput
  }

  /**
   * PartReplacement.oldPart
   */
  export type PartReplacement$oldPartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    where?: SparePartWhereInput
  }

  /**
   * PartReplacement.oldComponent
   */
  export type PartReplacement$oldComponentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    where?: AssetComponentWhereInput
  }

  /**
   * PartReplacement.performedBy
   */
  export type PartReplacement$performedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * PartReplacement without action
   */
  export type PartReplacementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
  }


  /**
   * Model NewPartRegistration
   */

  export type AggregateNewPartRegistration = {
    _count: NewPartRegistrationCountAggregateOutputType | null
    _min: NewPartRegistrationMinAggregateOutputType | null
    _max: NewPartRegistrationMaxAggregateOutputType | null
  }

  export type NewPartRegistrationMinAggregateOutputType = {
    id: string | null
    registrationNumber: string | null
    serialNumber: string | null
    assetTag: string | null
    status: $Enums.RegistrationStatus | null
    registeredDate: Date | null
    notes: string | null
    partId: string | null
    assetId: string | null
    registeredById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NewPartRegistrationMaxAggregateOutputType = {
    id: string | null
    registrationNumber: string | null
    serialNumber: string | null
    assetTag: string | null
    status: $Enums.RegistrationStatus | null
    registeredDate: Date | null
    notes: string | null
    partId: string | null
    assetId: string | null
    registeredById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NewPartRegistrationCountAggregateOutputType = {
    id: number
    registrationNumber: number
    serialNumber: number
    assetTag: number
    status: number
    registeredDate: number
    notes: number
    partId: number
    assetId: number
    registeredById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NewPartRegistrationMinAggregateInputType = {
    id?: true
    registrationNumber?: true
    serialNumber?: true
    assetTag?: true
    status?: true
    registeredDate?: true
    notes?: true
    partId?: true
    assetId?: true
    registeredById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NewPartRegistrationMaxAggregateInputType = {
    id?: true
    registrationNumber?: true
    serialNumber?: true
    assetTag?: true
    status?: true
    registeredDate?: true
    notes?: true
    partId?: true
    assetId?: true
    registeredById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NewPartRegistrationCountAggregateInputType = {
    id?: true
    registrationNumber?: true
    serialNumber?: true
    assetTag?: true
    status?: true
    registeredDate?: true
    notes?: true
    partId?: true
    assetId?: true
    registeredById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NewPartRegistrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewPartRegistration to aggregate.
     */
    where?: NewPartRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewPartRegistrations to fetch.
     */
    orderBy?: NewPartRegistrationOrderByWithRelationInput | NewPartRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewPartRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewPartRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewPartRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NewPartRegistrations
    **/
    _count?: true | NewPartRegistrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewPartRegistrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewPartRegistrationMaxAggregateInputType
  }

  export type GetNewPartRegistrationAggregateType<T extends NewPartRegistrationAggregateArgs> = {
        [P in keyof T & keyof AggregateNewPartRegistration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewPartRegistration[P]>
      : GetScalarType<T[P], AggregateNewPartRegistration[P]>
  }




  export type NewPartRegistrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewPartRegistrationWhereInput
    orderBy?: NewPartRegistrationOrderByWithAggregationInput | NewPartRegistrationOrderByWithAggregationInput[]
    by: NewPartRegistrationScalarFieldEnum[] | NewPartRegistrationScalarFieldEnum
    having?: NewPartRegistrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewPartRegistrationCountAggregateInputType | true
    _min?: NewPartRegistrationMinAggregateInputType
    _max?: NewPartRegistrationMaxAggregateInputType
  }

  export type NewPartRegistrationGroupByOutputType = {
    id: string
    registrationNumber: string
    serialNumber: string | null
    assetTag: string | null
    status: $Enums.RegistrationStatus
    registeredDate: Date | null
    notes: string | null
    partId: string
    assetId: string | null
    registeredById: string
    createdAt: Date
    updatedAt: Date
    _count: NewPartRegistrationCountAggregateOutputType | null
    _min: NewPartRegistrationMinAggregateOutputType | null
    _max: NewPartRegistrationMaxAggregateOutputType | null
  }

  type GetNewPartRegistrationGroupByPayload<T extends NewPartRegistrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewPartRegistrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewPartRegistrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewPartRegistrationGroupByOutputType[P]>
            : GetScalarType<T[P], NewPartRegistrationGroupByOutputType[P]>
        }
      >
    >


  export type NewPartRegistrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrationNumber?: boolean
    serialNumber?: boolean
    assetTag?: boolean
    status?: boolean
    registeredDate?: boolean
    notes?: boolean
    partId?: boolean
    assetId?: boolean
    registeredById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    part?: boolean | SparePartDefaultArgs<ExtArgs>
    asset?: boolean | NewPartRegistration$assetArgs<ExtArgs>
    registeredBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["newPartRegistration"]>

  export type NewPartRegistrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrationNumber?: boolean
    serialNumber?: boolean
    assetTag?: boolean
    status?: boolean
    registeredDate?: boolean
    notes?: boolean
    partId?: boolean
    assetId?: boolean
    registeredById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    part?: boolean | SparePartDefaultArgs<ExtArgs>
    asset?: boolean | NewPartRegistration$assetArgs<ExtArgs>
    registeredBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["newPartRegistration"]>

  export type NewPartRegistrationSelectScalar = {
    id?: boolean
    registrationNumber?: boolean
    serialNumber?: boolean
    assetTag?: boolean
    status?: boolean
    registeredDate?: boolean
    notes?: boolean
    partId?: boolean
    assetId?: boolean
    registeredById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NewPartRegistrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    part?: boolean | SparePartDefaultArgs<ExtArgs>
    asset?: boolean | NewPartRegistration$assetArgs<ExtArgs>
    registeredBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NewPartRegistrationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    part?: boolean | SparePartDefaultArgs<ExtArgs>
    asset?: boolean | NewPartRegistration$assetArgs<ExtArgs>
    registeredBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NewPartRegistrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NewPartRegistration"
    objects: {
      part: Prisma.$SparePartPayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs> | null
      registeredBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      registrationNumber: string
      serialNumber: string | null
      assetTag: string | null
      status: $Enums.RegistrationStatus
      registeredDate: Date | null
      notes: string | null
      partId: string
      assetId: string | null
      registeredById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["newPartRegistration"]>
    composites: {}
  }

  type NewPartRegistrationGetPayload<S extends boolean | null | undefined | NewPartRegistrationDefaultArgs> = $Result.GetResult<Prisma.$NewPartRegistrationPayload, S>

  type NewPartRegistrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NewPartRegistrationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NewPartRegistrationCountAggregateInputType | true
    }

  export interface NewPartRegistrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NewPartRegistration'], meta: { name: 'NewPartRegistration' } }
    /**
     * Find zero or one NewPartRegistration that matches the filter.
     * @param {NewPartRegistrationFindUniqueArgs} args - Arguments to find a NewPartRegistration
     * @example
     * // Get one NewPartRegistration
     * const newPartRegistration = await prisma.newPartRegistration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NewPartRegistrationFindUniqueArgs>(args: SelectSubset<T, NewPartRegistrationFindUniqueArgs<ExtArgs>>): Prisma__NewPartRegistrationClient<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NewPartRegistration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NewPartRegistrationFindUniqueOrThrowArgs} args - Arguments to find a NewPartRegistration
     * @example
     * // Get one NewPartRegistration
     * const newPartRegistration = await prisma.newPartRegistration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NewPartRegistrationFindUniqueOrThrowArgs>(args: SelectSubset<T, NewPartRegistrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NewPartRegistrationClient<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NewPartRegistration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewPartRegistrationFindFirstArgs} args - Arguments to find a NewPartRegistration
     * @example
     * // Get one NewPartRegistration
     * const newPartRegistration = await prisma.newPartRegistration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NewPartRegistrationFindFirstArgs>(args?: SelectSubset<T, NewPartRegistrationFindFirstArgs<ExtArgs>>): Prisma__NewPartRegistrationClient<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NewPartRegistration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewPartRegistrationFindFirstOrThrowArgs} args - Arguments to find a NewPartRegistration
     * @example
     * // Get one NewPartRegistration
     * const newPartRegistration = await prisma.newPartRegistration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NewPartRegistrationFindFirstOrThrowArgs>(args?: SelectSubset<T, NewPartRegistrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NewPartRegistrationClient<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NewPartRegistrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewPartRegistrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NewPartRegistrations
     * const newPartRegistrations = await prisma.newPartRegistration.findMany()
     * 
     * // Get first 10 NewPartRegistrations
     * const newPartRegistrations = await prisma.newPartRegistration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newPartRegistrationWithIdOnly = await prisma.newPartRegistration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NewPartRegistrationFindManyArgs>(args?: SelectSubset<T, NewPartRegistrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NewPartRegistration.
     * @param {NewPartRegistrationCreateArgs} args - Arguments to create a NewPartRegistration.
     * @example
     * // Create one NewPartRegistration
     * const NewPartRegistration = await prisma.newPartRegistration.create({
     *   data: {
     *     // ... data to create a NewPartRegistration
     *   }
     * })
     * 
     */
    create<T extends NewPartRegistrationCreateArgs>(args: SelectSubset<T, NewPartRegistrationCreateArgs<ExtArgs>>): Prisma__NewPartRegistrationClient<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NewPartRegistrations.
     * @param {NewPartRegistrationCreateManyArgs} args - Arguments to create many NewPartRegistrations.
     * @example
     * // Create many NewPartRegistrations
     * const newPartRegistration = await prisma.newPartRegistration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NewPartRegistrationCreateManyArgs>(args?: SelectSubset<T, NewPartRegistrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NewPartRegistrations and returns the data saved in the database.
     * @param {NewPartRegistrationCreateManyAndReturnArgs} args - Arguments to create many NewPartRegistrations.
     * @example
     * // Create many NewPartRegistrations
     * const newPartRegistration = await prisma.newPartRegistration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NewPartRegistrations and only return the `id`
     * const newPartRegistrationWithIdOnly = await prisma.newPartRegistration.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NewPartRegistrationCreateManyAndReturnArgs>(args?: SelectSubset<T, NewPartRegistrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a NewPartRegistration.
     * @param {NewPartRegistrationDeleteArgs} args - Arguments to delete one NewPartRegistration.
     * @example
     * // Delete one NewPartRegistration
     * const NewPartRegistration = await prisma.newPartRegistration.delete({
     *   where: {
     *     // ... filter to delete one NewPartRegistration
     *   }
     * })
     * 
     */
    delete<T extends NewPartRegistrationDeleteArgs>(args: SelectSubset<T, NewPartRegistrationDeleteArgs<ExtArgs>>): Prisma__NewPartRegistrationClient<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NewPartRegistration.
     * @param {NewPartRegistrationUpdateArgs} args - Arguments to update one NewPartRegistration.
     * @example
     * // Update one NewPartRegistration
     * const newPartRegistration = await prisma.newPartRegistration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NewPartRegistrationUpdateArgs>(args: SelectSubset<T, NewPartRegistrationUpdateArgs<ExtArgs>>): Prisma__NewPartRegistrationClient<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NewPartRegistrations.
     * @param {NewPartRegistrationDeleteManyArgs} args - Arguments to filter NewPartRegistrations to delete.
     * @example
     * // Delete a few NewPartRegistrations
     * const { count } = await prisma.newPartRegistration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NewPartRegistrationDeleteManyArgs>(args?: SelectSubset<T, NewPartRegistrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NewPartRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewPartRegistrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NewPartRegistrations
     * const newPartRegistration = await prisma.newPartRegistration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NewPartRegistrationUpdateManyArgs>(args: SelectSubset<T, NewPartRegistrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NewPartRegistration.
     * @param {NewPartRegistrationUpsertArgs} args - Arguments to update or create a NewPartRegistration.
     * @example
     * // Update or create a NewPartRegistration
     * const newPartRegistration = await prisma.newPartRegistration.upsert({
     *   create: {
     *     // ... data to create a NewPartRegistration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NewPartRegistration we want to update
     *   }
     * })
     */
    upsert<T extends NewPartRegistrationUpsertArgs>(args: SelectSubset<T, NewPartRegistrationUpsertArgs<ExtArgs>>): Prisma__NewPartRegistrationClient<$Result.GetResult<Prisma.$NewPartRegistrationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NewPartRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewPartRegistrationCountArgs} args - Arguments to filter NewPartRegistrations to count.
     * @example
     * // Count the number of NewPartRegistrations
     * const count = await prisma.newPartRegistration.count({
     *   where: {
     *     // ... the filter for the NewPartRegistrations we want to count
     *   }
     * })
    **/
    count<T extends NewPartRegistrationCountArgs>(
      args?: Subset<T, NewPartRegistrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewPartRegistrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NewPartRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewPartRegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewPartRegistrationAggregateArgs>(args: Subset<T, NewPartRegistrationAggregateArgs>): Prisma.PrismaPromise<GetNewPartRegistrationAggregateType<T>>

    /**
     * Group by NewPartRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewPartRegistrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewPartRegistrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewPartRegistrationGroupByArgs['orderBy'] }
        : { orderBy?: NewPartRegistrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewPartRegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewPartRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NewPartRegistration model
   */
  readonly fields: NewPartRegistrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NewPartRegistration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewPartRegistrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    part<T extends SparePartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SparePartDefaultArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    asset<T extends NewPartRegistration$assetArgs<ExtArgs> = {}>(args?: Subset<T, NewPartRegistration$assetArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    registeredBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NewPartRegistration model
   */ 
  interface NewPartRegistrationFieldRefs {
    readonly id: FieldRef<"NewPartRegistration", 'String'>
    readonly registrationNumber: FieldRef<"NewPartRegistration", 'String'>
    readonly serialNumber: FieldRef<"NewPartRegistration", 'String'>
    readonly assetTag: FieldRef<"NewPartRegistration", 'String'>
    readonly status: FieldRef<"NewPartRegistration", 'RegistrationStatus'>
    readonly registeredDate: FieldRef<"NewPartRegistration", 'DateTime'>
    readonly notes: FieldRef<"NewPartRegistration", 'String'>
    readonly partId: FieldRef<"NewPartRegistration", 'String'>
    readonly assetId: FieldRef<"NewPartRegistration", 'String'>
    readonly registeredById: FieldRef<"NewPartRegistration", 'String'>
    readonly createdAt: FieldRef<"NewPartRegistration", 'DateTime'>
    readonly updatedAt: FieldRef<"NewPartRegistration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NewPartRegistration findUnique
   */
  export type NewPartRegistrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which NewPartRegistration to fetch.
     */
    where: NewPartRegistrationWhereUniqueInput
  }

  /**
   * NewPartRegistration findUniqueOrThrow
   */
  export type NewPartRegistrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which NewPartRegistration to fetch.
     */
    where: NewPartRegistrationWhereUniqueInput
  }

  /**
   * NewPartRegistration findFirst
   */
  export type NewPartRegistrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which NewPartRegistration to fetch.
     */
    where?: NewPartRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewPartRegistrations to fetch.
     */
    orderBy?: NewPartRegistrationOrderByWithRelationInput | NewPartRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewPartRegistrations.
     */
    cursor?: NewPartRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewPartRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewPartRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewPartRegistrations.
     */
    distinct?: NewPartRegistrationScalarFieldEnum | NewPartRegistrationScalarFieldEnum[]
  }

  /**
   * NewPartRegistration findFirstOrThrow
   */
  export type NewPartRegistrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which NewPartRegistration to fetch.
     */
    where?: NewPartRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewPartRegistrations to fetch.
     */
    orderBy?: NewPartRegistrationOrderByWithRelationInput | NewPartRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewPartRegistrations.
     */
    cursor?: NewPartRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewPartRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewPartRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewPartRegistrations.
     */
    distinct?: NewPartRegistrationScalarFieldEnum | NewPartRegistrationScalarFieldEnum[]
  }

  /**
   * NewPartRegistration findMany
   */
  export type NewPartRegistrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which NewPartRegistrations to fetch.
     */
    where?: NewPartRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewPartRegistrations to fetch.
     */
    orderBy?: NewPartRegistrationOrderByWithRelationInput | NewPartRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NewPartRegistrations.
     */
    cursor?: NewPartRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewPartRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewPartRegistrations.
     */
    skip?: number
    distinct?: NewPartRegistrationScalarFieldEnum | NewPartRegistrationScalarFieldEnum[]
  }

  /**
   * NewPartRegistration create
   */
  export type NewPartRegistrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
    /**
     * The data needed to create a NewPartRegistration.
     */
    data: XOR<NewPartRegistrationCreateInput, NewPartRegistrationUncheckedCreateInput>
  }

  /**
   * NewPartRegistration createMany
   */
  export type NewPartRegistrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NewPartRegistrations.
     */
    data: NewPartRegistrationCreateManyInput | NewPartRegistrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NewPartRegistration createManyAndReturn
   */
  export type NewPartRegistrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NewPartRegistrations.
     */
    data: NewPartRegistrationCreateManyInput | NewPartRegistrationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NewPartRegistration update
   */
  export type NewPartRegistrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
    /**
     * The data needed to update a NewPartRegistration.
     */
    data: XOR<NewPartRegistrationUpdateInput, NewPartRegistrationUncheckedUpdateInput>
    /**
     * Choose, which NewPartRegistration to update.
     */
    where: NewPartRegistrationWhereUniqueInput
  }

  /**
   * NewPartRegistration updateMany
   */
  export type NewPartRegistrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NewPartRegistrations.
     */
    data: XOR<NewPartRegistrationUpdateManyMutationInput, NewPartRegistrationUncheckedUpdateManyInput>
    /**
     * Filter which NewPartRegistrations to update
     */
    where?: NewPartRegistrationWhereInput
  }

  /**
   * NewPartRegistration upsert
   */
  export type NewPartRegistrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
    /**
     * The filter to search for the NewPartRegistration to update in case it exists.
     */
    where: NewPartRegistrationWhereUniqueInput
    /**
     * In case the NewPartRegistration found by the `where` argument doesn't exist, create a new NewPartRegistration with this data.
     */
    create: XOR<NewPartRegistrationCreateInput, NewPartRegistrationUncheckedCreateInput>
    /**
     * In case the NewPartRegistration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewPartRegistrationUpdateInput, NewPartRegistrationUncheckedUpdateInput>
  }

  /**
   * NewPartRegistration delete
   */
  export type NewPartRegistrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
    /**
     * Filter which NewPartRegistration to delete.
     */
    where: NewPartRegistrationWhereUniqueInput
  }

  /**
   * NewPartRegistration deleteMany
   */
  export type NewPartRegistrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewPartRegistrations to delete
     */
    where?: NewPartRegistrationWhereInput
  }

  /**
   * NewPartRegistration.asset
   */
  export type NewPartRegistration$assetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * NewPartRegistration without action
   */
  export type NewPartRegistrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewPartRegistration
     */
    select?: NewPartRegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewPartRegistrationInclude<ExtArgs> | null
  }


  /**
   * Model AssetComponent
   */

  export type AggregateAssetComponent = {
    _count: AssetComponentCountAggregateOutputType | null
    _avg: AssetComponentAvgAggregateOutputType | null
    _sum: AssetComponentSumAggregateOutputType | null
    _min: AssetComponentMinAggregateOutputType | null
    _max: AssetComponentMaxAggregateOutputType | null
  }

  export type AssetComponentAvgAggregateOutputType = {
    purchasePrice: Decimal | null
  }

  export type AssetComponentSumAggregateOutputType = {
    purchasePrice: Decimal | null
  }

  export type AssetComponentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    partNumber: string | null
    serialNumber: string | null
    brand: string | null
    model: string | null
    status: $Enums.ComponentStatus | null
    purchaseDate: Date | null
    purchasePrice: Decimal | null
    warrantyExpiry: Date | null
    isReplaceable: boolean | null
    isTransferable: boolean | null
    notes: string | null
    assetId: string | null
    parentAssetId: string | null
    sourcePartId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetComponentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    partNumber: string | null
    serialNumber: string | null
    brand: string | null
    model: string | null
    status: $Enums.ComponentStatus | null
    purchaseDate: Date | null
    purchasePrice: Decimal | null
    warrantyExpiry: Date | null
    isReplaceable: boolean | null
    isTransferable: boolean | null
    notes: string | null
    assetId: string | null
    parentAssetId: string | null
    sourcePartId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetComponentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    partNumber: number
    serialNumber: number
    brand: number
    model: number
    status: number
    purchaseDate: number
    purchasePrice: number
    warrantyExpiry: number
    isReplaceable: number
    isTransferable: number
    notes: number
    specifications: number
    assetId: number
    parentAssetId: number
    sourcePartId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssetComponentAvgAggregateInputType = {
    purchasePrice?: true
  }

  export type AssetComponentSumAggregateInputType = {
    purchasePrice?: true
  }

  export type AssetComponentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    partNumber?: true
    serialNumber?: true
    brand?: true
    model?: true
    status?: true
    purchaseDate?: true
    purchasePrice?: true
    warrantyExpiry?: true
    isReplaceable?: true
    isTransferable?: true
    notes?: true
    assetId?: true
    parentAssetId?: true
    sourcePartId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetComponentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    partNumber?: true
    serialNumber?: true
    brand?: true
    model?: true
    status?: true
    purchaseDate?: true
    purchasePrice?: true
    warrantyExpiry?: true
    isReplaceable?: true
    isTransferable?: true
    notes?: true
    assetId?: true
    parentAssetId?: true
    sourcePartId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetComponentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    partNumber?: true
    serialNumber?: true
    brand?: true
    model?: true
    status?: true
    purchaseDate?: true
    purchasePrice?: true
    warrantyExpiry?: true
    isReplaceable?: true
    isTransferable?: true
    notes?: true
    specifications?: true
    assetId?: true
    parentAssetId?: true
    sourcePartId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssetComponentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetComponent to aggregate.
     */
    where?: AssetComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetComponents to fetch.
     */
    orderBy?: AssetComponentOrderByWithRelationInput | AssetComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetComponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssetComponents
    **/
    _count?: true | AssetComponentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetComponentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetComponentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetComponentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetComponentMaxAggregateInputType
  }

  export type GetAssetComponentAggregateType<T extends AssetComponentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssetComponent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssetComponent[P]>
      : GetScalarType<T[P], AggregateAssetComponent[P]>
  }




  export type AssetComponentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetComponentWhereInput
    orderBy?: AssetComponentOrderByWithAggregationInput | AssetComponentOrderByWithAggregationInput[]
    by: AssetComponentScalarFieldEnum[] | AssetComponentScalarFieldEnum
    having?: AssetComponentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetComponentCountAggregateInputType | true
    _avg?: AssetComponentAvgAggregateInputType
    _sum?: AssetComponentSumAggregateInputType
    _min?: AssetComponentMinAggregateInputType
    _max?: AssetComponentMaxAggregateInputType
  }

  export type AssetComponentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    partNumber: string | null
    serialNumber: string | null
    brand: string | null
    model: string | null
    status: $Enums.ComponentStatus
    purchaseDate: Date | null
    purchasePrice: Decimal | null
    warrantyExpiry: Date | null
    isReplaceable: boolean
    isTransferable: boolean
    notes: string | null
    specifications: JsonValue | null
    assetId: string
    parentAssetId: string | null
    sourcePartId: string | null
    createdAt: Date
    updatedAt: Date
    _count: AssetComponentCountAggregateOutputType | null
    _avg: AssetComponentAvgAggregateOutputType | null
    _sum: AssetComponentSumAggregateOutputType | null
    _min: AssetComponentMinAggregateOutputType | null
    _max: AssetComponentMaxAggregateOutputType | null
  }

  type GetAssetComponentGroupByPayload<T extends AssetComponentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetComponentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetComponentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetComponentGroupByOutputType[P]>
            : GetScalarType<T[P], AssetComponentGroupByOutputType[P]>
        }
      >
    >


  export type AssetComponentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    partNumber?: boolean
    serialNumber?: boolean
    brand?: boolean
    model?: boolean
    status?: boolean
    purchaseDate?: boolean
    purchasePrice?: boolean
    warrantyExpiry?: boolean
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: boolean
    specifications?: boolean
    assetId?: boolean
    parentAssetId?: boolean
    sourcePartId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    parentAsset?: boolean | AssetComponent$parentAssetArgs<ExtArgs>
    sourcePart?: boolean | AssetComponent$sourcePartArgs<ExtArgs>
    usages?: boolean | AssetComponent$usagesArgs<ExtArgs>
    replacements?: boolean | AssetComponent$replacementsArgs<ExtArgs>
    transfers?: boolean | AssetComponent$transfersArgs<ExtArgs>
    maintenanceRecords?: boolean | AssetComponent$maintenanceRecordsArgs<ExtArgs>
    _count?: boolean | AssetComponentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetComponent"]>

  export type AssetComponentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    partNumber?: boolean
    serialNumber?: boolean
    brand?: boolean
    model?: boolean
    status?: boolean
    purchaseDate?: boolean
    purchasePrice?: boolean
    warrantyExpiry?: boolean
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: boolean
    specifications?: boolean
    assetId?: boolean
    parentAssetId?: boolean
    sourcePartId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    parentAsset?: boolean | AssetComponent$parentAssetArgs<ExtArgs>
    sourcePart?: boolean | AssetComponent$sourcePartArgs<ExtArgs>
  }, ExtArgs["result"]["assetComponent"]>

  export type AssetComponentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    partNumber?: boolean
    serialNumber?: boolean
    brand?: boolean
    model?: boolean
    status?: boolean
    purchaseDate?: boolean
    purchasePrice?: boolean
    warrantyExpiry?: boolean
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: boolean
    specifications?: boolean
    assetId?: boolean
    parentAssetId?: boolean
    sourcePartId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssetComponentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    parentAsset?: boolean | AssetComponent$parentAssetArgs<ExtArgs>
    sourcePart?: boolean | AssetComponent$sourcePartArgs<ExtArgs>
    usages?: boolean | AssetComponent$usagesArgs<ExtArgs>
    replacements?: boolean | AssetComponent$replacementsArgs<ExtArgs>
    transfers?: boolean | AssetComponent$transfersArgs<ExtArgs>
    maintenanceRecords?: boolean | AssetComponent$maintenanceRecordsArgs<ExtArgs>
    _count?: boolean | AssetComponentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssetComponentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    parentAsset?: boolean | AssetComponent$parentAssetArgs<ExtArgs>
    sourcePart?: boolean | AssetComponent$sourcePartArgs<ExtArgs>
  }

  export type $AssetComponentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssetComponent"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs>
      parentAsset: Prisma.$AssetPayload<ExtArgs> | null
      sourcePart: Prisma.$SparePartPayload<ExtArgs> | null
      usages: Prisma.$PartUsagePayload<ExtArgs>[]
      replacements: Prisma.$PartReplacementPayload<ExtArgs>[]
      transfers: Prisma.$ComponentTransferPayload<ExtArgs>[]
      maintenanceRecords: Prisma.$ComponentMaintenancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      partNumber: string | null
      serialNumber: string | null
      brand: string | null
      model: string | null
      status: $Enums.ComponentStatus
      purchaseDate: Date | null
      purchasePrice: Prisma.Decimal | null
      warrantyExpiry: Date | null
      isReplaceable: boolean
      isTransferable: boolean
      notes: string | null
      specifications: Prisma.JsonValue | null
      assetId: string
      parentAssetId: string | null
      sourcePartId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["assetComponent"]>
    composites: {}
  }

  type AssetComponentGetPayload<S extends boolean | null | undefined | AssetComponentDefaultArgs> = $Result.GetResult<Prisma.$AssetComponentPayload, S>

  type AssetComponentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssetComponentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssetComponentCountAggregateInputType | true
    }

  export interface AssetComponentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetComponent'], meta: { name: 'AssetComponent' } }
    /**
     * Find zero or one AssetComponent that matches the filter.
     * @param {AssetComponentFindUniqueArgs} args - Arguments to find a AssetComponent
     * @example
     * // Get one AssetComponent
     * const assetComponent = await prisma.assetComponent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetComponentFindUniqueArgs>(args: SelectSubset<T, AssetComponentFindUniqueArgs<ExtArgs>>): Prisma__AssetComponentClient<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AssetComponent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssetComponentFindUniqueOrThrowArgs} args - Arguments to find a AssetComponent
     * @example
     * // Get one AssetComponent
     * const assetComponent = await prisma.assetComponent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetComponentFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetComponentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetComponentClient<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AssetComponent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetComponentFindFirstArgs} args - Arguments to find a AssetComponent
     * @example
     * // Get one AssetComponent
     * const assetComponent = await prisma.assetComponent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetComponentFindFirstArgs>(args?: SelectSubset<T, AssetComponentFindFirstArgs<ExtArgs>>): Prisma__AssetComponentClient<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AssetComponent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetComponentFindFirstOrThrowArgs} args - Arguments to find a AssetComponent
     * @example
     * // Get one AssetComponent
     * const assetComponent = await prisma.assetComponent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetComponentFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetComponentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetComponentClient<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AssetComponents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetComponentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssetComponents
     * const assetComponents = await prisma.assetComponent.findMany()
     * 
     * // Get first 10 AssetComponents
     * const assetComponents = await prisma.assetComponent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetComponentWithIdOnly = await prisma.assetComponent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetComponentFindManyArgs>(args?: SelectSubset<T, AssetComponentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AssetComponent.
     * @param {AssetComponentCreateArgs} args - Arguments to create a AssetComponent.
     * @example
     * // Create one AssetComponent
     * const AssetComponent = await prisma.assetComponent.create({
     *   data: {
     *     // ... data to create a AssetComponent
     *   }
     * })
     * 
     */
    create<T extends AssetComponentCreateArgs>(args: SelectSubset<T, AssetComponentCreateArgs<ExtArgs>>): Prisma__AssetComponentClient<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AssetComponents.
     * @param {AssetComponentCreateManyArgs} args - Arguments to create many AssetComponents.
     * @example
     * // Create many AssetComponents
     * const assetComponent = await prisma.assetComponent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetComponentCreateManyArgs>(args?: SelectSubset<T, AssetComponentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssetComponents and returns the data saved in the database.
     * @param {AssetComponentCreateManyAndReturnArgs} args - Arguments to create many AssetComponents.
     * @example
     * // Create many AssetComponents
     * const assetComponent = await prisma.assetComponent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssetComponents and only return the `id`
     * const assetComponentWithIdOnly = await prisma.assetComponent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetComponentCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetComponentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AssetComponent.
     * @param {AssetComponentDeleteArgs} args - Arguments to delete one AssetComponent.
     * @example
     * // Delete one AssetComponent
     * const AssetComponent = await prisma.assetComponent.delete({
     *   where: {
     *     // ... filter to delete one AssetComponent
     *   }
     * })
     * 
     */
    delete<T extends AssetComponentDeleteArgs>(args: SelectSubset<T, AssetComponentDeleteArgs<ExtArgs>>): Prisma__AssetComponentClient<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AssetComponent.
     * @param {AssetComponentUpdateArgs} args - Arguments to update one AssetComponent.
     * @example
     * // Update one AssetComponent
     * const assetComponent = await prisma.assetComponent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetComponentUpdateArgs>(args: SelectSubset<T, AssetComponentUpdateArgs<ExtArgs>>): Prisma__AssetComponentClient<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AssetComponents.
     * @param {AssetComponentDeleteManyArgs} args - Arguments to filter AssetComponents to delete.
     * @example
     * // Delete a few AssetComponents
     * const { count } = await prisma.assetComponent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetComponentDeleteManyArgs>(args?: SelectSubset<T, AssetComponentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetComponentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssetComponents
     * const assetComponent = await prisma.assetComponent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetComponentUpdateManyArgs>(args: SelectSubset<T, AssetComponentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AssetComponent.
     * @param {AssetComponentUpsertArgs} args - Arguments to update or create a AssetComponent.
     * @example
     * // Update or create a AssetComponent
     * const assetComponent = await prisma.assetComponent.upsert({
     *   create: {
     *     // ... data to create a AssetComponent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssetComponent we want to update
     *   }
     * })
     */
    upsert<T extends AssetComponentUpsertArgs>(args: SelectSubset<T, AssetComponentUpsertArgs<ExtArgs>>): Prisma__AssetComponentClient<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AssetComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetComponentCountArgs} args - Arguments to filter AssetComponents to count.
     * @example
     * // Count the number of AssetComponents
     * const count = await prisma.assetComponent.count({
     *   where: {
     *     // ... the filter for the AssetComponents we want to count
     *   }
     * })
    **/
    count<T extends AssetComponentCountArgs>(
      args?: Subset<T, AssetComponentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetComponentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssetComponent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetComponentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetComponentAggregateArgs>(args: Subset<T, AssetComponentAggregateArgs>): Prisma.PrismaPromise<GetAssetComponentAggregateType<T>>

    /**
     * Group by AssetComponent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetComponentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetComponentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetComponentGroupByArgs['orderBy'] }
        : { orderBy?: AssetComponentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetComponentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetComponentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssetComponent model
   */
  readonly fields: AssetComponentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssetComponent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetComponentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    parentAsset<T extends AssetComponent$parentAssetArgs<ExtArgs> = {}>(args?: Subset<T, AssetComponent$parentAssetArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sourcePart<T extends AssetComponent$sourcePartArgs<ExtArgs> = {}>(args?: Subset<T, AssetComponent$sourcePartArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    usages<T extends AssetComponent$usagesArgs<ExtArgs> = {}>(args?: Subset<T, AssetComponent$usagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartUsagePayload<ExtArgs>, T, "findMany"> | Null>
    replacements<T extends AssetComponent$replacementsArgs<ExtArgs> = {}>(args?: Subset<T, AssetComponent$replacementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartReplacementPayload<ExtArgs>, T, "findMany"> | Null>
    transfers<T extends AssetComponent$transfersArgs<ExtArgs> = {}>(args?: Subset<T, AssetComponent$transfersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "findMany"> | Null>
    maintenanceRecords<T extends AssetComponent$maintenanceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, AssetComponent$maintenanceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentMaintenancePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssetComponent model
   */ 
  interface AssetComponentFieldRefs {
    readonly id: FieldRef<"AssetComponent", 'String'>
    readonly name: FieldRef<"AssetComponent", 'String'>
    readonly description: FieldRef<"AssetComponent", 'String'>
    readonly partNumber: FieldRef<"AssetComponent", 'String'>
    readonly serialNumber: FieldRef<"AssetComponent", 'String'>
    readonly brand: FieldRef<"AssetComponent", 'String'>
    readonly model: FieldRef<"AssetComponent", 'String'>
    readonly status: FieldRef<"AssetComponent", 'ComponentStatus'>
    readonly purchaseDate: FieldRef<"AssetComponent", 'DateTime'>
    readonly purchasePrice: FieldRef<"AssetComponent", 'Decimal'>
    readonly warrantyExpiry: FieldRef<"AssetComponent", 'DateTime'>
    readonly isReplaceable: FieldRef<"AssetComponent", 'Boolean'>
    readonly isTransferable: FieldRef<"AssetComponent", 'Boolean'>
    readonly notes: FieldRef<"AssetComponent", 'String'>
    readonly specifications: FieldRef<"AssetComponent", 'Json'>
    readonly assetId: FieldRef<"AssetComponent", 'String'>
    readonly parentAssetId: FieldRef<"AssetComponent", 'String'>
    readonly sourcePartId: FieldRef<"AssetComponent", 'String'>
    readonly createdAt: FieldRef<"AssetComponent", 'DateTime'>
    readonly updatedAt: FieldRef<"AssetComponent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AssetComponent findUnique
   */
  export type AssetComponentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    /**
     * Filter, which AssetComponent to fetch.
     */
    where: AssetComponentWhereUniqueInput
  }

  /**
   * AssetComponent findUniqueOrThrow
   */
  export type AssetComponentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    /**
     * Filter, which AssetComponent to fetch.
     */
    where: AssetComponentWhereUniqueInput
  }

  /**
   * AssetComponent findFirst
   */
  export type AssetComponentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    /**
     * Filter, which AssetComponent to fetch.
     */
    where?: AssetComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetComponents to fetch.
     */
    orderBy?: AssetComponentOrderByWithRelationInput | AssetComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetComponents.
     */
    cursor?: AssetComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetComponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetComponents.
     */
    distinct?: AssetComponentScalarFieldEnum | AssetComponentScalarFieldEnum[]
  }

  /**
   * AssetComponent findFirstOrThrow
   */
  export type AssetComponentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    /**
     * Filter, which AssetComponent to fetch.
     */
    where?: AssetComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetComponents to fetch.
     */
    orderBy?: AssetComponentOrderByWithRelationInput | AssetComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetComponents.
     */
    cursor?: AssetComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetComponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetComponents.
     */
    distinct?: AssetComponentScalarFieldEnum | AssetComponentScalarFieldEnum[]
  }

  /**
   * AssetComponent findMany
   */
  export type AssetComponentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    /**
     * Filter, which AssetComponents to fetch.
     */
    where?: AssetComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetComponents to fetch.
     */
    orderBy?: AssetComponentOrderByWithRelationInput | AssetComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssetComponents.
     */
    cursor?: AssetComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetComponents.
     */
    skip?: number
    distinct?: AssetComponentScalarFieldEnum | AssetComponentScalarFieldEnum[]
  }

  /**
   * AssetComponent create
   */
  export type AssetComponentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    /**
     * The data needed to create a AssetComponent.
     */
    data: XOR<AssetComponentCreateInput, AssetComponentUncheckedCreateInput>
  }

  /**
   * AssetComponent createMany
   */
  export type AssetComponentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssetComponents.
     */
    data: AssetComponentCreateManyInput | AssetComponentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssetComponent createManyAndReturn
   */
  export type AssetComponentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AssetComponents.
     */
    data: AssetComponentCreateManyInput | AssetComponentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetComponent update
   */
  export type AssetComponentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    /**
     * The data needed to update a AssetComponent.
     */
    data: XOR<AssetComponentUpdateInput, AssetComponentUncheckedUpdateInput>
    /**
     * Choose, which AssetComponent to update.
     */
    where: AssetComponentWhereUniqueInput
  }

  /**
   * AssetComponent updateMany
   */
  export type AssetComponentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssetComponents.
     */
    data: XOR<AssetComponentUpdateManyMutationInput, AssetComponentUncheckedUpdateManyInput>
    /**
     * Filter which AssetComponents to update
     */
    where?: AssetComponentWhereInput
  }

  /**
   * AssetComponent upsert
   */
  export type AssetComponentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    /**
     * The filter to search for the AssetComponent to update in case it exists.
     */
    where: AssetComponentWhereUniqueInput
    /**
     * In case the AssetComponent found by the `where` argument doesn't exist, create a new AssetComponent with this data.
     */
    create: XOR<AssetComponentCreateInput, AssetComponentUncheckedCreateInput>
    /**
     * In case the AssetComponent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetComponentUpdateInput, AssetComponentUncheckedUpdateInput>
  }

  /**
   * AssetComponent delete
   */
  export type AssetComponentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
    /**
     * Filter which AssetComponent to delete.
     */
    where: AssetComponentWhereUniqueInput
  }

  /**
   * AssetComponent deleteMany
   */
  export type AssetComponentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetComponents to delete
     */
    where?: AssetComponentWhereInput
  }

  /**
   * AssetComponent.parentAsset
   */
  export type AssetComponent$parentAssetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * AssetComponent.sourcePart
   */
  export type AssetComponent$sourcePartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    where?: SparePartWhereInput
  }

  /**
   * AssetComponent.usages
   */
  export type AssetComponent$usagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartUsage
     */
    select?: PartUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartUsageInclude<ExtArgs> | null
    where?: PartUsageWhereInput
    orderBy?: PartUsageOrderByWithRelationInput | PartUsageOrderByWithRelationInput[]
    cursor?: PartUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartUsageScalarFieldEnum | PartUsageScalarFieldEnum[]
  }

  /**
   * AssetComponent.replacements
   */
  export type AssetComponent$replacementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartReplacement
     */
    select?: PartReplacementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartReplacementInclude<ExtArgs> | null
    where?: PartReplacementWhereInput
    orderBy?: PartReplacementOrderByWithRelationInput | PartReplacementOrderByWithRelationInput[]
    cursor?: PartReplacementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartReplacementScalarFieldEnum | PartReplacementScalarFieldEnum[]
  }

  /**
   * AssetComponent.transfers
   */
  export type AssetComponent$transfersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    where?: ComponentTransferWhereInput
    orderBy?: ComponentTransferOrderByWithRelationInput | ComponentTransferOrderByWithRelationInput[]
    cursor?: ComponentTransferWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentTransferScalarFieldEnum | ComponentTransferScalarFieldEnum[]
  }

  /**
   * AssetComponent.maintenanceRecords
   */
  export type AssetComponent$maintenanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceInclude<ExtArgs> | null
    where?: ComponentMaintenanceWhereInput
    orderBy?: ComponentMaintenanceOrderByWithRelationInput | ComponentMaintenanceOrderByWithRelationInput[]
    cursor?: ComponentMaintenanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentMaintenanceScalarFieldEnum | ComponentMaintenanceScalarFieldEnum[]
  }

  /**
   * AssetComponent without action
   */
  export type AssetComponentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComponent
     */
    select?: AssetComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetComponentInclude<ExtArgs> | null
  }


  /**
   * Model ComponentTransfer
   */

  export type AggregateComponentTransfer = {
    _count: ComponentTransferCountAggregateOutputType | null
    _min: ComponentTransferMinAggregateOutputType | null
    _max: ComponentTransferMaxAggregateOutputType | null
  }

  export type ComponentTransferMinAggregateOutputType = {
    id: string | null
    transferNumber: string | null
    reason: string | null
    transferDate: Date | null
    notes: string | null
    componentId: string | null
    fromAssetId: string | null
    toAssetId: string | null
    transferredById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ComponentTransferMaxAggregateOutputType = {
    id: string | null
    transferNumber: string | null
    reason: string | null
    transferDate: Date | null
    notes: string | null
    componentId: string | null
    fromAssetId: string | null
    toAssetId: string | null
    transferredById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ComponentTransferCountAggregateOutputType = {
    id: number
    transferNumber: number
    reason: number
    transferDate: number
    notes: number
    componentId: number
    fromAssetId: number
    toAssetId: number
    transferredById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ComponentTransferMinAggregateInputType = {
    id?: true
    transferNumber?: true
    reason?: true
    transferDate?: true
    notes?: true
    componentId?: true
    fromAssetId?: true
    toAssetId?: true
    transferredById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ComponentTransferMaxAggregateInputType = {
    id?: true
    transferNumber?: true
    reason?: true
    transferDate?: true
    notes?: true
    componentId?: true
    fromAssetId?: true
    toAssetId?: true
    transferredById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ComponentTransferCountAggregateInputType = {
    id?: true
    transferNumber?: true
    reason?: true
    transferDate?: true
    notes?: true
    componentId?: true
    fromAssetId?: true
    toAssetId?: true
    transferredById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ComponentTransferAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentTransfer to aggregate.
     */
    where?: ComponentTransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentTransfers to fetch.
     */
    orderBy?: ComponentTransferOrderByWithRelationInput | ComponentTransferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComponentTransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentTransfers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentTransfers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComponentTransfers
    **/
    _count?: true | ComponentTransferCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComponentTransferMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComponentTransferMaxAggregateInputType
  }

  export type GetComponentTransferAggregateType<T extends ComponentTransferAggregateArgs> = {
        [P in keyof T & keyof AggregateComponentTransfer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComponentTransfer[P]>
      : GetScalarType<T[P], AggregateComponentTransfer[P]>
  }




  export type ComponentTransferGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentTransferWhereInput
    orderBy?: ComponentTransferOrderByWithAggregationInput | ComponentTransferOrderByWithAggregationInput[]
    by: ComponentTransferScalarFieldEnum[] | ComponentTransferScalarFieldEnum
    having?: ComponentTransferScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComponentTransferCountAggregateInputType | true
    _min?: ComponentTransferMinAggregateInputType
    _max?: ComponentTransferMaxAggregateInputType
  }

  export type ComponentTransferGroupByOutputType = {
    id: string
    transferNumber: string
    reason: string
    transferDate: Date
    notes: string | null
    componentId: string
    fromAssetId: string
    toAssetId: string
    transferredById: string
    createdAt: Date
    updatedAt: Date
    _count: ComponentTransferCountAggregateOutputType | null
    _min: ComponentTransferMinAggregateOutputType | null
    _max: ComponentTransferMaxAggregateOutputType | null
  }

  type GetComponentTransferGroupByPayload<T extends ComponentTransferGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComponentTransferGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComponentTransferGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComponentTransferGroupByOutputType[P]>
            : GetScalarType<T[P], ComponentTransferGroupByOutputType[P]>
        }
      >
    >


  export type ComponentTransferSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transferNumber?: boolean
    reason?: boolean
    transferDate?: boolean
    notes?: boolean
    componentId?: boolean
    fromAssetId?: boolean
    toAssetId?: boolean
    transferredById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    component?: boolean | AssetComponentDefaultArgs<ExtArgs>
    fromAsset?: boolean | AssetDefaultArgs<ExtArgs>
    toAsset?: boolean | AssetDefaultArgs<ExtArgs>
    transferredBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentTransfer"]>

  export type ComponentTransferSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transferNumber?: boolean
    reason?: boolean
    transferDate?: boolean
    notes?: boolean
    componentId?: boolean
    fromAssetId?: boolean
    toAssetId?: boolean
    transferredById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    component?: boolean | AssetComponentDefaultArgs<ExtArgs>
    fromAsset?: boolean | AssetDefaultArgs<ExtArgs>
    toAsset?: boolean | AssetDefaultArgs<ExtArgs>
    transferredBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentTransfer"]>

  export type ComponentTransferSelectScalar = {
    id?: boolean
    transferNumber?: boolean
    reason?: boolean
    transferDate?: boolean
    notes?: boolean
    componentId?: boolean
    fromAssetId?: boolean
    toAssetId?: boolean
    transferredById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ComponentTransferInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    component?: boolean | AssetComponentDefaultArgs<ExtArgs>
    fromAsset?: boolean | AssetDefaultArgs<ExtArgs>
    toAsset?: boolean | AssetDefaultArgs<ExtArgs>
    transferredBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ComponentTransferIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    component?: boolean | AssetComponentDefaultArgs<ExtArgs>
    fromAsset?: boolean | AssetDefaultArgs<ExtArgs>
    toAsset?: boolean | AssetDefaultArgs<ExtArgs>
    transferredBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ComponentTransferPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComponentTransfer"
    objects: {
      component: Prisma.$AssetComponentPayload<ExtArgs>
      fromAsset: Prisma.$AssetPayload<ExtArgs>
      toAsset: Prisma.$AssetPayload<ExtArgs>
      transferredBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      transferNumber: string
      reason: string
      transferDate: Date
      notes: string | null
      componentId: string
      fromAssetId: string
      toAssetId: string
      transferredById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["componentTransfer"]>
    composites: {}
  }

  type ComponentTransferGetPayload<S extends boolean | null | undefined | ComponentTransferDefaultArgs> = $Result.GetResult<Prisma.$ComponentTransferPayload, S>

  type ComponentTransferCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ComponentTransferFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ComponentTransferCountAggregateInputType | true
    }

  export interface ComponentTransferDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComponentTransfer'], meta: { name: 'ComponentTransfer' } }
    /**
     * Find zero or one ComponentTransfer that matches the filter.
     * @param {ComponentTransferFindUniqueArgs} args - Arguments to find a ComponentTransfer
     * @example
     * // Get one ComponentTransfer
     * const componentTransfer = await prisma.componentTransfer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComponentTransferFindUniqueArgs>(args: SelectSubset<T, ComponentTransferFindUniqueArgs<ExtArgs>>): Prisma__ComponentTransferClient<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ComponentTransfer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ComponentTransferFindUniqueOrThrowArgs} args - Arguments to find a ComponentTransfer
     * @example
     * // Get one ComponentTransfer
     * const componentTransfer = await prisma.componentTransfer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComponentTransferFindUniqueOrThrowArgs>(args: SelectSubset<T, ComponentTransferFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComponentTransferClient<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ComponentTransfer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTransferFindFirstArgs} args - Arguments to find a ComponentTransfer
     * @example
     * // Get one ComponentTransfer
     * const componentTransfer = await prisma.componentTransfer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComponentTransferFindFirstArgs>(args?: SelectSubset<T, ComponentTransferFindFirstArgs<ExtArgs>>): Prisma__ComponentTransferClient<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ComponentTransfer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTransferFindFirstOrThrowArgs} args - Arguments to find a ComponentTransfer
     * @example
     * // Get one ComponentTransfer
     * const componentTransfer = await prisma.componentTransfer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComponentTransferFindFirstOrThrowArgs>(args?: SelectSubset<T, ComponentTransferFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComponentTransferClient<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ComponentTransfers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTransferFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComponentTransfers
     * const componentTransfers = await prisma.componentTransfer.findMany()
     * 
     * // Get first 10 ComponentTransfers
     * const componentTransfers = await prisma.componentTransfer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const componentTransferWithIdOnly = await prisma.componentTransfer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComponentTransferFindManyArgs>(args?: SelectSubset<T, ComponentTransferFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ComponentTransfer.
     * @param {ComponentTransferCreateArgs} args - Arguments to create a ComponentTransfer.
     * @example
     * // Create one ComponentTransfer
     * const ComponentTransfer = await prisma.componentTransfer.create({
     *   data: {
     *     // ... data to create a ComponentTransfer
     *   }
     * })
     * 
     */
    create<T extends ComponentTransferCreateArgs>(args: SelectSubset<T, ComponentTransferCreateArgs<ExtArgs>>): Prisma__ComponentTransferClient<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ComponentTransfers.
     * @param {ComponentTransferCreateManyArgs} args - Arguments to create many ComponentTransfers.
     * @example
     * // Create many ComponentTransfers
     * const componentTransfer = await prisma.componentTransfer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComponentTransferCreateManyArgs>(args?: SelectSubset<T, ComponentTransferCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ComponentTransfers and returns the data saved in the database.
     * @param {ComponentTransferCreateManyAndReturnArgs} args - Arguments to create many ComponentTransfers.
     * @example
     * // Create many ComponentTransfers
     * const componentTransfer = await prisma.componentTransfer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ComponentTransfers and only return the `id`
     * const componentTransferWithIdOnly = await prisma.componentTransfer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComponentTransferCreateManyAndReturnArgs>(args?: SelectSubset<T, ComponentTransferCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ComponentTransfer.
     * @param {ComponentTransferDeleteArgs} args - Arguments to delete one ComponentTransfer.
     * @example
     * // Delete one ComponentTransfer
     * const ComponentTransfer = await prisma.componentTransfer.delete({
     *   where: {
     *     // ... filter to delete one ComponentTransfer
     *   }
     * })
     * 
     */
    delete<T extends ComponentTransferDeleteArgs>(args: SelectSubset<T, ComponentTransferDeleteArgs<ExtArgs>>): Prisma__ComponentTransferClient<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ComponentTransfer.
     * @param {ComponentTransferUpdateArgs} args - Arguments to update one ComponentTransfer.
     * @example
     * // Update one ComponentTransfer
     * const componentTransfer = await prisma.componentTransfer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComponentTransferUpdateArgs>(args: SelectSubset<T, ComponentTransferUpdateArgs<ExtArgs>>): Prisma__ComponentTransferClient<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ComponentTransfers.
     * @param {ComponentTransferDeleteManyArgs} args - Arguments to filter ComponentTransfers to delete.
     * @example
     * // Delete a few ComponentTransfers
     * const { count } = await prisma.componentTransfer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComponentTransferDeleteManyArgs>(args?: SelectSubset<T, ComponentTransferDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComponentTransfers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTransferUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComponentTransfers
     * const componentTransfer = await prisma.componentTransfer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComponentTransferUpdateManyArgs>(args: SelectSubset<T, ComponentTransferUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ComponentTransfer.
     * @param {ComponentTransferUpsertArgs} args - Arguments to update or create a ComponentTransfer.
     * @example
     * // Update or create a ComponentTransfer
     * const componentTransfer = await prisma.componentTransfer.upsert({
     *   create: {
     *     // ... data to create a ComponentTransfer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComponentTransfer we want to update
     *   }
     * })
     */
    upsert<T extends ComponentTransferUpsertArgs>(args: SelectSubset<T, ComponentTransferUpsertArgs<ExtArgs>>): Prisma__ComponentTransferClient<$Result.GetResult<Prisma.$ComponentTransferPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ComponentTransfers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTransferCountArgs} args - Arguments to filter ComponentTransfers to count.
     * @example
     * // Count the number of ComponentTransfers
     * const count = await prisma.componentTransfer.count({
     *   where: {
     *     // ... the filter for the ComponentTransfers we want to count
     *   }
     * })
    **/
    count<T extends ComponentTransferCountArgs>(
      args?: Subset<T, ComponentTransferCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComponentTransferCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComponentTransfer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTransferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComponentTransferAggregateArgs>(args: Subset<T, ComponentTransferAggregateArgs>): Prisma.PrismaPromise<GetComponentTransferAggregateType<T>>

    /**
     * Group by ComponentTransfer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentTransferGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComponentTransferGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComponentTransferGroupByArgs['orderBy'] }
        : { orderBy?: ComponentTransferGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComponentTransferGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComponentTransferGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComponentTransfer model
   */
  readonly fields: ComponentTransferFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComponentTransfer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComponentTransferClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    component<T extends AssetComponentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetComponentDefaultArgs<ExtArgs>>): Prisma__AssetComponentClient<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fromAsset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    toAsset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    transferredBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComponentTransfer model
   */ 
  interface ComponentTransferFieldRefs {
    readonly id: FieldRef<"ComponentTransfer", 'String'>
    readonly transferNumber: FieldRef<"ComponentTransfer", 'String'>
    readonly reason: FieldRef<"ComponentTransfer", 'String'>
    readonly transferDate: FieldRef<"ComponentTransfer", 'DateTime'>
    readonly notes: FieldRef<"ComponentTransfer", 'String'>
    readonly componentId: FieldRef<"ComponentTransfer", 'String'>
    readonly fromAssetId: FieldRef<"ComponentTransfer", 'String'>
    readonly toAssetId: FieldRef<"ComponentTransfer", 'String'>
    readonly transferredById: FieldRef<"ComponentTransfer", 'String'>
    readonly createdAt: FieldRef<"ComponentTransfer", 'DateTime'>
    readonly updatedAt: FieldRef<"ComponentTransfer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ComponentTransfer findUnique
   */
  export type ComponentTransferFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    /**
     * Filter, which ComponentTransfer to fetch.
     */
    where: ComponentTransferWhereUniqueInput
  }

  /**
   * ComponentTransfer findUniqueOrThrow
   */
  export type ComponentTransferFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    /**
     * Filter, which ComponentTransfer to fetch.
     */
    where: ComponentTransferWhereUniqueInput
  }

  /**
   * ComponentTransfer findFirst
   */
  export type ComponentTransferFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    /**
     * Filter, which ComponentTransfer to fetch.
     */
    where?: ComponentTransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentTransfers to fetch.
     */
    orderBy?: ComponentTransferOrderByWithRelationInput | ComponentTransferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentTransfers.
     */
    cursor?: ComponentTransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentTransfers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentTransfers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentTransfers.
     */
    distinct?: ComponentTransferScalarFieldEnum | ComponentTransferScalarFieldEnum[]
  }

  /**
   * ComponentTransfer findFirstOrThrow
   */
  export type ComponentTransferFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    /**
     * Filter, which ComponentTransfer to fetch.
     */
    where?: ComponentTransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentTransfers to fetch.
     */
    orderBy?: ComponentTransferOrderByWithRelationInput | ComponentTransferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentTransfers.
     */
    cursor?: ComponentTransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentTransfers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentTransfers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentTransfers.
     */
    distinct?: ComponentTransferScalarFieldEnum | ComponentTransferScalarFieldEnum[]
  }

  /**
   * ComponentTransfer findMany
   */
  export type ComponentTransferFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    /**
     * Filter, which ComponentTransfers to fetch.
     */
    where?: ComponentTransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentTransfers to fetch.
     */
    orderBy?: ComponentTransferOrderByWithRelationInput | ComponentTransferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComponentTransfers.
     */
    cursor?: ComponentTransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentTransfers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentTransfers.
     */
    skip?: number
    distinct?: ComponentTransferScalarFieldEnum | ComponentTransferScalarFieldEnum[]
  }

  /**
   * ComponentTransfer create
   */
  export type ComponentTransferCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    /**
     * The data needed to create a ComponentTransfer.
     */
    data: XOR<ComponentTransferCreateInput, ComponentTransferUncheckedCreateInput>
  }

  /**
   * ComponentTransfer createMany
   */
  export type ComponentTransferCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComponentTransfers.
     */
    data: ComponentTransferCreateManyInput | ComponentTransferCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ComponentTransfer createManyAndReturn
   */
  export type ComponentTransferCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ComponentTransfers.
     */
    data: ComponentTransferCreateManyInput | ComponentTransferCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComponentTransfer update
   */
  export type ComponentTransferUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    /**
     * The data needed to update a ComponentTransfer.
     */
    data: XOR<ComponentTransferUpdateInput, ComponentTransferUncheckedUpdateInput>
    /**
     * Choose, which ComponentTransfer to update.
     */
    where: ComponentTransferWhereUniqueInput
  }

  /**
   * ComponentTransfer updateMany
   */
  export type ComponentTransferUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComponentTransfers.
     */
    data: XOR<ComponentTransferUpdateManyMutationInput, ComponentTransferUncheckedUpdateManyInput>
    /**
     * Filter which ComponentTransfers to update
     */
    where?: ComponentTransferWhereInput
  }

  /**
   * ComponentTransfer upsert
   */
  export type ComponentTransferUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    /**
     * The filter to search for the ComponentTransfer to update in case it exists.
     */
    where: ComponentTransferWhereUniqueInput
    /**
     * In case the ComponentTransfer found by the `where` argument doesn't exist, create a new ComponentTransfer with this data.
     */
    create: XOR<ComponentTransferCreateInput, ComponentTransferUncheckedCreateInput>
    /**
     * In case the ComponentTransfer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComponentTransferUpdateInput, ComponentTransferUncheckedUpdateInput>
  }

  /**
   * ComponentTransfer delete
   */
  export type ComponentTransferDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
    /**
     * Filter which ComponentTransfer to delete.
     */
    where: ComponentTransferWhereUniqueInput
  }

  /**
   * ComponentTransfer deleteMany
   */
  export type ComponentTransferDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentTransfers to delete
     */
    where?: ComponentTransferWhereInput
  }

  /**
   * ComponentTransfer without action
   */
  export type ComponentTransferDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentTransfer
     */
    select?: ComponentTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentTransferInclude<ExtArgs> | null
  }


  /**
   * Model ComponentMaintenance
   */

  export type AggregateComponentMaintenance = {
    _count: ComponentMaintenanceCountAggregateOutputType | null
    _avg: ComponentMaintenanceAvgAggregateOutputType | null
    _sum: ComponentMaintenanceSumAggregateOutputType | null
    _min: ComponentMaintenanceMinAggregateOutputType | null
    _max: ComponentMaintenanceMaxAggregateOutputType | null
  }

  export type ComponentMaintenanceAvgAggregateOutputType = {
    cost: Decimal | null
  }

  export type ComponentMaintenanceSumAggregateOutputType = {
    cost: Decimal | null
  }

  export type ComponentMaintenanceMinAggregateOutputType = {
    id: string | null
    description: string | null
    maintenanceType: string | null
    maintenanceDate: Date | null
    cost: Decimal | null
    notes: string | null
    componentId: string | null
    performedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ComponentMaintenanceMaxAggregateOutputType = {
    id: string | null
    description: string | null
    maintenanceType: string | null
    maintenanceDate: Date | null
    cost: Decimal | null
    notes: string | null
    componentId: string | null
    performedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ComponentMaintenanceCountAggregateOutputType = {
    id: number
    description: number
    maintenanceType: number
    maintenanceDate: number
    cost: number
    notes: number
    componentId: number
    performedById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ComponentMaintenanceAvgAggregateInputType = {
    cost?: true
  }

  export type ComponentMaintenanceSumAggregateInputType = {
    cost?: true
  }

  export type ComponentMaintenanceMinAggregateInputType = {
    id?: true
    description?: true
    maintenanceType?: true
    maintenanceDate?: true
    cost?: true
    notes?: true
    componentId?: true
    performedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ComponentMaintenanceMaxAggregateInputType = {
    id?: true
    description?: true
    maintenanceType?: true
    maintenanceDate?: true
    cost?: true
    notes?: true
    componentId?: true
    performedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ComponentMaintenanceCountAggregateInputType = {
    id?: true
    description?: true
    maintenanceType?: true
    maintenanceDate?: true
    cost?: true
    notes?: true
    componentId?: true
    performedById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ComponentMaintenanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentMaintenance to aggregate.
     */
    where?: ComponentMaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentMaintenances to fetch.
     */
    orderBy?: ComponentMaintenanceOrderByWithRelationInput | ComponentMaintenanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComponentMaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentMaintenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentMaintenances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComponentMaintenances
    **/
    _count?: true | ComponentMaintenanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComponentMaintenanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComponentMaintenanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComponentMaintenanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComponentMaintenanceMaxAggregateInputType
  }

  export type GetComponentMaintenanceAggregateType<T extends ComponentMaintenanceAggregateArgs> = {
        [P in keyof T & keyof AggregateComponentMaintenance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComponentMaintenance[P]>
      : GetScalarType<T[P], AggregateComponentMaintenance[P]>
  }




  export type ComponentMaintenanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentMaintenanceWhereInput
    orderBy?: ComponentMaintenanceOrderByWithAggregationInput | ComponentMaintenanceOrderByWithAggregationInput[]
    by: ComponentMaintenanceScalarFieldEnum[] | ComponentMaintenanceScalarFieldEnum
    having?: ComponentMaintenanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComponentMaintenanceCountAggregateInputType | true
    _avg?: ComponentMaintenanceAvgAggregateInputType
    _sum?: ComponentMaintenanceSumAggregateInputType
    _min?: ComponentMaintenanceMinAggregateInputType
    _max?: ComponentMaintenanceMaxAggregateInputType
  }

  export type ComponentMaintenanceGroupByOutputType = {
    id: string
    description: string
    maintenanceType: string
    maintenanceDate: Date
    cost: Decimal | null
    notes: string | null
    componentId: string
    performedById: string
    createdAt: Date
    updatedAt: Date
    _count: ComponentMaintenanceCountAggregateOutputType | null
    _avg: ComponentMaintenanceAvgAggregateOutputType | null
    _sum: ComponentMaintenanceSumAggregateOutputType | null
    _min: ComponentMaintenanceMinAggregateOutputType | null
    _max: ComponentMaintenanceMaxAggregateOutputType | null
  }

  type GetComponentMaintenanceGroupByPayload<T extends ComponentMaintenanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComponentMaintenanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComponentMaintenanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComponentMaintenanceGroupByOutputType[P]>
            : GetScalarType<T[P], ComponentMaintenanceGroupByOutputType[P]>
        }
      >
    >


  export type ComponentMaintenanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    maintenanceType?: boolean
    maintenanceDate?: boolean
    cost?: boolean
    notes?: boolean
    componentId?: boolean
    performedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    component?: boolean | AssetComponentDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentMaintenance"]>

  export type ComponentMaintenanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    maintenanceType?: boolean
    maintenanceDate?: boolean
    cost?: boolean
    notes?: boolean
    componentId?: boolean
    performedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    component?: boolean | AssetComponentDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentMaintenance"]>

  export type ComponentMaintenanceSelectScalar = {
    id?: boolean
    description?: boolean
    maintenanceType?: boolean
    maintenanceDate?: boolean
    cost?: boolean
    notes?: boolean
    componentId?: boolean
    performedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ComponentMaintenanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    component?: boolean | AssetComponentDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ComponentMaintenanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    component?: boolean | AssetComponentDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ComponentMaintenancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComponentMaintenance"
    objects: {
      component: Prisma.$AssetComponentPayload<ExtArgs>
      performedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string
      maintenanceType: string
      maintenanceDate: Date
      cost: Prisma.Decimal | null
      notes: string | null
      componentId: string
      performedById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["componentMaintenance"]>
    composites: {}
  }

  type ComponentMaintenanceGetPayload<S extends boolean | null | undefined | ComponentMaintenanceDefaultArgs> = $Result.GetResult<Prisma.$ComponentMaintenancePayload, S>

  type ComponentMaintenanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ComponentMaintenanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ComponentMaintenanceCountAggregateInputType | true
    }

  export interface ComponentMaintenanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComponentMaintenance'], meta: { name: 'ComponentMaintenance' } }
    /**
     * Find zero or one ComponentMaintenance that matches the filter.
     * @param {ComponentMaintenanceFindUniqueArgs} args - Arguments to find a ComponentMaintenance
     * @example
     * // Get one ComponentMaintenance
     * const componentMaintenance = await prisma.componentMaintenance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComponentMaintenanceFindUniqueArgs>(args: SelectSubset<T, ComponentMaintenanceFindUniqueArgs<ExtArgs>>): Prisma__ComponentMaintenanceClient<$Result.GetResult<Prisma.$ComponentMaintenancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ComponentMaintenance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ComponentMaintenanceFindUniqueOrThrowArgs} args - Arguments to find a ComponentMaintenance
     * @example
     * // Get one ComponentMaintenance
     * const componentMaintenance = await prisma.componentMaintenance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComponentMaintenanceFindUniqueOrThrowArgs>(args: SelectSubset<T, ComponentMaintenanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComponentMaintenanceClient<$Result.GetResult<Prisma.$ComponentMaintenancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ComponentMaintenance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentMaintenanceFindFirstArgs} args - Arguments to find a ComponentMaintenance
     * @example
     * // Get one ComponentMaintenance
     * const componentMaintenance = await prisma.componentMaintenance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComponentMaintenanceFindFirstArgs>(args?: SelectSubset<T, ComponentMaintenanceFindFirstArgs<ExtArgs>>): Prisma__ComponentMaintenanceClient<$Result.GetResult<Prisma.$ComponentMaintenancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ComponentMaintenance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentMaintenanceFindFirstOrThrowArgs} args - Arguments to find a ComponentMaintenance
     * @example
     * // Get one ComponentMaintenance
     * const componentMaintenance = await prisma.componentMaintenance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComponentMaintenanceFindFirstOrThrowArgs>(args?: SelectSubset<T, ComponentMaintenanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComponentMaintenanceClient<$Result.GetResult<Prisma.$ComponentMaintenancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ComponentMaintenances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentMaintenanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComponentMaintenances
     * const componentMaintenances = await prisma.componentMaintenance.findMany()
     * 
     * // Get first 10 ComponentMaintenances
     * const componentMaintenances = await prisma.componentMaintenance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const componentMaintenanceWithIdOnly = await prisma.componentMaintenance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComponentMaintenanceFindManyArgs>(args?: SelectSubset<T, ComponentMaintenanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentMaintenancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ComponentMaintenance.
     * @param {ComponentMaintenanceCreateArgs} args - Arguments to create a ComponentMaintenance.
     * @example
     * // Create one ComponentMaintenance
     * const ComponentMaintenance = await prisma.componentMaintenance.create({
     *   data: {
     *     // ... data to create a ComponentMaintenance
     *   }
     * })
     * 
     */
    create<T extends ComponentMaintenanceCreateArgs>(args: SelectSubset<T, ComponentMaintenanceCreateArgs<ExtArgs>>): Prisma__ComponentMaintenanceClient<$Result.GetResult<Prisma.$ComponentMaintenancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ComponentMaintenances.
     * @param {ComponentMaintenanceCreateManyArgs} args - Arguments to create many ComponentMaintenances.
     * @example
     * // Create many ComponentMaintenances
     * const componentMaintenance = await prisma.componentMaintenance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComponentMaintenanceCreateManyArgs>(args?: SelectSubset<T, ComponentMaintenanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ComponentMaintenances and returns the data saved in the database.
     * @param {ComponentMaintenanceCreateManyAndReturnArgs} args - Arguments to create many ComponentMaintenances.
     * @example
     * // Create many ComponentMaintenances
     * const componentMaintenance = await prisma.componentMaintenance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ComponentMaintenances and only return the `id`
     * const componentMaintenanceWithIdOnly = await prisma.componentMaintenance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComponentMaintenanceCreateManyAndReturnArgs>(args?: SelectSubset<T, ComponentMaintenanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentMaintenancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ComponentMaintenance.
     * @param {ComponentMaintenanceDeleteArgs} args - Arguments to delete one ComponentMaintenance.
     * @example
     * // Delete one ComponentMaintenance
     * const ComponentMaintenance = await prisma.componentMaintenance.delete({
     *   where: {
     *     // ... filter to delete one ComponentMaintenance
     *   }
     * })
     * 
     */
    delete<T extends ComponentMaintenanceDeleteArgs>(args: SelectSubset<T, ComponentMaintenanceDeleteArgs<ExtArgs>>): Prisma__ComponentMaintenanceClient<$Result.GetResult<Prisma.$ComponentMaintenancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ComponentMaintenance.
     * @param {ComponentMaintenanceUpdateArgs} args - Arguments to update one ComponentMaintenance.
     * @example
     * // Update one ComponentMaintenance
     * const componentMaintenance = await prisma.componentMaintenance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComponentMaintenanceUpdateArgs>(args: SelectSubset<T, ComponentMaintenanceUpdateArgs<ExtArgs>>): Prisma__ComponentMaintenanceClient<$Result.GetResult<Prisma.$ComponentMaintenancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ComponentMaintenances.
     * @param {ComponentMaintenanceDeleteManyArgs} args - Arguments to filter ComponentMaintenances to delete.
     * @example
     * // Delete a few ComponentMaintenances
     * const { count } = await prisma.componentMaintenance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComponentMaintenanceDeleteManyArgs>(args?: SelectSubset<T, ComponentMaintenanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComponentMaintenances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentMaintenanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComponentMaintenances
     * const componentMaintenance = await prisma.componentMaintenance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComponentMaintenanceUpdateManyArgs>(args: SelectSubset<T, ComponentMaintenanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ComponentMaintenance.
     * @param {ComponentMaintenanceUpsertArgs} args - Arguments to update or create a ComponentMaintenance.
     * @example
     * // Update or create a ComponentMaintenance
     * const componentMaintenance = await prisma.componentMaintenance.upsert({
     *   create: {
     *     // ... data to create a ComponentMaintenance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComponentMaintenance we want to update
     *   }
     * })
     */
    upsert<T extends ComponentMaintenanceUpsertArgs>(args: SelectSubset<T, ComponentMaintenanceUpsertArgs<ExtArgs>>): Prisma__ComponentMaintenanceClient<$Result.GetResult<Prisma.$ComponentMaintenancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ComponentMaintenances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentMaintenanceCountArgs} args - Arguments to filter ComponentMaintenances to count.
     * @example
     * // Count the number of ComponentMaintenances
     * const count = await prisma.componentMaintenance.count({
     *   where: {
     *     // ... the filter for the ComponentMaintenances we want to count
     *   }
     * })
    **/
    count<T extends ComponentMaintenanceCountArgs>(
      args?: Subset<T, ComponentMaintenanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComponentMaintenanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComponentMaintenance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentMaintenanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComponentMaintenanceAggregateArgs>(args: Subset<T, ComponentMaintenanceAggregateArgs>): Prisma.PrismaPromise<GetComponentMaintenanceAggregateType<T>>

    /**
     * Group by ComponentMaintenance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentMaintenanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComponentMaintenanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComponentMaintenanceGroupByArgs['orderBy'] }
        : { orderBy?: ComponentMaintenanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComponentMaintenanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComponentMaintenanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComponentMaintenance model
   */
  readonly fields: ComponentMaintenanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComponentMaintenance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComponentMaintenanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    component<T extends AssetComponentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetComponentDefaultArgs<ExtArgs>>): Prisma__AssetComponentClient<$Result.GetResult<Prisma.$AssetComponentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    performedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComponentMaintenance model
   */ 
  interface ComponentMaintenanceFieldRefs {
    readonly id: FieldRef<"ComponentMaintenance", 'String'>
    readonly description: FieldRef<"ComponentMaintenance", 'String'>
    readonly maintenanceType: FieldRef<"ComponentMaintenance", 'String'>
    readonly maintenanceDate: FieldRef<"ComponentMaintenance", 'DateTime'>
    readonly cost: FieldRef<"ComponentMaintenance", 'Decimal'>
    readonly notes: FieldRef<"ComponentMaintenance", 'String'>
    readonly componentId: FieldRef<"ComponentMaintenance", 'String'>
    readonly performedById: FieldRef<"ComponentMaintenance", 'String'>
    readonly createdAt: FieldRef<"ComponentMaintenance", 'DateTime'>
    readonly updatedAt: FieldRef<"ComponentMaintenance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ComponentMaintenance findUnique
   */
  export type ComponentMaintenanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceInclude<ExtArgs> | null
    /**
     * Filter, which ComponentMaintenance to fetch.
     */
    where: ComponentMaintenanceWhereUniqueInput
  }

  /**
   * ComponentMaintenance findUniqueOrThrow
   */
  export type ComponentMaintenanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceInclude<ExtArgs> | null
    /**
     * Filter, which ComponentMaintenance to fetch.
     */
    where: ComponentMaintenanceWhereUniqueInput
  }

  /**
   * ComponentMaintenance findFirst
   */
  export type ComponentMaintenanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceInclude<ExtArgs> | null
    /**
     * Filter, which ComponentMaintenance to fetch.
     */
    where?: ComponentMaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentMaintenances to fetch.
     */
    orderBy?: ComponentMaintenanceOrderByWithRelationInput | ComponentMaintenanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentMaintenances.
     */
    cursor?: ComponentMaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentMaintenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentMaintenances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentMaintenances.
     */
    distinct?: ComponentMaintenanceScalarFieldEnum | ComponentMaintenanceScalarFieldEnum[]
  }

  /**
   * ComponentMaintenance findFirstOrThrow
   */
  export type ComponentMaintenanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceInclude<ExtArgs> | null
    /**
     * Filter, which ComponentMaintenance to fetch.
     */
    where?: ComponentMaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentMaintenances to fetch.
     */
    orderBy?: ComponentMaintenanceOrderByWithRelationInput | ComponentMaintenanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentMaintenances.
     */
    cursor?: ComponentMaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentMaintenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentMaintenances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentMaintenances.
     */
    distinct?: ComponentMaintenanceScalarFieldEnum | ComponentMaintenanceScalarFieldEnum[]
  }

  /**
   * ComponentMaintenance findMany
   */
  export type ComponentMaintenanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceInclude<ExtArgs> | null
    /**
     * Filter, which ComponentMaintenances to fetch.
     */
    where?: ComponentMaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentMaintenances to fetch.
     */
    orderBy?: ComponentMaintenanceOrderByWithRelationInput | ComponentMaintenanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComponentMaintenances.
     */
    cursor?: ComponentMaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentMaintenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentMaintenances.
     */
    skip?: number
    distinct?: ComponentMaintenanceScalarFieldEnum | ComponentMaintenanceScalarFieldEnum[]
  }

  /**
   * ComponentMaintenance create
   */
  export type ComponentMaintenanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceInclude<ExtArgs> | null
    /**
     * The data needed to create a ComponentMaintenance.
     */
    data: XOR<ComponentMaintenanceCreateInput, ComponentMaintenanceUncheckedCreateInput>
  }

  /**
   * ComponentMaintenance createMany
   */
  export type ComponentMaintenanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComponentMaintenances.
     */
    data: ComponentMaintenanceCreateManyInput | ComponentMaintenanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ComponentMaintenance createManyAndReturn
   */
  export type ComponentMaintenanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ComponentMaintenances.
     */
    data: ComponentMaintenanceCreateManyInput | ComponentMaintenanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComponentMaintenance update
   */
  export type ComponentMaintenanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceInclude<ExtArgs> | null
    /**
     * The data needed to update a ComponentMaintenance.
     */
    data: XOR<ComponentMaintenanceUpdateInput, ComponentMaintenanceUncheckedUpdateInput>
    /**
     * Choose, which ComponentMaintenance to update.
     */
    where: ComponentMaintenanceWhereUniqueInput
  }

  /**
   * ComponentMaintenance updateMany
   */
  export type ComponentMaintenanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComponentMaintenances.
     */
    data: XOR<ComponentMaintenanceUpdateManyMutationInput, ComponentMaintenanceUncheckedUpdateManyInput>
    /**
     * Filter which ComponentMaintenances to update
     */
    where?: ComponentMaintenanceWhereInput
  }

  /**
   * ComponentMaintenance upsert
   */
  export type ComponentMaintenanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceInclude<ExtArgs> | null
    /**
     * The filter to search for the ComponentMaintenance to update in case it exists.
     */
    where: ComponentMaintenanceWhereUniqueInput
    /**
     * In case the ComponentMaintenance found by the `where` argument doesn't exist, create a new ComponentMaintenance with this data.
     */
    create: XOR<ComponentMaintenanceCreateInput, ComponentMaintenanceUncheckedCreateInput>
    /**
     * In case the ComponentMaintenance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComponentMaintenanceUpdateInput, ComponentMaintenanceUncheckedUpdateInput>
  }

  /**
   * ComponentMaintenance delete
   */
  export type ComponentMaintenanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceInclude<ExtArgs> | null
    /**
     * Filter which ComponentMaintenance to delete.
     */
    where: ComponentMaintenanceWhereUniqueInput
  }

  /**
   * ComponentMaintenance deleteMany
   */
  export type ComponentMaintenanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentMaintenances to delete
     */
    where?: ComponentMaintenanceWhereInput
  }

  /**
   * ComponentMaintenance without action
   */
  export type ComponentMaintenanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentMaintenance
     */
    select?: ComponentMaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentMaintenanceInclude<ExtArgs> | null
  }


  /**
   * Model Inventory
   */

  export type AggregateInventory = {
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  export type InventoryAvgAggregateOutputType = {
    quantity: number | null
    availableQty: number | null
    minStockLevel: number | null
  }

  export type InventorySumAggregateOutputType = {
    quantity: number | null
    availableQty: number | null
    minStockLevel: number | null
  }

  export type InventoryMinAggregateOutputType = {
    id: string | null
    inventoryTag: string | null
    quantity: number | null
    availableQty: number | null
    condition: string | null
    status: string | null
    location: string | null
    notes: string | null
    minStockLevel: number | null
    assetId: string | null
    departmentId: string | null
    custodianId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryMaxAggregateOutputType = {
    id: string | null
    inventoryTag: string | null
    quantity: number | null
    availableQty: number | null
    condition: string | null
    status: string | null
    location: string | null
    notes: string | null
    minStockLevel: number | null
    assetId: string | null
    departmentId: string | null
    custodianId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryCountAggregateOutputType = {
    id: number
    inventoryTag: number
    quantity: number
    availableQty: number
    condition: number
    status: number
    location: number
    notes: number
    minStockLevel: number
    assetId: number
    departmentId: number
    custodianId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InventoryAvgAggregateInputType = {
    quantity?: true
    availableQty?: true
    minStockLevel?: true
  }

  export type InventorySumAggregateInputType = {
    quantity?: true
    availableQty?: true
    minStockLevel?: true
  }

  export type InventoryMinAggregateInputType = {
    id?: true
    inventoryTag?: true
    quantity?: true
    availableQty?: true
    condition?: true
    status?: true
    location?: true
    notes?: true
    minStockLevel?: true
    assetId?: true
    departmentId?: true
    custodianId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryMaxAggregateInputType = {
    id?: true
    inventoryTag?: true
    quantity?: true
    availableQty?: true
    condition?: true
    status?: true
    location?: true
    notes?: true
    minStockLevel?: true
    assetId?: true
    departmentId?: true
    custodianId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryCountAggregateInputType = {
    id?: true
    inventoryTag?: true
    quantity?: true
    availableQty?: true
    condition?: true
    status?: true
    location?: true
    notes?: true
    minStockLevel?: true
    assetId?: true
    departmentId?: true
    custodianId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventory to aggregate.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inventories
    **/
    _count?: true | InventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryMaxAggregateInputType
  }

  export type GetInventoryAggregateType<T extends InventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventory[P]>
      : GetScalarType<T[P], AggregateInventory[P]>
  }




  export type InventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithAggregationInput | InventoryOrderByWithAggregationInput[]
    by: InventoryScalarFieldEnum[] | InventoryScalarFieldEnum
    having?: InventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryCountAggregateInputType | true
    _avg?: InventoryAvgAggregateInputType
    _sum?: InventorySumAggregateInputType
    _min?: InventoryMinAggregateInputType
    _max?: InventoryMaxAggregateInputType
  }

  export type InventoryGroupByOutputType = {
    id: string
    inventoryTag: string
    quantity: number
    availableQty: number
    condition: string
    status: string
    location: string | null
    notes: string | null
    minStockLevel: number | null
    assetId: string
    departmentId: string
    custodianId: string | null
    createdAt: Date
    updatedAt: Date
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  type GetInventoryGroupByPayload<T extends InventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryGroupByOutputType[P]>
        }
      >
    >


  export type InventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryTag?: boolean
    quantity?: boolean
    availableQty?: boolean
    condition?: boolean
    status?: boolean
    location?: boolean
    notes?: boolean
    minStockLevel?: boolean
    assetId?: boolean
    departmentId?: boolean
    custodianId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    custodian?: boolean | Inventory$custodianArgs<ExtArgs>
    loans?: boolean | Inventory$loansArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryTag?: boolean
    quantity?: boolean
    availableQty?: boolean
    condition?: boolean
    status?: boolean
    location?: boolean
    notes?: boolean
    minStockLevel?: boolean
    assetId?: boolean
    departmentId?: boolean
    custodianId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    custodian?: boolean | Inventory$custodianArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectScalar = {
    id?: boolean
    inventoryTag?: boolean
    quantity?: boolean
    availableQty?: boolean
    condition?: boolean
    status?: boolean
    location?: boolean
    notes?: boolean
    minStockLevel?: boolean
    assetId?: boolean
    departmentId?: boolean
    custodianId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    custodian?: boolean | Inventory$custodianArgs<ExtArgs>
    loans?: boolean | Inventory$loansArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InventoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    custodian?: boolean | Inventory$custodianArgs<ExtArgs>
  }

  export type $InventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inventory"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
      custodian: Prisma.$UserPayload<ExtArgs> | null
      loans: Prisma.$InventoryLoanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      inventoryTag: string
      quantity: number
      availableQty: number
      condition: string
      status: string
      location: string | null
      notes: string | null
      minStockLevel: number | null
      assetId: string
      departmentId: string
      custodianId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inventory"]>
    composites: {}
  }

  type InventoryGetPayload<S extends boolean | null | undefined | InventoryDefaultArgs> = $Result.GetResult<Prisma.$InventoryPayload, S>

  type InventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryCountAggregateInputType | true
    }

  export interface InventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inventory'], meta: { name: 'Inventory' } }
    /**
     * Find zero or one Inventory that matches the filter.
     * @param {InventoryFindUniqueArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryFindUniqueArgs>(args: SelectSubset<T, InventoryFindUniqueArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Inventory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryFindUniqueOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Inventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryFindFirstArgs>(args?: SelectSubset<T, InventoryFindFirstArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Inventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Inventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inventories
     * const inventories = await prisma.inventory.findMany()
     * 
     * // Get first 10 Inventories
     * const inventories = await prisma.inventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryWithIdOnly = await prisma.inventory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryFindManyArgs>(args?: SelectSubset<T, InventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Inventory.
     * @param {InventoryCreateArgs} args - Arguments to create a Inventory.
     * @example
     * // Create one Inventory
     * const Inventory = await prisma.inventory.create({
     *   data: {
     *     // ... data to create a Inventory
     *   }
     * })
     * 
     */
    create<T extends InventoryCreateArgs>(args: SelectSubset<T, InventoryCreateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Inventories.
     * @param {InventoryCreateManyArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryCreateManyArgs>(args?: SelectSubset<T, InventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Inventories and returns the data saved in the database.
     * @param {InventoryCreateManyAndReturnArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Inventories and only return the `id`
     * const inventoryWithIdOnly = await prisma.inventory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Inventory.
     * @param {InventoryDeleteArgs} args - Arguments to delete one Inventory.
     * @example
     * // Delete one Inventory
     * const Inventory = await prisma.inventory.delete({
     *   where: {
     *     // ... filter to delete one Inventory
     *   }
     * })
     * 
     */
    delete<T extends InventoryDeleteArgs>(args: SelectSubset<T, InventoryDeleteArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Inventory.
     * @param {InventoryUpdateArgs} args - Arguments to update one Inventory.
     * @example
     * // Update one Inventory
     * const inventory = await prisma.inventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryUpdateArgs>(args: SelectSubset<T, InventoryUpdateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Inventories.
     * @param {InventoryDeleteManyArgs} args - Arguments to filter Inventories to delete.
     * @example
     * // Delete a few Inventories
     * const { count } = await prisma.inventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryDeleteManyArgs>(args?: SelectSubset<T, InventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inventories
     * const inventory = await prisma.inventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryUpdateManyArgs>(args: SelectSubset<T, InventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inventory.
     * @param {InventoryUpsertArgs} args - Arguments to update or create a Inventory.
     * @example
     * // Update or create a Inventory
     * const inventory = await prisma.inventory.upsert({
     *   create: {
     *     // ... data to create a Inventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inventory we want to update
     *   }
     * })
     */
    upsert<T extends InventoryUpsertArgs>(args: SelectSubset<T, InventoryUpsertArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountArgs} args - Arguments to filter Inventories to count.
     * @example
     * // Count the number of Inventories
     * const count = await prisma.inventory.count({
     *   where: {
     *     // ... the filter for the Inventories we want to count
     *   }
     * })
    **/
    count<T extends InventoryCountArgs>(
      args?: Subset<T, InventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryAggregateArgs>(args: Subset<T, InventoryAggregateArgs>): Prisma.PrismaPromise<GetInventoryAggregateType<T>>

    /**
     * Group by Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryGroupByArgs['orderBy'] }
        : { orderBy?: InventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inventory model
   */
  readonly fields: InventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    custodian<T extends Inventory$custodianArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$custodianArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    loans<T extends Inventory$loansArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$loansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Inventory model
   */ 
  interface InventoryFieldRefs {
    readonly id: FieldRef<"Inventory", 'String'>
    readonly inventoryTag: FieldRef<"Inventory", 'String'>
    readonly quantity: FieldRef<"Inventory", 'Int'>
    readonly availableQty: FieldRef<"Inventory", 'Int'>
    readonly condition: FieldRef<"Inventory", 'String'>
    readonly status: FieldRef<"Inventory", 'String'>
    readonly location: FieldRef<"Inventory", 'String'>
    readonly notes: FieldRef<"Inventory", 'String'>
    readonly minStockLevel: FieldRef<"Inventory", 'Int'>
    readonly assetId: FieldRef<"Inventory", 'String'>
    readonly departmentId: FieldRef<"Inventory", 'String'>
    readonly custodianId: FieldRef<"Inventory", 'String'>
    readonly createdAt: FieldRef<"Inventory", 'DateTime'>
    readonly updatedAt: FieldRef<"Inventory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Inventory findUnique
   */
  export type InventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findUniqueOrThrow
   */
  export type InventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findFirst
   */
  export type InventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findFirstOrThrow
   */
  export type InventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findMany
   */
  export type InventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventories to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory create
   */
  export type InventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Inventory.
     */
    data: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
  }

  /**
   * Inventory createMany
   */
  export type InventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inventories.
     */
    data: InventoryCreateManyInput | InventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inventory createManyAndReturn
   */
  export type InventoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Inventories.
     */
    data: InventoryCreateManyInput | InventoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Inventory update
   */
  export type InventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Inventory.
     */
    data: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
    /**
     * Choose, which Inventory to update.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory updateMany
   */
  export type InventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inventories.
     */
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyInput>
    /**
     * Filter which Inventories to update
     */
    where?: InventoryWhereInput
  }

  /**
   * Inventory upsert
   */
  export type InventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Inventory to update in case it exists.
     */
    where: InventoryWhereUniqueInput
    /**
     * In case the Inventory found by the `where` argument doesn't exist, create a new Inventory with this data.
     */
    create: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
    /**
     * In case the Inventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
  }

  /**
   * Inventory delete
   */
  export type InventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter which Inventory to delete.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory deleteMany
   */
  export type InventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventories to delete
     */
    where?: InventoryWhereInput
  }

  /**
   * Inventory.custodian
   */
  export type Inventory$custodianArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Inventory.loans
   */
  export type Inventory$loansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    where?: InventoryLoanWhereInput
    orderBy?: InventoryLoanOrderByWithRelationInput | InventoryLoanOrderByWithRelationInput[]
    cursor?: InventoryLoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryLoanScalarFieldEnum | InventoryLoanScalarFieldEnum[]
  }

  /**
   * Inventory without action
   */
  export type InventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
  }


  /**
   * Model InventoryLoan
   */

  export type AggregateInventoryLoan = {
    _count: InventoryLoanCountAggregateOutputType | null
    _avg: InventoryLoanAvgAggregateOutputType | null
    _sum: InventoryLoanSumAggregateOutputType | null
    _min: InventoryLoanMinAggregateOutputType | null
    _max: InventoryLoanMaxAggregateOutputType | null
  }

  export type InventoryLoanAvgAggregateOutputType = {
    quantity: number | null
  }

  export type InventoryLoanSumAggregateOutputType = {
    quantity: number | null
  }

  export type InventoryLoanMinAggregateOutputType = {
    id: string | null
    loanNumber: string | null
    purpose: string | null
    quantity: number | null
    loanDate: Date | null
    expectedReturnDate: Date | null
    actualReturnDate: Date | null
    status: string | null
    condition: string | null
    notes: string | null
    approvalNotes: string | null
    inventoryId: string | null
    borrowerId: string | null
    approvedById: string | null
    responsibleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryLoanMaxAggregateOutputType = {
    id: string | null
    loanNumber: string | null
    purpose: string | null
    quantity: number | null
    loanDate: Date | null
    expectedReturnDate: Date | null
    actualReturnDate: Date | null
    status: string | null
    condition: string | null
    notes: string | null
    approvalNotes: string | null
    inventoryId: string | null
    borrowerId: string | null
    approvedById: string | null
    responsibleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryLoanCountAggregateOutputType = {
    id: number
    loanNumber: number
    purpose: number
    quantity: number
    loanDate: number
    expectedReturnDate: number
    actualReturnDate: number
    status: number
    condition: number
    notes: number
    approvalNotes: number
    inventoryId: number
    borrowerId: number
    approvedById: number
    responsibleId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InventoryLoanAvgAggregateInputType = {
    quantity?: true
  }

  export type InventoryLoanSumAggregateInputType = {
    quantity?: true
  }

  export type InventoryLoanMinAggregateInputType = {
    id?: true
    loanNumber?: true
    purpose?: true
    quantity?: true
    loanDate?: true
    expectedReturnDate?: true
    actualReturnDate?: true
    status?: true
    condition?: true
    notes?: true
    approvalNotes?: true
    inventoryId?: true
    borrowerId?: true
    approvedById?: true
    responsibleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryLoanMaxAggregateInputType = {
    id?: true
    loanNumber?: true
    purpose?: true
    quantity?: true
    loanDate?: true
    expectedReturnDate?: true
    actualReturnDate?: true
    status?: true
    condition?: true
    notes?: true
    approvalNotes?: true
    inventoryId?: true
    borrowerId?: true
    approvedById?: true
    responsibleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryLoanCountAggregateInputType = {
    id?: true
    loanNumber?: true
    purpose?: true
    quantity?: true
    loanDate?: true
    expectedReturnDate?: true
    actualReturnDate?: true
    status?: true
    condition?: true
    notes?: true
    approvalNotes?: true
    inventoryId?: true
    borrowerId?: true
    approvedById?: true
    responsibleId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InventoryLoanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryLoan to aggregate.
     */
    where?: InventoryLoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryLoans to fetch.
     */
    orderBy?: InventoryLoanOrderByWithRelationInput | InventoryLoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryLoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryLoans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryLoans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryLoans
    **/
    _count?: true | InventoryLoanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryLoanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryLoanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryLoanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryLoanMaxAggregateInputType
  }

  export type GetInventoryLoanAggregateType<T extends InventoryLoanAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryLoan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryLoan[P]>
      : GetScalarType<T[P], AggregateInventoryLoan[P]>
  }




  export type InventoryLoanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryLoanWhereInput
    orderBy?: InventoryLoanOrderByWithAggregationInput | InventoryLoanOrderByWithAggregationInput[]
    by: InventoryLoanScalarFieldEnum[] | InventoryLoanScalarFieldEnum
    having?: InventoryLoanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryLoanCountAggregateInputType | true
    _avg?: InventoryLoanAvgAggregateInputType
    _sum?: InventoryLoanSumAggregateInputType
    _min?: InventoryLoanMinAggregateInputType
    _max?: InventoryLoanMaxAggregateInputType
  }

  export type InventoryLoanGroupByOutputType = {
    id: string
    loanNumber: string
    purpose: string
    quantity: number
    loanDate: Date
    expectedReturnDate: Date
    actualReturnDate: Date | null
    status: string
    condition: string | null
    notes: string | null
    approvalNotes: string | null
    inventoryId: string
    borrowerId: string
    approvedById: string | null
    responsibleId: string
    createdAt: Date
    updatedAt: Date
    _count: InventoryLoanCountAggregateOutputType | null
    _avg: InventoryLoanAvgAggregateOutputType | null
    _sum: InventoryLoanSumAggregateOutputType | null
    _min: InventoryLoanMinAggregateOutputType | null
    _max: InventoryLoanMaxAggregateOutputType | null
  }

  type GetInventoryLoanGroupByPayload<T extends InventoryLoanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryLoanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryLoanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryLoanGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryLoanGroupByOutputType[P]>
        }
      >
    >


  export type InventoryLoanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanNumber?: boolean
    purpose?: boolean
    quantity?: boolean
    loanDate?: boolean
    expectedReturnDate?: boolean
    actualReturnDate?: boolean
    status?: boolean
    condition?: boolean
    notes?: boolean
    approvalNotes?: boolean
    inventoryId?: boolean
    borrowerId?: boolean
    approvedById?: boolean
    responsibleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    borrower?: boolean | UserDefaultArgs<ExtArgs>
    approvedBy?: boolean | InventoryLoan$approvedByArgs<ExtArgs>
    responsible?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryLoan"]>

  export type InventoryLoanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanNumber?: boolean
    purpose?: boolean
    quantity?: boolean
    loanDate?: boolean
    expectedReturnDate?: boolean
    actualReturnDate?: boolean
    status?: boolean
    condition?: boolean
    notes?: boolean
    approvalNotes?: boolean
    inventoryId?: boolean
    borrowerId?: boolean
    approvedById?: boolean
    responsibleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    borrower?: boolean | UserDefaultArgs<ExtArgs>
    approvedBy?: boolean | InventoryLoan$approvedByArgs<ExtArgs>
    responsible?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryLoan"]>

  export type InventoryLoanSelectScalar = {
    id?: boolean
    loanNumber?: boolean
    purpose?: boolean
    quantity?: boolean
    loanDate?: boolean
    expectedReturnDate?: boolean
    actualReturnDate?: boolean
    status?: boolean
    condition?: boolean
    notes?: boolean
    approvalNotes?: boolean
    inventoryId?: boolean
    borrowerId?: boolean
    approvedById?: boolean
    responsibleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InventoryLoanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    borrower?: boolean | UserDefaultArgs<ExtArgs>
    approvedBy?: boolean | InventoryLoan$approvedByArgs<ExtArgs>
    responsible?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InventoryLoanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    borrower?: boolean | UserDefaultArgs<ExtArgs>
    approvedBy?: boolean | InventoryLoan$approvedByArgs<ExtArgs>
    responsible?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InventoryLoanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryLoan"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>
      borrower: Prisma.$UserPayload<ExtArgs>
      approvedBy: Prisma.$UserPayload<ExtArgs> | null
      responsible: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      loanNumber: string
      purpose: string
      quantity: number
      loanDate: Date
      expectedReturnDate: Date
      actualReturnDate: Date | null
      status: string
      condition: string | null
      notes: string | null
      approvalNotes: string | null
      inventoryId: string
      borrowerId: string
      approvedById: string | null
      responsibleId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inventoryLoan"]>
    composites: {}
  }

  type InventoryLoanGetPayload<S extends boolean | null | undefined | InventoryLoanDefaultArgs> = $Result.GetResult<Prisma.$InventoryLoanPayload, S>

  type InventoryLoanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryLoanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryLoanCountAggregateInputType | true
    }

  export interface InventoryLoanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryLoan'], meta: { name: 'InventoryLoan' } }
    /**
     * Find zero or one InventoryLoan that matches the filter.
     * @param {InventoryLoanFindUniqueArgs} args - Arguments to find a InventoryLoan
     * @example
     * // Get one InventoryLoan
     * const inventoryLoan = await prisma.inventoryLoan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryLoanFindUniqueArgs>(args: SelectSubset<T, InventoryLoanFindUniqueArgs<ExtArgs>>): Prisma__InventoryLoanClient<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InventoryLoan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryLoanFindUniqueOrThrowArgs} args - Arguments to find a InventoryLoan
     * @example
     * // Get one InventoryLoan
     * const inventoryLoan = await prisma.inventoryLoan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryLoanFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryLoanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryLoanClient<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InventoryLoan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryLoanFindFirstArgs} args - Arguments to find a InventoryLoan
     * @example
     * // Get one InventoryLoan
     * const inventoryLoan = await prisma.inventoryLoan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryLoanFindFirstArgs>(args?: SelectSubset<T, InventoryLoanFindFirstArgs<ExtArgs>>): Prisma__InventoryLoanClient<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InventoryLoan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryLoanFindFirstOrThrowArgs} args - Arguments to find a InventoryLoan
     * @example
     * // Get one InventoryLoan
     * const inventoryLoan = await prisma.inventoryLoan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryLoanFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryLoanFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryLoanClient<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InventoryLoans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryLoanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryLoans
     * const inventoryLoans = await prisma.inventoryLoan.findMany()
     * 
     * // Get first 10 InventoryLoans
     * const inventoryLoans = await prisma.inventoryLoan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryLoanWithIdOnly = await prisma.inventoryLoan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryLoanFindManyArgs>(args?: SelectSubset<T, InventoryLoanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InventoryLoan.
     * @param {InventoryLoanCreateArgs} args - Arguments to create a InventoryLoan.
     * @example
     * // Create one InventoryLoan
     * const InventoryLoan = await prisma.inventoryLoan.create({
     *   data: {
     *     // ... data to create a InventoryLoan
     *   }
     * })
     * 
     */
    create<T extends InventoryLoanCreateArgs>(args: SelectSubset<T, InventoryLoanCreateArgs<ExtArgs>>): Prisma__InventoryLoanClient<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InventoryLoans.
     * @param {InventoryLoanCreateManyArgs} args - Arguments to create many InventoryLoans.
     * @example
     * // Create many InventoryLoans
     * const inventoryLoan = await prisma.inventoryLoan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryLoanCreateManyArgs>(args?: SelectSubset<T, InventoryLoanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InventoryLoans and returns the data saved in the database.
     * @param {InventoryLoanCreateManyAndReturnArgs} args - Arguments to create many InventoryLoans.
     * @example
     * // Create many InventoryLoans
     * const inventoryLoan = await prisma.inventoryLoan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InventoryLoans and only return the `id`
     * const inventoryLoanWithIdOnly = await prisma.inventoryLoan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryLoanCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryLoanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InventoryLoan.
     * @param {InventoryLoanDeleteArgs} args - Arguments to delete one InventoryLoan.
     * @example
     * // Delete one InventoryLoan
     * const InventoryLoan = await prisma.inventoryLoan.delete({
     *   where: {
     *     // ... filter to delete one InventoryLoan
     *   }
     * })
     * 
     */
    delete<T extends InventoryLoanDeleteArgs>(args: SelectSubset<T, InventoryLoanDeleteArgs<ExtArgs>>): Prisma__InventoryLoanClient<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InventoryLoan.
     * @param {InventoryLoanUpdateArgs} args - Arguments to update one InventoryLoan.
     * @example
     * // Update one InventoryLoan
     * const inventoryLoan = await prisma.inventoryLoan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryLoanUpdateArgs>(args: SelectSubset<T, InventoryLoanUpdateArgs<ExtArgs>>): Prisma__InventoryLoanClient<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InventoryLoans.
     * @param {InventoryLoanDeleteManyArgs} args - Arguments to filter InventoryLoans to delete.
     * @example
     * // Delete a few InventoryLoans
     * const { count } = await prisma.inventoryLoan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryLoanDeleteManyArgs>(args?: SelectSubset<T, InventoryLoanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryLoans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryLoanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryLoans
     * const inventoryLoan = await prisma.inventoryLoan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryLoanUpdateManyArgs>(args: SelectSubset<T, InventoryLoanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryLoan.
     * @param {InventoryLoanUpsertArgs} args - Arguments to update or create a InventoryLoan.
     * @example
     * // Update or create a InventoryLoan
     * const inventoryLoan = await prisma.inventoryLoan.upsert({
     *   create: {
     *     // ... data to create a InventoryLoan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryLoan we want to update
     *   }
     * })
     */
    upsert<T extends InventoryLoanUpsertArgs>(args: SelectSubset<T, InventoryLoanUpsertArgs<ExtArgs>>): Prisma__InventoryLoanClient<$Result.GetResult<Prisma.$InventoryLoanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InventoryLoans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryLoanCountArgs} args - Arguments to filter InventoryLoans to count.
     * @example
     * // Count the number of InventoryLoans
     * const count = await prisma.inventoryLoan.count({
     *   where: {
     *     // ... the filter for the InventoryLoans we want to count
     *   }
     * })
    **/
    count<T extends InventoryLoanCountArgs>(
      args?: Subset<T, InventoryLoanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryLoanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryLoan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryLoanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryLoanAggregateArgs>(args: Subset<T, InventoryLoanAggregateArgs>): Prisma.PrismaPromise<GetInventoryLoanAggregateType<T>>

    /**
     * Group by InventoryLoan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryLoanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryLoanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryLoanGroupByArgs['orderBy'] }
        : { orderBy?: InventoryLoanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryLoanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryLoanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryLoan model
   */
  readonly fields: InventoryLoanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryLoan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryLoanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    borrower<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    approvedBy<T extends InventoryLoan$approvedByArgs<ExtArgs> = {}>(args?: Subset<T, InventoryLoan$approvedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    responsible<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryLoan model
   */ 
  interface InventoryLoanFieldRefs {
    readonly id: FieldRef<"InventoryLoan", 'String'>
    readonly loanNumber: FieldRef<"InventoryLoan", 'String'>
    readonly purpose: FieldRef<"InventoryLoan", 'String'>
    readonly quantity: FieldRef<"InventoryLoan", 'Int'>
    readonly loanDate: FieldRef<"InventoryLoan", 'DateTime'>
    readonly expectedReturnDate: FieldRef<"InventoryLoan", 'DateTime'>
    readonly actualReturnDate: FieldRef<"InventoryLoan", 'DateTime'>
    readonly status: FieldRef<"InventoryLoan", 'String'>
    readonly condition: FieldRef<"InventoryLoan", 'String'>
    readonly notes: FieldRef<"InventoryLoan", 'String'>
    readonly approvalNotes: FieldRef<"InventoryLoan", 'String'>
    readonly inventoryId: FieldRef<"InventoryLoan", 'String'>
    readonly borrowerId: FieldRef<"InventoryLoan", 'String'>
    readonly approvedById: FieldRef<"InventoryLoan", 'String'>
    readonly responsibleId: FieldRef<"InventoryLoan", 'String'>
    readonly createdAt: FieldRef<"InventoryLoan", 'DateTime'>
    readonly updatedAt: FieldRef<"InventoryLoan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InventoryLoan findUnique
   */
  export type InventoryLoanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    /**
     * Filter, which InventoryLoan to fetch.
     */
    where: InventoryLoanWhereUniqueInput
  }

  /**
   * InventoryLoan findUniqueOrThrow
   */
  export type InventoryLoanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    /**
     * Filter, which InventoryLoan to fetch.
     */
    where: InventoryLoanWhereUniqueInput
  }

  /**
   * InventoryLoan findFirst
   */
  export type InventoryLoanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    /**
     * Filter, which InventoryLoan to fetch.
     */
    where?: InventoryLoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryLoans to fetch.
     */
    orderBy?: InventoryLoanOrderByWithRelationInput | InventoryLoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryLoans.
     */
    cursor?: InventoryLoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryLoans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryLoans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryLoans.
     */
    distinct?: InventoryLoanScalarFieldEnum | InventoryLoanScalarFieldEnum[]
  }

  /**
   * InventoryLoan findFirstOrThrow
   */
  export type InventoryLoanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    /**
     * Filter, which InventoryLoan to fetch.
     */
    where?: InventoryLoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryLoans to fetch.
     */
    orderBy?: InventoryLoanOrderByWithRelationInput | InventoryLoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryLoans.
     */
    cursor?: InventoryLoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryLoans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryLoans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryLoans.
     */
    distinct?: InventoryLoanScalarFieldEnum | InventoryLoanScalarFieldEnum[]
  }

  /**
   * InventoryLoan findMany
   */
  export type InventoryLoanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    /**
     * Filter, which InventoryLoans to fetch.
     */
    where?: InventoryLoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryLoans to fetch.
     */
    orderBy?: InventoryLoanOrderByWithRelationInput | InventoryLoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryLoans.
     */
    cursor?: InventoryLoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryLoans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryLoans.
     */
    skip?: number
    distinct?: InventoryLoanScalarFieldEnum | InventoryLoanScalarFieldEnum[]
  }

  /**
   * InventoryLoan create
   */
  export type InventoryLoanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryLoan.
     */
    data: XOR<InventoryLoanCreateInput, InventoryLoanUncheckedCreateInput>
  }

  /**
   * InventoryLoan createMany
   */
  export type InventoryLoanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryLoans.
     */
    data: InventoryLoanCreateManyInput | InventoryLoanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryLoan createManyAndReturn
   */
  export type InventoryLoanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InventoryLoans.
     */
    data: InventoryLoanCreateManyInput | InventoryLoanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryLoan update
   */
  export type InventoryLoanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryLoan.
     */
    data: XOR<InventoryLoanUpdateInput, InventoryLoanUncheckedUpdateInput>
    /**
     * Choose, which InventoryLoan to update.
     */
    where: InventoryLoanWhereUniqueInput
  }

  /**
   * InventoryLoan updateMany
   */
  export type InventoryLoanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryLoans.
     */
    data: XOR<InventoryLoanUpdateManyMutationInput, InventoryLoanUncheckedUpdateManyInput>
    /**
     * Filter which InventoryLoans to update
     */
    where?: InventoryLoanWhereInput
  }

  /**
   * InventoryLoan upsert
   */
  export type InventoryLoanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryLoan to update in case it exists.
     */
    where: InventoryLoanWhereUniqueInput
    /**
     * In case the InventoryLoan found by the `where` argument doesn't exist, create a new InventoryLoan with this data.
     */
    create: XOR<InventoryLoanCreateInput, InventoryLoanUncheckedCreateInput>
    /**
     * In case the InventoryLoan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryLoanUpdateInput, InventoryLoanUncheckedUpdateInput>
  }

  /**
   * InventoryLoan delete
   */
  export type InventoryLoanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
    /**
     * Filter which InventoryLoan to delete.
     */
    where: InventoryLoanWhereUniqueInput
  }

  /**
   * InventoryLoan deleteMany
   */
  export type InventoryLoanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryLoans to delete
     */
    where?: InventoryLoanWhereInput
  }

  /**
   * InventoryLoan.approvedBy
   */
  export type InventoryLoan$approvedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * InventoryLoan without action
   */
  export type InventoryLoanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryLoan
     */
    select?: InventoryLoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryLoanInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    departmentId: 'departmentId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    managerId: 'managerId',
    budgetLimit: 'budgetLimit',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    building: 'building',
    floor: 'floor',
    room: 'room',
    address: 'address',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    parentId: 'parentId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const VendorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    email: 'email',
    phone: 'phone',
    address: 'address',
    contactPerson: 'contactPerson',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VendorScalarFieldEnum = (typeof VendorScalarFieldEnum)[keyof typeof VendorScalarFieldEnum]


  export const AssetScalarFieldEnum: {
    id: 'id',
    assetTag: 'assetTag',
    name: 'name',
    description: 'description',
    serialNumber: 'serialNumber',
    model: 'model',
    brand: 'brand',
    purchaseDate: 'purchaseDate',
    purchasePrice: 'purchasePrice',
    currentValue: 'currentValue',
    warrantyExpiry: 'warrantyExpiry',
    status: 'status',
    condition: 'condition',
    notes: 'notes',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    categoryId: 'categoryId',
    vendorId: 'vendorId',
    locationId: 'locationId',
    departmentId: 'departmentId',
    assignedToId: 'assignedToId'
  };

  export type AssetScalarFieldEnum = (typeof AssetScalarFieldEnum)[keyof typeof AssetScalarFieldEnum]


  export const AssetRequestScalarFieldEnum: {
    id: 'id',
    requestNumber: 'requestNumber',
    description: 'description',
    justification: 'justification',
    priority: 'priority',
    status: 'status',
    requestedDate: 'requestedDate',
    approvedDate: 'approvedDate',
    allocatedDate: 'allocatedDate',
    rejectionReason: 'rejectionReason',
    notes: 'notes',
    requesterId: 'requesterId',
    departmentId: 'departmentId',
    assetId: 'assetId',
    approvedById: 'approvedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssetRequestScalarFieldEnum = (typeof AssetRequestScalarFieldEnum)[keyof typeof AssetRequestScalarFieldEnum]


  export const MaintenanceRecordScalarFieldEnum: {
    id: 'id',
    maintenanceType: 'maintenanceType',
    description: 'description',
    scheduledDate: 'scheduledDate',
    completedDate: 'completedDate',
    status: 'status',
    cost: 'cost',
    notes: 'notes',
    assetId: 'assetId',
    technicianId: 'technicianId',
    vendorId: 'vendorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MaintenanceRecordScalarFieldEnum = (typeof MaintenanceRecordScalarFieldEnum)[keyof typeof MaintenanceRecordScalarFieldEnum]


  export const MaintenanceContractScalarFieldEnum: {
    id: 'id',
    contractNumber: 'contractNumber',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    cost: 'cost',
    terms: 'terms',
    isActive: 'isActive',
    vendorId: 'vendorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MaintenanceContractScalarFieldEnum = (typeof MaintenanceContractScalarFieldEnum)[keyof typeof MaintenanceContractScalarFieldEnum]


  export const AuditRecordScalarFieldEnum: {
    id: 'id',
    auditType: 'auditType',
    scheduledDate: 'scheduledDate',
    completedDate: 'completedDate',
    status: 'status',
    findings: 'findings',
    recommendations: 'recommendations',
    assetId: 'assetId',
    auditorId: 'auditorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AuditRecordScalarFieldEnum = (typeof AuditRecordScalarFieldEnum)[keyof typeof AuditRecordScalarFieldEnum]


  export const DisposalRecordScalarFieldEnum: {
    id: 'id',
    disposalType: 'disposalType',
    disposalDate: 'disposalDate',
    disposalValue: 'disposalValue',
    reason: 'reason',
    approvalReference: 'approvalReference',
    notes: 'notes',
    assetId: 'assetId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DisposalRecordScalarFieldEnum = (typeof DisposalRecordScalarFieldEnum)[keyof typeof DisposalRecordScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    message: 'message',
    type: 'type',
    isRead: 'isRead',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const SystemSettingsScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemSettingsScalarFieldEnum = (typeof SystemSettingsScalarFieldEnum)[keyof typeof SystemSettingsScalarFieldEnum]


  export const SparePartScalarFieldEnum: {
    id: 'id',
    partNumber: 'partNumber',
    name: 'name',
    description: 'description',
    brand: 'brand',
    model: 'model',
    category: 'category',
    partType: 'partType',
    status: 'status',
    unitPrice: 'unitPrice',
    stockLevel: 'stockLevel',
    minStockLevel: 'minStockLevel',
    maxStockLevel: 'maxStockLevel',
    reorderPoint: 'reorderPoint',
    storageLocation: 'storageLocation',
    specifications: 'specifications',
    compatibleWith: 'compatibleWith',
    notes: 'notes',
    isActive: 'isActive',
    vendorId: 'vendorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SparePartScalarFieldEnum = (typeof SparePartScalarFieldEnum)[keyof typeof SparePartScalarFieldEnum]


  export const ProcurementScalarFieldEnum: {
    id: 'id',
    procurementNumber: 'procurementNumber',
    quantity: 'quantity',
    unitPrice: 'unitPrice',
    totalCost: 'totalCost',
    status: 'status',
    orderedDate: 'orderedDate',
    expectedDate: 'expectedDate',
    receivedDate: 'receivedDate',
    receivedQuantity: 'receivedQuantity',
    invoiceNumber: 'invoiceNumber',
    notes: 'notes',
    partId: 'partId',
    vendorId: 'vendorId',
    orderedById: 'orderedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProcurementScalarFieldEnum = (typeof ProcurementScalarFieldEnum)[keyof typeof ProcurementScalarFieldEnum]


  export const PartUsageScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    usageType: 'usageType',
    usageDate: 'usageDate',
    notes: 'notes',
    partId: 'partId',
    assetId: 'assetId',
    componentId: 'componentId',
    maintenanceId: 'maintenanceId',
    usedById: 'usedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PartUsageScalarFieldEnum = (typeof PartUsageScalarFieldEnum)[keyof typeof PartUsageScalarFieldEnum]


  export const PartReplacementScalarFieldEnum: {
    id: 'id',
    replacementNumber: 'replacementNumber',
    reason: 'reason',
    status: 'status',
    plannedDate: 'plannedDate',
    completedDate: 'completedDate',
    cost: 'cost',
    notes: 'notes',
    oldPartId: 'oldPartId',
    oldComponentId: 'oldComponentId',
    newPartId: 'newPartId',
    assetId: 'assetId',
    performedById: 'performedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PartReplacementScalarFieldEnum = (typeof PartReplacementScalarFieldEnum)[keyof typeof PartReplacementScalarFieldEnum]


  export const NewPartRegistrationScalarFieldEnum: {
    id: 'id',
    registrationNumber: 'registrationNumber',
    serialNumber: 'serialNumber',
    assetTag: 'assetTag',
    status: 'status',
    registeredDate: 'registeredDate',
    notes: 'notes',
    partId: 'partId',
    assetId: 'assetId',
    registeredById: 'registeredById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NewPartRegistrationScalarFieldEnum = (typeof NewPartRegistrationScalarFieldEnum)[keyof typeof NewPartRegistrationScalarFieldEnum]


  export const AssetComponentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    partNumber: 'partNumber',
    serialNumber: 'serialNumber',
    brand: 'brand',
    model: 'model',
    status: 'status',
    purchaseDate: 'purchaseDate',
    purchasePrice: 'purchasePrice',
    warrantyExpiry: 'warrantyExpiry',
    isReplaceable: 'isReplaceable',
    isTransferable: 'isTransferable',
    notes: 'notes',
    specifications: 'specifications',
    assetId: 'assetId',
    parentAssetId: 'parentAssetId',
    sourcePartId: 'sourcePartId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssetComponentScalarFieldEnum = (typeof AssetComponentScalarFieldEnum)[keyof typeof AssetComponentScalarFieldEnum]


  export const ComponentTransferScalarFieldEnum: {
    id: 'id',
    transferNumber: 'transferNumber',
    reason: 'reason',
    transferDate: 'transferDate',
    notes: 'notes',
    componentId: 'componentId',
    fromAssetId: 'fromAssetId',
    toAssetId: 'toAssetId',
    transferredById: 'transferredById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ComponentTransferScalarFieldEnum = (typeof ComponentTransferScalarFieldEnum)[keyof typeof ComponentTransferScalarFieldEnum]


  export const ComponentMaintenanceScalarFieldEnum: {
    id: 'id',
    description: 'description',
    maintenanceType: 'maintenanceType',
    maintenanceDate: 'maintenanceDate',
    cost: 'cost',
    notes: 'notes',
    componentId: 'componentId',
    performedById: 'performedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ComponentMaintenanceScalarFieldEnum = (typeof ComponentMaintenanceScalarFieldEnum)[keyof typeof ComponentMaintenanceScalarFieldEnum]


  export const InventoryScalarFieldEnum: {
    id: 'id',
    inventoryTag: 'inventoryTag',
    quantity: 'quantity',
    availableQty: 'availableQty',
    condition: 'condition',
    status: 'status',
    location: 'location',
    notes: 'notes',
    minStockLevel: 'minStockLevel',
    assetId: 'assetId',
    departmentId: 'departmentId',
    custodianId: 'custodianId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InventoryScalarFieldEnum = (typeof InventoryScalarFieldEnum)[keyof typeof InventoryScalarFieldEnum]


  export const InventoryLoanScalarFieldEnum: {
    id: 'id',
    loanNumber: 'loanNumber',
    purpose: 'purpose',
    quantity: 'quantity',
    loanDate: 'loanDate',
    expectedReturnDate: 'expectedReturnDate',
    actualReturnDate: 'actualReturnDate',
    status: 'status',
    condition: 'condition',
    notes: 'notes',
    approvalNotes: 'approvalNotes',
    inventoryId: 'inventoryId',
    borrowerId: 'borrowerId',
    approvedById: 'approvedById',
    responsibleId: 'responsibleId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InventoryLoanScalarFieldEnum = (typeof InventoryLoanScalarFieldEnum)[keyof typeof InventoryLoanScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'AssetStatus'
   */
  export type EnumAssetStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetStatus'>
    


  /**
   * Reference to a field of type 'AssetStatus[]'
   */
  export type ListEnumAssetStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetStatus[]'>
    


  /**
   * Reference to a field of type 'RequestStatus'
   */
  export type EnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus'>
    


  /**
   * Reference to a field of type 'RequestStatus[]'
   */
  export type ListEnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus[]'>
    


  /**
   * Reference to a field of type 'MaintenanceStatus'
   */
  export type EnumMaintenanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceStatus'>
    


  /**
   * Reference to a field of type 'MaintenanceStatus[]'
   */
  export type ListEnumMaintenanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceStatus[]'>
    


  /**
   * Reference to a field of type 'AuditStatus'
   */
  export type EnumAuditStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditStatus'>
    


  /**
   * Reference to a field of type 'AuditStatus[]'
   */
  export type ListEnumAuditStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'SparePartCategory'
   */
  export type EnumSparePartCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SparePartCategory'>
    


  /**
   * Reference to a field of type 'SparePartCategory[]'
   */
  export type ListEnumSparePartCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SparePartCategory[]'>
    


  /**
   * Reference to a field of type 'SparePartType'
   */
  export type EnumSparePartTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SparePartType'>
    


  /**
   * Reference to a field of type 'SparePartType[]'
   */
  export type ListEnumSparePartTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SparePartType[]'>
    


  /**
   * Reference to a field of type 'SparePartStatus'
   */
  export type EnumSparePartStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SparePartStatus'>
    


  /**
   * Reference to a field of type 'SparePartStatus[]'
   */
  export type ListEnumSparePartStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SparePartStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'ProcurementStatus'
   */
  export type EnumProcurementStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcurementStatus'>
    


  /**
   * Reference to a field of type 'ProcurementStatus[]'
   */
  export type ListEnumProcurementStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcurementStatus[]'>
    


  /**
   * Reference to a field of type 'PartUsageType'
   */
  export type EnumPartUsageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PartUsageType'>
    


  /**
   * Reference to a field of type 'PartUsageType[]'
   */
  export type ListEnumPartUsageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PartUsageType[]'>
    


  /**
   * Reference to a field of type 'ReplacementStatus'
   */
  export type EnumReplacementStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReplacementStatus'>
    


  /**
   * Reference to a field of type 'ReplacementStatus[]'
   */
  export type ListEnumReplacementStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReplacementStatus[]'>
    


  /**
   * Reference to a field of type 'RegistrationStatus'
   */
  export type EnumRegistrationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RegistrationStatus'>
    


  /**
   * Reference to a field of type 'RegistrationStatus[]'
   */
  export type ListEnumRegistrationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RegistrationStatus[]'>
    


  /**
   * Reference to a field of type 'ComponentStatus'
   */
  export type EnumComponentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComponentStatus'>
    


  /**
   * Reference to a field of type 'ComponentStatus[]'
   */
  export type ListEnumComponentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComponentStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    departmentId?: StringNullableFilter<"User"> | string | null
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    assetRequests?: AssetRequestListRelationFilter
    approvedRequests?: AssetRequestListRelationFilter
    assignedAssets?: AssetListRelationFilter
    maintenanceRecords?: MaintenanceRecordListRelationFilter
    managedDepartments?: DepartmentListRelationFilter
    auditRecords?: AuditRecordListRelationFilter
    notifications?: NotificationListRelationFilter
    procurementsOrdered?: ProcurementListRelationFilter
    partUsages?: PartUsageListRelationFilter
    replacementsPerformed?: PartReplacementListRelationFilter
    partRegistrations?: NewPartRegistrationListRelationFilter
    componentTransfers?: ComponentTransferListRelationFilter
    componentMaintenance?: ComponentMaintenanceListRelationFilter
    custodiedInventories?: InventoryListRelationFilter
    borrowedLoans?: InventoryLoanListRelationFilter
    approvedLoans?: InventoryLoanListRelationFilter
    responsibleLoans?: InventoryLoanListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    department?: DepartmentOrderByWithRelationInput
    assetRequests?: AssetRequestOrderByRelationAggregateInput
    approvedRequests?: AssetRequestOrderByRelationAggregateInput
    assignedAssets?: AssetOrderByRelationAggregateInput
    maintenanceRecords?: MaintenanceRecordOrderByRelationAggregateInput
    managedDepartments?: DepartmentOrderByRelationAggregateInput
    auditRecords?: AuditRecordOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    procurementsOrdered?: ProcurementOrderByRelationAggregateInput
    partUsages?: PartUsageOrderByRelationAggregateInput
    replacementsPerformed?: PartReplacementOrderByRelationAggregateInput
    partRegistrations?: NewPartRegistrationOrderByRelationAggregateInput
    componentTransfers?: ComponentTransferOrderByRelationAggregateInput
    componentMaintenance?: ComponentMaintenanceOrderByRelationAggregateInput
    custodiedInventories?: InventoryOrderByRelationAggregateInput
    borrowedLoans?: InventoryLoanOrderByRelationAggregateInput
    approvedLoans?: InventoryLoanOrderByRelationAggregateInput
    responsibleLoans?: InventoryLoanOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    departmentId?: StringNullableFilter<"User"> | string | null
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    assetRequests?: AssetRequestListRelationFilter
    approvedRequests?: AssetRequestListRelationFilter
    assignedAssets?: AssetListRelationFilter
    maintenanceRecords?: MaintenanceRecordListRelationFilter
    managedDepartments?: DepartmentListRelationFilter
    auditRecords?: AuditRecordListRelationFilter
    notifications?: NotificationListRelationFilter
    procurementsOrdered?: ProcurementListRelationFilter
    partUsages?: PartUsageListRelationFilter
    replacementsPerformed?: PartReplacementListRelationFilter
    partRegistrations?: NewPartRegistrationListRelationFilter
    componentTransfers?: ComponentTransferListRelationFilter
    componentMaintenance?: ComponentMaintenanceListRelationFilter
    custodiedInventories?: InventoryListRelationFilter
    borrowedLoans?: InventoryLoanListRelationFilter
    approvedLoans?: InventoryLoanListRelationFilter
    responsibleLoans?: InventoryLoanListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    departmentId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    code?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    managerId?: StringNullableFilter<"Department"> | string | null
    budgetLimit?: DecimalNullableFilter<"Department"> | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFilter<"Department"> | boolean
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    manager?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    users?: UserListRelationFilter
    assets?: AssetListRelationFilter
    assetRequests?: AssetRequestListRelationFilter
    inventories?: InventoryListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    managerId?: SortOrderInput | SortOrder
    budgetLimit?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    manager?: UserOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    assets?: AssetOrderByRelationAggregateInput
    assetRequests?: AssetRequestOrderByRelationAggregateInput
    inventories?: InventoryOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    description?: StringNullableFilter<"Department"> | string | null
    managerId?: StringNullableFilter<"Department"> | string | null
    budgetLimit?: DecimalNullableFilter<"Department"> | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFilter<"Department"> | boolean
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    manager?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    users?: UserListRelationFilter
    assets?: AssetListRelationFilter
    assetRequests?: AssetRequestListRelationFilter
    inventories?: InventoryListRelationFilter
  }, "id" | "name" | "code">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    managerId?: SortOrderInput | SortOrder
    budgetLimit?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    code?: StringWithAggregatesFilter<"Department"> | string
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
    managerId?: StringNullableWithAggregatesFilter<"Department"> | string | null
    budgetLimit?: DecimalNullableWithAggregatesFilter<"Department"> | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolWithAggregatesFilter<"Department"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    building?: StringNullableFilter<"Location"> | string | null
    floor?: StringNullableFilter<"Location"> | string | null
    room?: StringNullableFilter<"Location"> | string | null
    address?: StringNullableFilter<"Location"> | string | null
    description?: StringNullableFilter<"Location"> | string | null
    isActive?: BoolFilter<"Location"> | boolean
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    assets?: AssetListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    building?: SortOrderInput | SortOrder
    floor?: SortOrderInput | SortOrder
    room?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assets?: AssetOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    name?: StringFilter<"Location"> | string
    building?: StringNullableFilter<"Location"> | string | null
    floor?: StringNullableFilter<"Location"> | string | null
    room?: StringNullableFilter<"Location"> | string | null
    address?: StringNullableFilter<"Location"> | string | null
    description?: StringNullableFilter<"Location"> | string | null
    isActive?: BoolFilter<"Location"> | boolean
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    assets?: AssetListRelationFilter
  }, "id">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    building?: SortOrderInput | SortOrder
    floor?: SortOrderInput | SortOrder
    room?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Location"> | string
    name?: StringWithAggregatesFilter<"Location"> | string
    building?: StringNullableWithAggregatesFilter<"Location"> | string | null
    floor?: StringNullableWithAggregatesFilter<"Location"> | string | null
    room?: StringNullableWithAggregatesFilter<"Location"> | string | null
    address?: StringNullableWithAggregatesFilter<"Location"> | string | null
    description?: StringNullableWithAggregatesFilter<"Location"> | string | null
    isActive?: BoolWithAggregatesFilter<"Location"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    code?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    parentId?: StringNullableFilter<"Category"> | string | null
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parent?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    assets?: AssetListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parent?: CategoryOrderByWithRelationInput
    children?: CategoryOrderByRelationAggregateInput
    assets?: AssetOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    description?: StringNullableFilter<"Category"> | string | null
    parentId?: StringNullableFilter<"Category"> | string | null
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parent?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    assets?: AssetListRelationFilter
  }, "id" | "name" | "code">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    code?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    parentId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    isActive?: BoolWithAggregatesFilter<"Category"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type VendorWhereInput = {
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    id?: StringFilter<"Vendor"> | string
    name?: StringFilter<"Vendor"> | string
    code?: StringFilter<"Vendor"> | string
    email?: StringNullableFilter<"Vendor"> | string | null
    phone?: StringNullableFilter<"Vendor"> | string | null
    address?: StringNullableFilter<"Vendor"> | string | null
    contactPerson?: StringNullableFilter<"Vendor"> | string | null
    isActive?: BoolFilter<"Vendor"> | boolean
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeFilter<"Vendor"> | Date | string
    assets?: AssetListRelationFilter
    maintenanceContracts?: MaintenanceContractListRelationFilter
    maintenanceRecords?: MaintenanceRecordListRelationFilter
    spareParts?: SparePartListRelationFilter
    procurements?: ProcurementListRelationFilter
  }

  export type VendorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    contactPerson?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assets?: AssetOrderByRelationAggregateInput
    maintenanceContracts?: MaintenanceContractOrderByRelationAggregateInput
    maintenanceRecords?: MaintenanceRecordOrderByRelationAggregateInput
    spareParts?: SparePartOrderByRelationAggregateInput
    procurements?: ProcurementOrderByRelationAggregateInput
  }

  export type VendorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    email?: StringNullableFilter<"Vendor"> | string | null
    phone?: StringNullableFilter<"Vendor"> | string | null
    address?: StringNullableFilter<"Vendor"> | string | null
    contactPerson?: StringNullableFilter<"Vendor"> | string | null
    isActive?: BoolFilter<"Vendor"> | boolean
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeFilter<"Vendor"> | Date | string
    assets?: AssetListRelationFilter
    maintenanceContracts?: MaintenanceContractListRelationFilter
    maintenanceRecords?: MaintenanceRecordListRelationFilter
    spareParts?: SparePartListRelationFilter
    procurements?: ProcurementListRelationFilter
  }, "id" | "name" | "code">

  export type VendorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    contactPerson?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VendorCountOrderByAggregateInput
    _max?: VendorMaxOrderByAggregateInput
    _min?: VendorMinOrderByAggregateInput
  }

  export type VendorScalarWhereWithAggregatesInput = {
    AND?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    OR?: VendorScalarWhereWithAggregatesInput[]
    NOT?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vendor"> | string
    name?: StringWithAggregatesFilter<"Vendor"> | string
    code?: StringWithAggregatesFilter<"Vendor"> | string
    email?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    address?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    contactPerson?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    isActive?: BoolWithAggregatesFilter<"Vendor"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Vendor"> | Date | string
  }

  export type AssetWhereInput = {
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    id?: StringFilter<"Asset"> | string
    assetTag?: StringFilter<"Asset"> | string
    name?: StringFilter<"Asset"> | string
    description?: StringNullableFilter<"Asset"> | string | null
    serialNumber?: StringNullableFilter<"Asset"> | string | null
    model?: StringNullableFilter<"Asset"> | string | null
    brand?: StringNullableFilter<"Asset"> | string | null
    purchaseDate?: DateTimeNullableFilter<"Asset"> | Date | string | null
    purchasePrice?: DecimalNullableFilter<"Asset"> | Decimal | DecimalJsLike | number | string | null
    currentValue?: DecimalNullableFilter<"Asset"> | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: DateTimeNullableFilter<"Asset"> | Date | string | null
    status?: EnumAssetStatusFilter<"Asset"> | $Enums.AssetStatus
    condition?: StringNullableFilter<"Asset"> | string | null
    notes?: StringNullableFilter<"Asset"> | string | null
    isActive?: BoolFilter<"Asset"> | boolean
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    categoryId?: StringFilter<"Asset"> | string
    vendorId?: StringNullableFilter<"Asset"> | string | null
    locationId?: StringNullableFilter<"Asset"> | string | null
    departmentId?: StringNullableFilter<"Asset"> | string | null
    assignedToId?: StringNullableFilter<"Asset"> | string | null
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    assetRequests?: AssetRequestListRelationFilter
    maintenanceRecords?: MaintenanceRecordListRelationFilter
    auditRecords?: AuditRecordListRelationFilter
    disposalRecord?: XOR<DisposalRecordNullableRelationFilter, DisposalRecordWhereInput> | null
    partUsages?: PartUsageListRelationFilter
    partReplacements?: PartReplacementListRelationFilter
    partRegistrations?: NewPartRegistrationListRelationFilter
    components?: AssetComponentListRelationFilter
    parentComponents?: AssetComponentListRelationFilter
    transfersFrom?: ComponentTransferListRelationFilter
    transfersTo?: ComponentTransferListRelationFilter
    inventories?: InventoryListRelationFilter
  }

  export type AssetOrderByWithRelationInput = {
    id?: SortOrder
    assetTag?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    serialNumber?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    brand?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    purchasePrice?: SortOrderInput | SortOrder
    currentValue?: SortOrderInput | SortOrder
    warrantyExpiry?: SortOrderInput | SortOrder
    status?: SortOrder
    condition?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    vendorId?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    assignedToId?: SortOrderInput | SortOrder
    category?: CategoryOrderByWithRelationInput
    vendor?: VendorOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
    assetRequests?: AssetRequestOrderByRelationAggregateInput
    maintenanceRecords?: MaintenanceRecordOrderByRelationAggregateInput
    auditRecords?: AuditRecordOrderByRelationAggregateInput
    disposalRecord?: DisposalRecordOrderByWithRelationInput
    partUsages?: PartUsageOrderByRelationAggregateInput
    partReplacements?: PartReplacementOrderByRelationAggregateInput
    partRegistrations?: NewPartRegistrationOrderByRelationAggregateInput
    components?: AssetComponentOrderByRelationAggregateInput
    parentComponents?: AssetComponentOrderByRelationAggregateInput
    transfersFrom?: ComponentTransferOrderByRelationAggregateInput
    transfersTo?: ComponentTransferOrderByRelationAggregateInput
    inventories?: InventoryOrderByRelationAggregateInput
  }

  export type AssetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    assetTag?: string
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    name?: StringFilter<"Asset"> | string
    description?: StringNullableFilter<"Asset"> | string | null
    serialNumber?: StringNullableFilter<"Asset"> | string | null
    model?: StringNullableFilter<"Asset"> | string | null
    brand?: StringNullableFilter<"Asset"> | string | null
    purchaseDate?: DateTimeNullableFilter<"Asset"> | Date | string | null
    purchasePrice?: DecimalNullableFilter<"Asset"> | Decimal | DecimalJsLike | number | string | null
    currentValue?: DecimalNullableFilter<"Asset"> | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: DateTimeNullableFilter<"Asset"> | Date | string | null
    status?: EnumAssetStatusFilter<"Asset"> | $Enums.AssetStatus
    condition?: StringNullableFilter<"Asset"> | string | null
    notes?: StringNullableFilter<"Asset"> | string | null
    isActive?: BoolFilter<"Asset"> | boolean
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    categoryId?: StringFilter<"Asset"> | string
    vendorId?: StringNullableFilter<"Asset"> | string | null
    locationId?: StringNullableFilter<"Asset"> | string | null
    departmentId?: StringNullableFilter<"Asset"> | string | null
    assignedToId?: StringNullableFilter<"Asset"> | string | null
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    assetRequests?: AssetRequestListRelationFilter
    maintenanceRecords?: MaintenanceRecordListRelationFilter
    auditRecords?: AuditRecordListRelationFilter
    disposalRecord?: XOR<DisposalRecordNullableRelationFilter, DisposalRecordWhereInput> | null
    partUsages?: PartUsageListRelationFilter
    partReplacements?: PartReplacementListRelationFilter
    partRegistrations?: NewPartRegistrationListRelationFilter
    components?: AssetComponentListRelationFilter
    parentComponents?: AssetComponentListRelationFilter
    transfersFrom?: ComponentTransferListRelationFilter
    transfersTo?: ComponentTransferListRelationFilter
    inventories?: InventoryListRelationFilter
  }, "id" | "assetTag">

  export type AssetOrderByWithAggregationInput = {
    id?: SortOrder
    assetTag?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    serialNumber?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    brand?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    purchasePrice?: SortOrderInput | SortOrder
    currentValue?: SortOrderInput | SortOrder
    warrantyExpiry?: SortOrderInput | SortOrder
    status?: SortOrder
    condition?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    vendorId?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    assignedToId?: SortOrderInput | SortOrder
    _count?: AssetCountOrderByAggregateInput
    _avg?: AssetAvgOrderByAggregateInput
    _max?: AssetMaxOrderByAggregateInput
    _min?: AssetMinOrderByAggregateInput
    _sum?: AssetSumOrderByAggregateInput
  }

  export type AssetScalarWhereWithAggregatesInput = {
    AND?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    OR?: AssetScalarWhereWithAggregatesInput[]
    NOT?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Asset"> | string
    assetTag?: StringWithAggregatesFilter<"Asset"> | string
    name?: StringWithAggregatesFilter<"Asset"> | string
    description?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    serialNumber?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    model?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    brand?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    purchaseDate?: DateTimeNullableWithAggregatesFilter<"Asset"> | Date | string | null
    purchasePrice?: DecimalNullableWithAggregatesFilter<"Asset"> | Decimal | DecimalJsLike | number | string | null
    currentValue?: DecimalNullableWithAggregatesFilter<"Asset"> | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: DateTimeNullableWithAggregatesFilter<"Asset"> | Date | string | null
    status?: EnumAssetStatusWithAggregatesFilter<"Asset"> | $Enums.AssetStatus
    condition?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    isActive?: BoolWithAggregatesFilter<"Asset"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
    categoryId?: StringWithAggregatesFilter<"Asset"> | string
    vendorId?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    locationId?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    departmentId?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    assignedToId?: StringNullableWithAggregatesFilter<"Asset"> | string | null
  }

  export type AssetRequestWhereInput = {
    AND?: AssetRequestWhereInput | AssetRequestWhereInput[]
    OR?: AssetRequestWhereInput[]
    NOT?: AssetRequestWhereInput | AssetRequestWhereInput[]
    id?: StringFilter<"AssetRequest"> | string
    requestNumber?: StringFilter<"AssetRequest"> | string
    description?: StringFilter<"AssetRequest"> | string
    justification?: StringFilter<"AssetRequest"> | string
    priority?: StringFilter<"AssetRequest"> | string
    status?: EnumRequestStatusFilter<"AssetRequest"> | $Enums.RequestStatus
    requestedDate?: DateTimeFilter<"AssetRequest"> | Date | string
    approvedDate?: DateTimeNullableFilter<"AssetRequest"> | Date | string | null
    allocatedDate?: DateTimeNullableFilter<"AssetRequest"> | Date | string | null
    rejectionReason?: StringNullableFilter<"AssetRequest"> | string | null
    notes?: StringNullableFilter<"AssetRequest"> | string | null
    requesterId?: StringFilter<"AssetRequest"> | string
    departmentId?: StringFilter<"AssetRequest"> | string
    assetId?: StringNullableFilter<"AssetRequest"> | string | null
    approvedById?: StringNullableFilter<"AssetRequest"> | string | null
    createdAt?: DateTimeFilter<"AssetRequest"> | Date | string
    updatedAt?: DateTimeFilter<"AssetRequest"> | Date | string
    requester?: XOR<UserRelationFilter, UserWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    asset?: XOR<AssetNullableRelationFilter, AssetWhereInput> | null
    approvedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AssetRequestOrderByWithRelationInput = {
    id?: SortOrder
    requestNumber?: SortOrder
    description?: SortOrder
    justification?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    requestedDate?: SortOrder
    approvedDate?: SortOrderInput | SortOrder
    allocatedDate?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    requesterId?: SortOrder
    departmentId?: SortOrder
    assetId?: SortOrderInput | SortOrder
    approvedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requester?: UserOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
    approvedBy?: UserOrderByWithRelationInput
  }

  export type AssetRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    requestNumber?: string
    AND?: AssetRequestWhereInput | AssetRequestWhereInput[]
    OR?: AssetRequestWhereInput[]
    NOT?: AssetRequestWhereInput | AssetRequestWhereInput[]
    description?: StringFilter<"AssetRequest"> | string
    justification?: StringFilter<"AssetRequest"> | string
    priority?: StringFilter<"AssetRequest"> | string
    status?: EnumRequestStatusFilter<"AssetRequest"> | $Enums.RequestStatus
    requestedDate?: DateTimeFilter<"AssetRequest"> | Date | string
    approvedDate?: DateTimeNullableFilter<"AssetRequest"> | Date | string | null
    allocatedDate?: DateTimeNullableFilter<"AssetRequest"> | Date | string | null
    rejectionReason?: StringNullableFilter<"AssetRequest"> | string | null
    notes?: StringNullableFilter<"AssetRequest"> | string | null
    requesterId?: StringFilter<"AssetRequest"> | string
    departmentId?: StringFilter<"AssetRequest"> | string
    assetId?: StringNullableFilter<"AssetRequest"> | string | null
    approvedById?: StringNullableFilter<"AssetRequest"> | string | null
    createdAt?: DateTimeFilter<"AssetRequest"> | Date | string
    updatedAt?: DateTimeFilter<"AssetRequest"> | Date | string
    requester?: XOR<UserRelationFilter, UserWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    asset?: XOR<AssetNullableRelationFilter, AssetWhereInput> | null
    approvedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "requestNumber">

  export type AssetRequestOrderByWithAggregationInput = {
    id?: SortOrder
    requestNumber?: SortOrder
    description?: SortOrder
    justification?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    requestedDate?: SortOrder
    approvedDate?: SortOrderInput | SortOrder
    allocatedDate?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    requesterId?: SortOrder
    departmentId?: SortOrder
    assetId?: SortOrderInput | SortOrder
    approvedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssetRequestCountOrderByAggregateInput
    _max?: AssetRequestMaxOrderByAggregateInput
    _min?: AssetRequestMinOrderByAggregateInput
  }

  export type AssetRequestScalarWhereWithAggregatesInput = {
    AND?: AssetRequestScalarWhereWithAggregatesInput | AssetRequestScalarWhereWithAggregatesInput[]
    OR?: AssetRequestScalarWhereWithAggregatesInput[]
    NOT?: AssetRequestScalarWhereWithAggregatesInput | AssetRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AssetRequest"> | string
    requestNumber?: StringWithAggregatesFilter<"AssetRequest"> | string
    description?: StringWithAggregatesFilter<"AssetRequest"> | string
    justification?: StringWithAggregatesFilter<"AssetRequest"> | string
    priority?: StringWithAggregatesFilter<"AssetRequest"> | string
    status?: EnumRequestStatusWithAggregatesFilter<"AssetRequest"> | $Enums.RequestStatus
    requestedDate?: DateTimeWithAggregatesFilter<"AssetRequest"> | Date | string
    approvedDate?: DateTimeNullableWithAggregatesFilter<"AssetRequest"> | Date | string | null
    allocatedDate?: DateTimeNullableWithAggregatesFilter<"AssetRequest"> | Date | string | null
    rejectionReason?: StringNullableWithAggregatesFilter<"AssetRequest"> | string | null
    notes?: StringNullableWithAggregatesFilter<"AssetRequest"> | string | null
    requesterId?: StringWithAggregatesFilter<"AssetRequest"> | string
    departmentId?: StringWithAggregatesFilter<"AssetRequest"> | string
    assetId?: StringNullableWithAggregatesFilter<"AssetRequest"> | string | null
    approvedById?: StringNullableWithAggregatesFilter<"AssetRequest"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AssetRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AssetRequest"> | Date | string
  }

  export type MaintenanceRecordWhereInput = {
    AND?: MaintenanceRecordWhereInput | MaintenanceRecordWhereInput[]
    OR?: MaintenanceRecordWhereInput[]
    NOT?: MaintenanceRecordWhereInput | MaintenanceRecordWhereInput[]
    id?: StringFilter<"MaintenanceRecord"> | string
    maintenanceType?: StringFilter<"MaintenanceRecord"> | string
    description?: StringFilter<"MaintenanceRecord"> | string
    scheduledDate?: DateTimeFilter<"MaintenanceRecord"> | Date | string
    completedDate?: DateTimeNullableFilter<"MaintenanceRecord"> | Date | string | null
    status?: EnumMaintenanceStatusFilter<"MaintenanceRecord"> | $Enums.MaintenanceStatus
    cost?: DecimalNullableFilter<"MaintenanceRecord"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"MaintenanceRecord"> | string | null
    assetId?: StringFilter<"MaintenanceRecord"> | string
    technicianId?: StringNullableFilter<"MaintenanceRecord"> | string | null
    vendorId?: StringNullableFilter<"MaintenanceRecord"> | string | null
    createdAt?: DateTimeFilter<"MaintenanceRecord"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceRecord"> | Date | string
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    technician?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    partUsages?: PartUsageListRelationFilter
  }

  export type MaintenanceRecordOrderByWithRelationInput = {
    id?: SortOrder
    maintenanceType?: SortOrder
    description?: SortOrder
    scheduledDate?: SortOrder
    completedDate?: SortOrderInput | SortOrder
    status?: SortOrder
    cost?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    assetId?: SortOrder
    technicianId?: SortOrderInput | SortOrder
    vendorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset?: AssetOrderByWithRelationInput
    technician?: UserOrderByWithRelationInput
    vendor?: VendorOrderByWithRelationInput
    partUsages?: PartUsageOrderByRelationAggregateInput
  }

  export type MaintenanceRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MaintenanceRecordWhereInput | MaintenanceRecordWhereInput[]
    OR?: MaintenanceRecordWhereInput[]
    NOT?: MaintenanceRecordWhereInput | MaintenanceRecordWhereInput[]
    maintenanceType?: StringFilter<"MaintenanceRecord"> | string
    description?: StringFilter<"MaintenanceRecord"> | string
    scheduledDate?: DateTimeFilter<"MaintenanceRecord"> | Date | string
    completedDate?: DateTimeNullableFilter<"MaintenanceRecord"> | Date | string | null
    status?: EnumMaintenanceStatusFilter<"MaintenanceRecord"> | $Enums.MaintenanceStatus
    cost?: DecimalNullableFilter<"MaintenanceRecord"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"MaintenanceRecord"> | string | null
    assetId?: StringFilter<"MaintenanceRecord"> | string
    technicianId?: StringNullableFilter<"MaintenanceRecord"> | string | null
    vendorId?: StringNullableFilter<"MaintenanceRecord"> | string | null
    createdAt?: DateTimeFilter<"MaintenanceRecord"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceRecord"> | Date | string
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    technician?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    partUsages?: PartUsageListRelationFilter
  }, "id">

  export type MaintenanceRecordOrderByWithAggregationInput = {
    id?: SortOrder
    maintenanceType?: SortOrder
    description?: SortOrder
    scheduledDate?: SortOrder
    completedDate?: SortOrderInput | SortOrder
    status?: SortOrder
    cost?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    assetId?: SortOrder
    technicianId?: SortOrderInput | SortOrder
    vendorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MaintenanceRecordCountOrderByAggregateInput
    _avg?: MaintenanceRecordAvgOrderByAggregateInput
    _max?: MaintenanceRecordMaxOrderByAggregateInput
    _min?: MaintenanceRecordMinOrderByAggregateInput
    _sum?: MaintenanceRecordSumOrderByAggregateInput
  }

  export type MaintenanceRecordScalarWhereWithAggregatesInput = {
    AND?: MaintenanceRecordScalarWhereWithAggregatesInput | MaintenanceRecordScalarWhereWithAggregatesInput[]
    OR?: MaintenanceRecordScalarWhereWithAggregatesInput[]
    NOT?: MaintenanceRecordScalarWhereWithAggregatesInput | MaintenanceRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MaintenanceRecord"> | string
    maintenanceType?: StringWithAggregatesFilter<"MaintenanceRecord"> | string
    description?: StringWithAggregatesFilter<"MaintenanceRecord"> | string
    scheduledDate?: DateTimeWithAggregatesFilter<"MaintenanceRecord"> | Date | string
    completedDate?: DateTimeNullableWithAggregatesFilter<"MaintenanceRecord"> | Date | string | null
    status?: EnumMaintenanceStatusWithAggregatesFilter<"MaintenanceRecord"> | $Enums.MaintenanceStatus
    cost?: DecimalNullableWithAggregatesFilter<"MaintenanceRecord"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableWithAggregatesFilter<"MaintenanceRecord"> | string | null
    assetId?: StringWithAggregatesFilter<"MaintenanceRecord"> | string
    technicianId?: StringNullableWithAggregatesFilter<"MaintenanceRecord"> | string | null
    vendorId?: StringNullableWithAggregatesFilter<"MaintenanceRecord"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MaintenanceRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MaintenanceRecord"> | Date | string
  }

  export type MaintenanceContractWhereInput = {
    AND?: MaintenanceContractWhereInput | MaintenanceContractWhereInput[]
    OR?: MaintenanceContractWhereInput[]
    NOT?: MaintenanceContractWhereInput | MaintenanceContractWhereInput[]
    id?: StringFilter<"MaintenanceContract"> | string
    contractNumber?: StringFilter<"MaintenanceContract"> | string
    description?: StringFilter<"MaintenanceContract"> | string
    startDate?: DateTimeFilter<"MaintenanceContract"> | Date | string
    endDate?: DateTimeFilter<"MaintenanceContract"> | Date | string
    cost?: DecimalFilter<"MaintenanceContract"> | Decimal | DecimalJsLike | number | string
    terms?: StringNullableFilter<"MaintenanceContract"> | string | null
    isActive?: BoolFilter<"MaintenanceContract"> | boolean
    vendorId?: StringFilter<"MaintenanceContract"> | string
    createdAt?: DateTimeFilter<"MaintenanceContract"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceContract"> | Date | string
    vendor?: XOR<VendorRelationFilter, VendorWhereInput>
  }

  export type MaintenanceContractOrderByWithRelationInput = {
    id?: SortOrder
    contractNumber?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    cost?: SortOrder
    terms?: SortOrderInput | SortOrder
    isActive?: SortOrder
    vendorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vendor?: VendorOrderByWithRelationInput
  }

  export type MaintenanceContractWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    contractNumber?: string
    AND?: MaintenanceContractWhereInput | MaintenanceContractWhereInput[]
    OR?: MaintenanceContractWhereInput[]
    NOT?: MaintenanceContractWhereInput | MaintenanceContractWhereInput[]
    description?: StringFilter<"MaintenanceContract"> | string
    startDate?: DateTimeFilter<"MaintenanceContract"> | Date | string
    endDate?: DateTimeFilter<"MaintenanceContract"> | Date | string
    cost?: DecimalFilter<"MaintenanceContract"> | Decimal | DecimalJsLike | number | string
    terms?: StringNullableFilter<"MaintenanceContract"> | string | null
    isActive?: BoolFilter<"MaintenanceContract"> | boolean
    vendorId?: StringFilter<"MaintenanceContract"> | string
    createdAt?: DateTimeFilter<"MaintenanceContract"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceContract"> | Date | string
    vendor?: XOR<VendorRelationFilter, VendorWhereInput>
  }, "id" | "contractNumber">

  export type MaintenanceContractOrderByWithAggregationInput = {
    id?: SortOrder
    contractNumber?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    cost?: SortOrder
    terms?: SortOrderInput | SortOrder
    isActive?: SortOrder
    vendorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MaintenanceContractCountOrderByAggregateInput
    _avg?: MaintenanceContractAvgOrderByAggregateInput
    _max?: MaintenanceContractMaxOrderByAggregateInput
    _min?: MaintenanceContractMinOrderByAggregateInput
    _sum?: MaintenanceContractSumOrderByAggregateInput
  }

  export type MaintenanceContractScalarWhereWithAggregatesInput = {
    AND?: MaintenanceContractScalarWhereWithAggregatesInput | MaintenanceContractScalarWhereWithAggregatesInput[]
    OR?: MaintenanceContractScalarWhereWithAggregatesInput[]
    NOT?: MaintenanceContractScalarWhereWithAggregatesInput | MaintenanceContractScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MaintenanceContract"> | string
    contractNumber?: StringWithAggregatesFilter<"MaintenanceContract"> | string
    description?: StringWithAggregatesFilter<"MaintenanceContract"> | string
    startDate?: DateTimeWithAggregatesFilter<"MaintenanceContract"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"MaintenanceContract"> | Date | string
    cost?: DecimalWithAggregatesFilter<"MaintenanceContract"> | Decimal | DecimalJsLike | number | string
    terms?: StringNullableWithAggregatesFilter<"MaintenanceContract"> | string | null
    isActive?: BoolWithAggregatesFilter<"MaintenanceContract"> | boolean
    vendorId?: StringWithAggregatesFilter<"MaintenanceContract"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MaintenanceContract"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MaintenanceContract"> | Date | string
  }

  export type AuditRecordWhereInput = {
    AND?: AuditRecordWhereInput | AuditRecordWhereInput[]
    OR?: AuditRecordWhereInput[]
    NOT?: AuditRecordWhereInput | AuditRecordWhereInput[]
    id?: StringFilter<"AuditRecord"> | string
    auditType?: StringFilter<"AuditRecord"> | string
    scheduledDate?: DateTimeFilter<"AuditRecord"> | Date | string
    completedDate?: DateTimeNullableFilter<"AuditRecord"> | Date | string | null
    status?: EnumAuditStatusFilter<"AuditRecord"> | $Enums.AuditStatus
    findings?: StringNullableFilter<"AuditRecord"> | string | null
    recommendations?: StringNullableFilter<"AuditRecord"> | string | null
    assetId?: StringNullableFilter<"AuditRecord"> | string | null
    auditorId?: StringFilter<"AuditRecord"> | string
    createdAt?: DateTimeFilter<"AuditRecord"> | Date | string
    updatedAt?: DateTimeFilter<"AuditRecord"> | Date | string
    asset?: XOR<AssetNullableRelationFilter, AssetWhereInput> | null
    auditor?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AuditRecordOrderByWithRelationInput = {
    id?: SortOrder
    auditType?: SortOrder
    scheduledDate?: SortOrder
    completedDate?: SortOrderInput | SortOrder
    status?: SortOrder
    findings?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    assetId?: SortOrderInput | SortOrder
    auditorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset?: AssetOrderByWithRelationInput
    auditor?: UserOrderByWithRelationInput
  }

  export type AuditRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditRecordWhereInput | AuditRecordWhereInput[]
    OR?: AuditRecordWhereInput[]
    NOT?: AuditRecordWhereInput | AuditRecordWhereInput[]
    auditType?: StringFilter<"AuditRecord"> | string
    scheduledDate?: DateTimeFilter<"AuditRecord"> | Date | string
    completedDate?: DateTimeNullableFilter<"AuditRecord"> | Date | string | null
    status?: EnumAuditStatusFilter<"AuditRecord"> | $Enums.AuditStatus
    findings?: StringNullableFilter<"AuditRecord"> | string | null
    recommendations?: StringNullableFilter<"AuditRecord"> | string | null
    assetId?: StringNullableFilter<"AuditRecord"> | string | null
    auditorId?: StringFilter<"AuditRecord"> | string
    createdAt?: DateTimeFilter<"AuditRecord"> | Date | string
    updatedAt?: DateTimeFilter<"AuditRecord"> | Date | string
    asset?: XOR<AssetNullableRelationFilter, AssetWhereInput> | null
    auditor?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AuditRecordOrderByWithAggregationInput = {
    id?: SortOrder
    auditType?: SortOrder
    scheduledDate?: SortOrder
    completedDate?: SortOrderInput | SortOrder
    status?: SortOrder
    findings?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    assetId?: SortOrderInput | SortOrder
    auditorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AuditRecordCountOrderByAggregateInput
    _max?: AuditRecordMaxOrderByAggregateInput
    _min?: AuditRecordMinOrderByAggregateInput
  }

  export type AuditRecordScalarWhereWithAggregatesInput = {
    AND?: AuditRecordScalarWhereWithAggregatesInput | AuditRecordScalarWhereWithAggregatesInput[]
    OR?: AuditRecordScalarWhereWithAggregatesInput[]
    NOT?: AuditRecordScalarWhereWithAggregatesInput | AuditRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditRecord"> | string
    auditType?: StringWithAggregatesFilter<"AuditRecord"> | string
    scheduledDate?: DateTimeWithAggregatesFilter<"AuditRecord"> | Date | string
    completedDate?: DateTimeNullableWithAggregatesFilter<"AuditRecord"> | Date | string | null
    status?: EnumAuditStatusWithAggregatesFilter<"AuditRecord"> | $Enums.AuditStatus
    findings?: StringNullableWithAggregatesFilter<"AuditRecord"> | string | null
    recommendations?: StringNullableWithAggregatesFilter<"AuditRecord"> | string | null
    assetId?: StringNullableWithAggregatesFilter<"AuditRecord"> | string | null
    auditorId?: StringWithAggregatesFilter<"AuditRecord"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AuditRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AuditRecord"> | Date | string
  }

  export type DisposalRecordWhereInput = {
    AND?: DisposalRecordWhereInput | DisposalRecordWhereInput[]
    OR?: DisposalRecordWhereInput[]
    NOT?: DisposalRecordWhereInput | DisposalRecordWhereInput[]
    id?: StringFilter<"DisposalRecord"> | string
    disposalType?: StringFilter<"DisposalRecord"> | string
    disposalDate?: DateTimeFilter<"DisposalRecord"> | Date | string
    disposalValue?: DecimalNullableFilter<"DisposalRecord"> | Decimal | DecimalJsLike | number | string | null
    reason?: StringFilter<"DisposalRecord"> | string
    approvalReference?: StringNullableFilter<"DisposalRecord"> | string | null
    notes?: StringNullableFilter<"DisposalRecord"> | string | null
    assetId?: StringFilter<"DisposalRecord"> | string
    createdAt?: DateTimeFilter<"DisposalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"DisposalRecord"> | Date | string
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
  }

  export type DisposalRecordOrderByWithRelationInput = {
    id?: SortOrder
    disposalType?: SortOrder
    disposalDate?: SortOrder
    disposalValue?: SortOrderInput | SortOrder
    reason?: SortOrder
    approvalReference?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    assetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset?: AssetOrderByWithRelationInput
  }

  export type DisposalRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    assetId?: string
    AND?: DisposalRecordWhereInput | DisposalRecordWhereInput[]
    OR?: DisposalRecordWhereInput[]
    NOT?: DisposalRecordWhereInput | DisposalRecordWhereInput[]
    disposalType?: StringFilter<"DisposalRecord"> | string
    disposalDate?: DateTimeFilter<"DisposalRecord"> | Date | string
    disposalValue?: DecimalNullableFilter<"DisposalRecord"> | Decimal | DecimalJsLike | number | string | null
    reason?: StringFilter<"DisposalRecord"> | string
    approvalReference?: StringNullableFilter<"DisposalRecord"> | string | null
    notes?: StringNullableFilter<"DisposalRecord"> | string | null
    createdAt?: DateTimeFilter<"DisposalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"DisposalRecord"> | Date | string
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
  }, "id" | "assetId">

  export type DisposalRecordOrderByWithAggregationInput = {
    id?: SortOrder
    disposalType?: SortOrder
    disposalDate?: SortOrder
    disposalValue?: SortOrderInput | SortOrder
    reason?: SortOrder
    approvalReference?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    assetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DisposalRecordCountOrderByAggregateInput
    _avg?: DisposalRecordAvgOrderByAggregateInput
    _max?: DisposalRecordMaxOrderByAggregateInput
    _min?: DisposalRecordMinOrderByAggregateInput
    _sum?: DisposalRecordSumOrderByAggregateInput
  }

  export type DisposalRecordScalarWhereWithAggregatesInput = {
    AND?: DisposalRecordScalarWhereWithAggregatesInput | DisposalRecordScalarWhereWithAggregatesInput[]
    OR?: DisposalRecordScalarWhereWithAggregatesInput[]
    NOT?: DisposalRecordScalarWhereWithAggregatesInput | DisposalRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DisposalRecord"> | string
    disposalType?: StringWithAggregatesFilter<"DisposalRecord"> | string
    disposalDate?: DateTimeWithAggregatesFilter<"DisposalRecord"> | Date | string
    disposalValue?: DecimalNullableWithAggregatesFilter<"DisposalRecord"> | Decimal | DecimalJsLike | number | string | null
    reason?: StringWithAggregatesFilter<"DisposalRecord"> | string
    approvalReference?: StringNullableWithAggregatesFilter<"DisposalRecord"> | string | null
    notes?: StringNullableWithAggregatesFilter<"DisposalRecord"> | string | null
    assetId?: StringWithAggregatesFilter<"DisposalRecord"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DisposalRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DisposalRecord"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    userId?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type SystemSettingsWhereInput = {
    AND?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    OR?: SystemSettingsWhereInput[]
    NOT?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    id?: StringFilter<"SystemSettings"> | string
    key?: StringFilter<"SystemSettings"> | string
    value?: StringFilter<"SystemSettings"> | string
    description?: StringNullableFilter<"SystemSettings"> | string | null
    isActive?: BoolFilter<"SystemSettings"> | boolean
    createdAt?: DateTimeFilter<"SystemSettings"> | Date | string
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
  }

  export type SystemSettingsOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    OR?: SystemSettingsWhereInput[]
    NOT?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    value?: StringFilter<"SystemSettings"> | string
    description?: StringNullableFilter<"SystemSettings"> | string | null
    isActive?: BoolFilter<"SystemSettings"> | boolean
    createdAt?: DateTimeFilter<"SystemSettings"> | Date | string
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
  }, "id" | "key">

  export type SystemSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemSettingsCountOrderByAggregateInput
    _max?: SystemSettingsMaxOrderByAggregateInput
    _min?: SystemSettingsMinOrderByAggregateInput
  }

  export type SystemSettingsScalarWhereWithAggregatesInput = {
    AND?: SystemSettingsScalarWhereWithAggregatesInput | SystemSettingsScalarWhereWithAggregatesInput[]
    OR?: SystemSettingsScalarWhereWithAggregatesInput[]
    NOT?: SystemSettingsScalarWhereWithAggregatesInput | SystemSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemSettings"> | string
    key?: StringWithAggregatesFilter<"SystemSettings"> | string
    value?: StringWithAggregatesFilter<"SystemSettings"> | string
    description?: StringNullableWithAggregatesFilter<"SystemSettings"> | string | null
    isActive?: BoolWithAggregatesFilter<"SystemSettings"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SystemSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemSettings"> | Date | string
  }

  export type SparePartWhereInput = {
    AND?: SparePartWhereInput | SparePartWhereInput[]
    OR?: SparePartWhereInput[]
    NOT?: SparePartWhereInput | SparePartWhereInput[]
    id?: StringFilter<"SparePart"> | string
    partNumber?: StringFilter<"SparePart"> | string
    name?: StringFilter<"SparePart"> | string
    description?: StringNullableFilter<"SparePart"> | string | null
    brand?: StringNullableFilter<"SparePart"> | string | null
    model?: StringNullableFilter<"SparePart"> | string | null
    category?: EnumSparePartCategoryFilter<"SparePart"> | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFilter<"SparePart"> | $Enums.SparePartType
    status?: EnumSparePartStatusFilter<"SparePart"> | $Enums.SparePartStatus
    unitPrice?: DecimalFilter<"SparePart"> | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFilter<"SparePart"> | number
    minStockLevel?: IntFilter<"SparePart"> | number
    maxStockLevel?: IntFilter<"SparePart"> | number
    reorderPoint?: IntFilter<"SparePart"> | number
    storageLocation?: StringNullableFilter<"SparePart"> | string | null
    specifications?: JsonNullableFilter<"SparePart">
    compatibleWith?: StringNullableListFilter<"SparePart">
    notes?: StringNullableFilter<"SparePart"> | string | null
    isActive?: BoolFilter<"SparePart"> | boolean
    vendorId?: StringNullableFilter<"SparePart"> | string | null
    createdAt?: DateTimeFilter<"SparePart"> | Date | string
    updatedAt?: DateTimeFilter<"SparePart"> | Date | string
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    procurements?: ProcurementListRelationFilter
    usages?: PartUsageListRelationFilter
    replacements?: PartReplacementListRelationFilter
    oldReplacements?: PartReplacementListRelationFilter
    registrations?: NewPartRegistrationListRelationFilter
    sourceComponents?: AssetComponentListRelationFilter
  }

  export type SparePartOrderByWithRelationInput = {
    id?: SortOrder
    partNumber?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    brand?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    category?: SortOrder
    partType?: SortOrder
    status?: SortOrder
    unitPrice?: SortOrder
    stockLevel?: SortOrder
    minStockLevel?: SortOrder
    maxStockLevel?: SortOrder
    reorderPoint?: SortOrder
    storageLocation?: SortOrderInput | SortOrder
    specifications?: SortOrderInput | SortOrder
    compatibleWith?: SortOrder
    notes?: SortOrderInput | SortOrder
    isActive?: SortOrder
    vendorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vendor?: VendorOrderByWithRelationInput
    procurements?: ProcurementOrderByRelationAggregateInput
    usages?: PartUsageOrderByRelationAggregateInput
    replacements?: PartReplacementOrderByRelationAggregateInput
    oldReplacements?: PartReplacementOrderByRelationAggregateInput
    registrations?: NewPartRegistrationOrderByRelationAggregateInput
    sourceComponents?: AssetComponentOrderByRelationAggregateInput
  }

  export type SparePartWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    partNumber?: string
    AND?: SparePartWhereInput | SparePartWhereInput[]
    OR?: SparePartWhereInput[]
    NOT?: SparePartWhereInput | SparePartWhereInput[]
    name?: StringFilter<"SparePart"> | string
    description?: StringNullableFilter<"SparePart"> | string | null
    brand?: StringNullableFilter<"SparePart"> | string | null
    model?: StringNullableFilter<"SparePart"> | string | null
    category?: EnumSparePartCategoryFilter<"SparePart"> | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFilter<"SparePart"> | $Enums.SparePartType
    status?: EnumSparePartStatusFilter<"SparePart"> | $Enums.SparePartStatus
    unitPrice?: DecimalFilter<"SparePart"> | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFilter<"SparePart"> | number
    minStockLevel?: IntFilter<"SparePart"> | number
    maxStockLevel?: IntFilter<"SparePart"> | number
    reorderPoint?: IntFilter<"SparePart"> | number
    storageLocation?: StringNullableFilter<"SparePart"> | string | null
    specifications?: JsonNullableFilter<"SparePart">
    compatibleWith?: StringNullableListFilter<"SparePart">
    notes?: StringNullableFilter<"SparePart"> | string | null
    isActive?: BoolFilter<"SparePart"> | boolean
    vendorId?: StringNullableFilter<"SparePart"> | string | null
    createdAt?: DateTimeFilter<"SparePart"> | Date | string
    updatedAt?: DateTimeFilter<"SparePart"> | Date | string
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    procurements?: ProcurementListRelationFilter
    usages?: PartUsageListRelationFilter
    replacements?: PartReplacementListRelationFilter
    oldReplacements?: PartReplacementListRelationFilter
    registrations?: NewPartRegistrationListRelationFilter
    sourceComponents?: AssetComponentListRelationFilter
  }, "id" | "partNumber">

  export type SparePartOrderByWithAggregationInput = {
    id?: SortOrder
    partNumber?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    brand?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    category?: SortOrder
    partType?: SortOrder
    status?: SortOrder
    unitPrice?: SortOrder
    stockLevel?: SortOrder
    minStockLevel?: SortOrder
    maxStockLevel?: SortOrder
    reorderPoint?: SortOrder
    storageLocation?: SortOrderInput | SortOrder
    specifications?: SortOrderInput | SortOrder
    compatibleWith?: SortOrder
    notes?: SortOrderInput | SortOrder
    isActive?: SortOrder
    vendorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SparePartCountOrderByAggregateInput
    _avg?: SparePartAvgOrderByAggregateInput
    _max?: SparePartMaxOrderByAggregateInput
    _min?: SparePartMinOrderByAggregateInput
    _sum?: SparePartSumOrderByAggregateInput
  }

  export type SparePartScalarWhereWithAggregatesInput = {
    AND?: SparePartScalarWhereWithAggregatesInput | SparePartScalarWhereWithAggregatesInput[]
    OR?: SparePartScalarWhereWithAggregatesInput[]
    NOT?: SparePartScalarWhereWithAggregatesInput | SparePartScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SparePart"> | string
    partNumber?: StringWithAggregatesFilter<"SparePart"> | string
    name?: StringWithAggregatesFilter<"SparePart"> | string
    description?: StringNullableWithAggregatesFilter<"SparePart"> | string | null
    brand?: StringNullableWithAggregatesFilter<"SparePart"> | string | null
    model?: StringNullableWithAggregatesFilter<"SparePart"> | string | null
    category?: EnumSparePartCategoryWithAggregatesFilter<"SparePart"> | $Enums.SparePartCategory
    partType?: EnumSparePartTypeWithAggregatesFilter<"SparePart"> | $Enums.SparePartType
    status?: EnumSparePartStatusWithAggregatesFilter<"SparePart"> | $Enums.SparePartStatus
    unitPrice?: DecimalWithAggregatesFilter<"SparePart"> | Decimal | DecimalJsLike | number | string
    stockLevel?: IntWithAggregatesFilter<"SparePart"> | number
    minStockLevel?: IntWithAggregatesFilter<"SparePart"> | number
    maxStockLevel?: IntWithAggregatesFilter<"SparePart"> | number
    reorderPoint?: IntWithAggregatesFilter<"SparePart"> | number
    storageLocation?: StringNullableWithAggregatesFilter<"SparePart"> | string | null
    specifications?: JsonNullableWithAggregatesFilter<"SparePart">
    compatibleWith?: StringNullableListFilter<"SparePart">
    notes?: StringNullableWithAggregatesFilter<"SparePart"> | string | null
    isActive?: BoolWithAggregatesFilter<"SparePart"> | boolean
    vendorId?: StringNullableWithAggregatesFilter<"SparePart"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SparePart"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SparePart"> | Date | string
  }

  export type ProcurementWhereInput = {
    AND?: ProcurementWhereInput | ProcurementWhereInput[]
    OR?: ProcurementWhereInput[]
    NOT?: ProcurementWhereInput | ProcurementWhereInput[]
    id?: StringFilter<"Procurement"> | string
    procurementNumber?: StringFilter<"Procurement"> | string
    quantity?: IntFilter<"Procurement"> | number
    unitPrice?: DecimalFilter<"Procurement"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFilter<"Procurement"> | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFilter<"Procurement"> | $Enums.ProcurementStatus
    orderedDate?: DateTimeFilter<"Procurement"> | Date | string
    expectedDate?: DateTimeNullableFilter<"Procurement"> | Date | string | null
    receivedDate?: DateTimeNullableFilter<"Procurement"> | Date | string | null
    receivedQuantity?: IntNullableFilter<"Procurement"> | number | null
    invoiceNumber?: StringNullableFilter<"Procurement"> | string | null
    notes?: StringNullableFilter<"Procurement"> | string | null
    partId?: StringFilter<"Procurement"> | string
    vendorId?: StringNullableFilter<"Procurement"> | string | null
    orderedById?: StringFilter<"Procurement"> | string
    createdAt?: DateTimeFilter<"Procurement"> | Date | string
    updatedAt?: DateTimeFilter<"Procurement"> | Date | string
    part?: XOR<SparePartRelationFilter, SparePartWhereInput>
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    orderedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProcurementOrderByWithRelationInput = {
    id?: SortOrder
    procurementNumber?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalCost?: SortOrder
    status?: SortOrder
    orderedDate?: SortOrder
    expectedDate?: SortOrderInput | SortOrder
    receivedDate?: SortOrderInput | SortOrder
    receivedQuantity?: SortOrderInput | SortOrder
    invoiceNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    partId?: SortOrder
    vendorId?: SortOrderInput | SortOrder
    orderedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    part?: SparePartOrderByWithRelationInput
    vendor?: VendorOrderByWithRelationInput
    orderedBy?: UserOrderByWithRelationInput
  }

  export type ProcurementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    procurementNumber?: string
    AND?: ProcurementWhereInput | ProcurementWhereInput[]
    OR?: ProcurementWhereInput[]
    NOT?: ProcurementWhereInput | ProcurementWhereInput[]
    quantity?: IntFilter<"Procurement"> | number
    unitPrice?: DecimalFilter<"Procurement"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFilter<"Procurement"> | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFilter<"Procurement"> | $Enums.ProcurementStatus
    orderedDate?: DateTimeFilter<"Procurement"> | Date | string
    expectedDate?: DateTimeNullableFilter<"Procurement"> | Date | string | null
    receivedDate?: DateTimeNullableFilter<"Procurement"> | Date | string | null
    receivedQuantity?: IntNullableFilter<"Procurement"> | number | null
    invoiceNumber?: StringNullableFilter<"Procurement"> | string | null
    notes?: StringNullableFilter<"Procurement"> | string | null
    partId?: StringFilter<"Procurement"> | string
    vendorId?: StringNullableFilter<"Procurement"> | string | null
    orderedById?: StringFilter<"Procurement"> | string
    createdAt?: DateTimeFilter<"Procurement"> | Date | string
    updatedAt?: DateTimeFilter<"Procurement"> | Date | string
    part?: XOR<SparePartRelationFilter, SparePartWhereInput>
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    orderedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "procurementNumber">

  export type ProcurementOrderByWithAggregationInput = {
    id?: SortOrder
    procurementNumber?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalCost?: SortOrder
    status?: SortOrder
    orderedDate?: SortOrder
    expectedDate?: SortOrderInput | SortOrder
    receivedDate?: SortOrderInput | SortOrder
    receivedQuantity?: SortOrderInput | SortOrder
    invoiceNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    partId?: SortOrder
    vendorId?: SortOrderInput | SortOrder
    orderedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProcurementCountOrderByAggregateInput
    _avg?: ProcurementAvgOrderByAggregateInput
    _max?: ProcurementMaxOrderByAggregateInput
    _min?: ProcurementMinOrderByAggregateInput
    _sum?: ProcurementSumOrderByAggregateInput
  }

  export type ProcurementScalarWhereWithAggregatesInput = {
    AND?: ProcurementScalarWhereWithAggregatesInput | ProcurementScalarWhereWithAggregatesInput[]
    OR?: ProcurementScalarWhereWithAggregatesInput[]
    NOT?: ProcurementScalarWhereWithAggregatesInput | ProcurementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Procurement"> | string
    procurementNumber?: StringWithAggregatesFilter<"Procurement"> | string
    quantity?: IntWithAggregatesFilter<"Procurement"> | number
    unitPrice?: DecimalWithAggregatesFilter<"Procurement"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalWithAggregatesFilter<"Procurement"> | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusWithAggregatesFilter<"Procurement"> | $Enums.ProcurementStatus
    orderedDate?: DateTimeWithAggregatesFilter<"Procurement"> | Date | string
    expectedDate?: DateTimeNullableWithAggregatesFilter<"Procurement"> | Date | string | null
    receivedDate?: DateTimeNullableWithAggregatesFilter<"Procurement"> | Date | string | null
    receivedQuantity?: IntNullableWithAggregatesFilter<"Procurement"> | number | null
    invoiceNumber?: StringNullableWithAggregatesFilter<"Procurement"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Procurement"> | string | null
    partId?: StringWithAggregatesFilter<"Procurement"> | string
    vendorId?: StringNullableWithAggregatesFilter<"Procurement"> | string | null
    orderedById?: StringWithAggregatesFilter<"Procurement"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Procurement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Procurement"> | Date | string
  }

  export type PartUsageWhereInput = {
    AND?: PartUsageWhereInput | PartUsageWhereInput[]
    OR?: PartUsageWhereInput[]
    NOT?: PartUsageWhereInput | PartUsageWhereInput[]
    id?: StringFilter<"PartUsage"> | string
    quantity?: IntFilter<"PartUsage"> | number
    usageType?: EnumPartUsageTypeFilter<"PartUsage"> | $Enums.PartUsageType
    usageDate?: DateTimeFilter<"PartUsage"> | Date | string
    notes?: StringNullableFilter<"PartUsage"> | string | null
    partId?: StringFilter<"PartUsage"> | string
    assetId?: StringNullableFilter<"PartUsage"> | string | null
    componentId?: StringNullableFilter<"PartUsage"> | string | null
    maintenanceId?: StringNullableFilter<"PartUsage"> | string | null
    usedById?: StringFilter<"PartUsage"> | string
    createdAt?: DateTimeFilter<"PartUsage"> | Date | string
    updatedAt?: DateTimeFilter<"PartUsage"> | Date | string
    part?: XOR<SparePartRelationFilter, SparePartWhereInput>
    asset?: XOR<AssetNullableRelationFilter, AssetWhereInput> | null
    component?: XOR<AssetComponentNullableRelationFilter, AssetComponentWhereInput> | null
    maintenance?: XOR<MaintenanceRecordNullableRelationFilter, MaintenanceRecordWhereInput> | null
    usedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PartUsageOrderByWithRelationInput = {
    id?: SortOrder
    quantity?: SortOrder
    usageType?: SortOrder
    usageDate?: SortOrder
    notes?: SortOrderInput | SortOrder
    partId?: SortOrder
    assetId?: SortOrderInput | SortOrder
    componentId?: SortOrderInput | SortOrder
    maintenanceId?: SortOrderInput | SortOrder
    usedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    part?: SparePartOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
    component?: AssetComponentOrderByWithRelationInput
    maintenance?: MaintenanceRecordOrderByWithRelationInput
    usedBy?: UserOrderByWithRelationInput
  }

  export type PartUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PartUsageWhereInput | PartUsageWhereInput[]
    OR?: PartUsageWhereInput[]
    NOT?: PartUsageWhereInput | PartUsageWhereInput[]
    quantity?: IntFilter<"PartUsage"> | number
    usageType?: EnumPartUsageTypeFilter<"PartUsage"> | $Enums.PartUsageType
    usageDate?: DateTimeFilter<"PartUsage"> | Date | string
    notes?: StringNullableFilter<"PartUsage"> | string | null
    partId?: StringFilter<"PartUsage"> | string
    assetId?: StringNullableFilter<"PartUsage"> | string | null
    componentId?: StringNullableFilter<"PartUsage"> | string | null
    maintenanceId?: StringNullableFilter<"PartUsage"> | string | null
    usedById?: StringFilter<"PartUsage"> | string
    createdAt?: DateTimeFilter<"PartUsage"> | Date | string
    updatedAt?: DateTimeFilter<"PartUsage"> | Date | string
    part?: XOR<SparePartRelationFilter, SparePartWhereInput>
    asset?: XOR<AssetNullableRelationFilter, AssetWhereInput> | null
    component?: XOR<AssetComponentNullableRelationFilter, AssetComponentWhereInput> | null
    maintenance?: XOR<MaintenanceRecordNullableRelationFilter, MaintenanceRecordWhereInput> | null
    usedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PartUsageOrderByWithAggregationInput = {
    id?: SortOrder
    quantity?: SortOrder
    usageType?: SortOrder
    usageDate?: SortOrder
    notes?: SortOrderInput | SortOrder
    partId?: SortOrder
    assetId?: SortOrderInput | SortOrder
    componentId?: SortOrderInput | SortOrder
    maintenanceId?: SortOrderInput | SortOrder
    usedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PartUsageCountOrderByAggregateInput
    _avg?: PartUsageAvgOrderByAggregateInput
    _max?: PartUsageMaxOrderByAggregateInput
    _min?: PartUsageMinOrderByAggregateInput
    _sum?: PartUsageSumOrderByAggregateInput
  }

  export type PartUsageScalarWhereWithAggregatesInput = {
    AND?: PartUsageScalarWhereWithAggregatesInput | PartUsageScalarWhereWithAggregatesInput[]
    OR?: PartUsageScalarWhereWithAggregatesInput[]
    NOT?: PartUsageScalarWhereWithAggregatesInput | PartUsageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PartUsage"> | string
    quantity?: IntWithAggregatesFilter<"PartUsage"> | number
    usageType?: EnumPartUsageTypeWithAggregatesFilter<"PartUsage"> | $Enums.PartUsageType
    usageDate?: DateTimeWithAggregatesFilter<"PartUsage"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"PartUsage"> | string | null
    partId?: StringWithAggregatesFilter<"PartUsage"> | string
    assetId?: StringNullableWithAggregatesFilter<"PartUsage"> | string | null
    componentId?: StringNullableWithAggregatesFilter<"PartUsage"> | string | null
    maintenanceId?: StringNullableWithAggregatesFilter<"PartUsage"> | string | null
    usedById?: StringWithAggregatesFilter<"PartUsage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PartUsage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PartUsage"> | Date | string
  }

  export type PartReplacementWhereInput = {
    AND?: PartReplacementWhereInput | PartReplacementWhereInput[]
    OR?: PartReplacementWhereInput[]
    NOT?: PartReplacementWhereInput | PartReplacementWhereInput[]
    id?: StringFilter<"PartReplacement"> | string
    replacementNumber?: StringFilter<"PartReplacement"> | string
    reason?: StringFilter<"PartReplacement"> | string
    status?: EnumReplacementStatusFilter<"PartReplacement"> | $Enums.ReplacementStatus
    plannedDate?: DateTimeNullableFilter<"PartReplacement"> | Date | string | null
    completedDate?: DateTimeNullableFilter<"PartReplacement"> | Date | string | null
    cost?: DecimalNullableFilter<"PartReplacement"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"PartReplacement"> | string | null
    oldPartId?: StringNullableFilter<"PartReplacement"> | string | null
    oldComponentId?: StringNullableFilter<"PartReplacement"> | string | null
    newPartId?: StringFilter<"PartReplacement"> | string
    assetId?: StringFilter<"PartReplacement"> | string
    performedById?: StringNullableFilter<"PartReplacement"> | string | null
    createdAt?: DateTimeFilter<"PartReplacement"> | Date | string
    updatedAt?: DateTimeFilter<"PartReplacement"> | Date | string
    oldPart?: XOR<SparePartNullableRelationFilter, SparePartWhereInput> | null
    oldComponent?: XOR<AssetComponentNullableRelationFilter, AssetComponentWhereInput> | null
    newPart?: XOR<SparePartRelationFilter, SparePartWhereInput>
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    performedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type PartReplacementOrderByWithRelationInput = {
    id?: SortOrder
    replacementNumber?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    plannedDate?: SortOrderInput | SortOrder
    completedDate?: SortOrderInput | SortOrder
    cost?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    oldPartId?: SortOrderInput | SortOrder
    oldComponentId?: SortOrderInput | SortOrder
    newPartId?: SortOrder
    assetId?: SortOrder
    performedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    oldPart?: SparePartOrderByWithRelationInput
    oldComponent?: AssetComponentOrderByWithRelationInput
    newPart?: SparePartOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
    performedBy?: UserOrderByWithRelationInput
  }

  export type PartReplacementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    replacementNumber?: string
    AND?: PartReplacementWhereInput | PartReplacementWhereInput[]
    OR?: PartReplacementWhereInput[]
    NOT?: PartReplacementWhereInput | PartReplacementWhereInput[]
    reason?: StringFilter<"PartReplacement"> | string
    status?: EnumReplacementStatusFilter<"PartReplacement"> | $Enums.ReplacementStatus
    plannedDate?: DateTimeNullableFilter<"PartReplacement"> | Date | string | null
    completedDate?: DateTimeNullableFilter<"PartReplacement"> | Date | string | null
    cost?: DecimalNullableFilter<"PartReplacement"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"PartReplacement"> | string | null
    oldPartId?: StringNullableFilter<"PartReplacement"> | string | null
    oldComponentId?: StringNullableFilter<"PartReplacement"> | string | null
    newPartId?: StringFilter<"PartReplacement"> | string
    assetId?: StringFilter<"PartReplacement"> | string
    performedById?: StringNullableFilter<"PartReplacement"> | string | null
    createdAt?: DateTimeFilter<"PartReplacement"> | Date | string
    updatedAt?: DateTimeFilter<"PartReplacement"> | Date | string
    oldPart?: XOR<SparePartNullableRelationFilter, SparePartWhereInput> | null
    oldComponent?: XOR<AssetComponentNullableRelationFilter, AssetComponentWhereInput> | null
    newPart?: XOR<SparePartRelationFilter, SparePartWhereInput>
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    performedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "replacementNumber">

  export type PartReplacementOrderByWithAggregationInput = {
    id?: SortOrder
    replacementNumber?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    plannedDate?: SortOrderInput | SortOrder
    completedDate?: SortOrderInput | SortOrder
    cost?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    oldPartId?: SortOrderInput | SortOrder
    oldComponentId?: SortOrderInput | SortOrder
    newPartId?: SortOrder
    assetId?: SortOrder
    performedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PartReplacementCountOrderByAggregateInput
    _avg?: PartReplacementAvgOrderByAggregateInput
    _max?: PartReplacementMaxOrderByAggregateInput
    _min?: PartReplacementMinOrderByAggregateInput
    _sum?: PartReplacementSumOrderByAggregateInput
  }

  export type PartReplacementScalarWhereWithAggregatesInput = {
    AND?: PartReplacementScalarWhereWithAggregatesInput | PartReplacementScalarWhereWithAggregatesInput[]
    OR?: PartReplacementScalarWhereWithAggregatesInput[]
    NOT?: PartReplacementScalarWhereWithAggregatesInput | PartReplacementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PartReplacement"> | string
    replacementNumber?: StringWithAggregatesFilter<"PartReplacement"> | string
    reason?: StringWithAggregatesFilter<"PartReplacement"> | string
    status?: EnumReplacementStatusWithAggregatesFilter<"PartReplacement"> | $Enums.ReplacementStatus
    plannedDate?: DateTimeNullableWithAggregatesFilter<"PartReplacement"> | Date | string | null
    completedDate?: DateTimeNullableWithAggregatesFilter<"PartReplacement"> | Date | string | null
    cost?: DecimalNullableWithAggregatesFilter<"PartReplacement"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableWithAggregatesFilter<"PartReplacement"> | string | null
    oldPartId?: StringNullableWithAggregatesFilter<"PartReplacement"> | string | null
    oldComponentId?: StringNullableWithAggregatesFilter<"PartReplacement"> | string | null
    newPartId?: StringWithAggregatesFilter<"PartReplacement"> | string
    assetId?: StringWithAggregatesFilter<"PartReplacement"> | string
    performedById?: StringNullableWithAggregatesFilter<"PartReplacement"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PartReplacement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PartReplacement"> | Date | string
  }

  export type NewPartRegistrationWhereInput = {
    AND?: NewPartRegistrationWhereInput | NewPartRegistrationWhereInput[]
    OR?: NewPartRegistrationWhereInput[]
    NOT?: NewPartRegistrationWhereInput | NewPartRegistrationWhereInput[]
    id?: StringFilter<"NewPartRegistration"> | string
    registrationNumber?: StringFilter<"NewPartRegistration"> | string
    serialNumber?: StringNullableFilter<"NewPartRegistration"> | string | null
    assetTag?: StringNullableFilter<"NewPartRegistration"> | string | null
    status?: EnumRegistrationStatusFilter<"NewPartRegistration"> | $Enums.RegistrationStatus
    registeredDate?: DateTimeNullableFilter<"NewPartRegistration"> | Date | string | null
    notes?: StringNullableFilter<"NewPartRegistration"> | string | null
    partId?: StringFilter<"NewPartRegistration"> | string
    assetId?: StringNullableFilter<"NewPartRegistration"> | string | null
    registeredById?: StringFilter<"NewPartRegistration"> | string
    createdAt?: DateTimeFilter<"NewPartRegistration"> | Date | string
    updatedAt?: DateTimeFilter<"NewPartRegistration"> | Date | string
    part?: XOR<SparePartRelationFilter, SparePartWhereInput>
    asset?: XOR<AssetNullableRelationFilter, AssetWhereInput> | null
    registeredBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NewPartRegistrationOrderByWithRelationInput = {
    id?: SortOrder
    registrationNumber?: SortOrder
    serialNumber?: SortOrderInput | SortOrder
    assetTag?: SortOrderInput | SortOrder
    status?: SortOrder
    registeredDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    partId?: SortOrder
    assetId?: SortOrderInput | SortOrder
    registeredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    part?: SparePartOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
    registeredBy?: UserOrderByWithRelationInput
  }

  export type NewPartRegistrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    registrationNumber?: string
    AND?: NewPartRegistrationWhereInput | NewPartRegistrationWhereInput[]
    OR?: NewPartRegistrationWhereInput[]
    NOT?: NewPartRegistrationWhereInput | NewPartRegistrationWhereInput[]
    serialNumber?: StringNullableFilter<"NewPartRegistration"> | string | null
    assetTag?: StringNullableFilter<"NewPartRegistration"> | string | null
    status?: EnumRegistrationStatusFilter<"NewPartRegistration"> | $Enums.RegistrationStatus
    registeredDate?: DateTimeNullableFilter<"NewPartRegistration"> | Date | string | null
    notes?: StringNullableFilter<"NewPartRegistration"> | string | null
    partId?: StringFilter<"NewPartRegistration"> | string
    assetId?: StringNullableFilter<"NewPartRegistration"> | string | null
    registeredById?: StringFilter<"NewPartRegistration"> | string
    createdAt?: DateTimeFilter<"NewPartRegistration"> | Date | string
    updatedAt?: DateTimeFilter<"NewPartRegistration"> | Date | string
    part?: XOR<SparePartRelationFilter, SparePartWhereInput>
    asset?: XOR<AssetNullableRelationFilter, AssetWhereInput> | null
    registeredBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "registrationNumber">

  export type NewPartRegistrationOrderByWithAggregationInput = {
    id?: SortOrder
    registrationNumber?: SortOrder
    serialNumber?: SortOrderInput | SortOrder
    assetTag?: SortOrderInput | SortOrder
    status?: SortOrder
    registeredDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    partId?: SortOrder
    assetId?: SortOrderInput | SortOrder
    registeredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NewPartRegistrationCountOrderByAggregateInput
    _max?: NewPartRegistrationMaxOrderByAggregateInput
    _min?: NewPartRegistrationMinOrderByAggregateInput
  }

  export type NewPartRegistrationScalarWhereWithAggregatesInput = {
    AND?: NewPartRegistrationScalarWhereWithAggregatesInput | NewPartRegistrationScalarWhereWithAggregatesInput[]
    OR?: NewPartRegistrationScalarWhereWithAggregatesInput[]
    NOT?: NewPartRegistrationScalarWhereWithAggregatesInput | NewPartRegistrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NewPartRegistration"> | string
    registrationNumber?: StringWithAggregatesFilter<"NewPartRegistration"> | string
    serialNumber?: StringNullableWithAggregatesFilter<"NewPartRegistration"> | string | null
    assetTag?: StringNullableWithAggregatesFilter<"NewPartRegistration"> | string | null
    status?: EnumRegistrationStatusWithAggregatesFilter<"NewPartRegistration"> | $Enums.RegistrationStatus
    registeredDate?: DateTimeNullableWithAggregatesFilter<"NewPartRegistration"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"NewPartRegistration"> | string | null
    partId?: StringWithAggregatesFilter<"NewPartRegistration"> | string
    assetId?: StringNullableWithAggregatesFilter<"NewPartRegistration"> | string | null
    registeredById?: StringWithAggregatesFilter<"NewPartRegistration"> | string
    createdAt?: DateTimeWithAggregatesFilter<"NewPartRegistration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NewPartRegistration"> | Date | string
  }

  export type AssetComponentWhereInput = {
    AND?: AssetComponentWhereInput | AssetComponentWhereInput[]
    OR?: AssetComponentWhereInput[]
    NOT?: AssetComponentWhereInput | AssetComponentWhereInput[]
    id?: StringFilter<"AssetComponent"> | string
    name?: StringFilter<"AssetComponent"> | string
    description?: StringNullableFilter<"AssetComponent"> | string | null
    partNumber?: StringNullableFilter<"AssetComponent"> | string | null
    serialNumber?: StringNullableFilter<"AssetComponent"> | string | null
    brand?: StringNullableFilter<"AssetComponent"> | string | null
    model?: StringNullableFilter<"AssetComponent"> | string | null
    status?: EnumComponentStatusFilter<"AssetComponent"> | $Enums.ComponentStatus
    purchaseDate?: DateTimeNullableFilter<"AssetComponent"> | Date | string | null
    purchasePrice?: DecimalNullableFilter<"AssetComponent"> | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: DateTimeNullableFilter<"AssetComponent"> | Date | string | null
    isReplaceable?: BoolFilter<"AssetComponent"> | boolean
    isTransferable?: BoolFilter<"AssetComponent"> | boolean
    notes?: StringNullableFilter<"AssetComponent"> | string | null
    specifications?: JsonNullableFilter<"AssetComponent">
    assetId?: StringFilter<"AssetComponent"> | string
    parentAssetId?: StringNullableFilter<"AssetComponent"> | string | null
    sourcePartId?: StringNullableFilter<"AssetComponent"> | string | null
    createdAt?: DateTimeFilter<"AssetComponent"> | Date | string
    updatedAt?: DateTimeFilter<"AssetComponent"> | Date | string
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    parentAsset?: XOR<AssetNullableRelationFilter, AssetWhereInput> | null
    sourcePart?: XOR<SparePartNullableRelationFilter, SparePartWhereInput> | null
    usages?: PartUsageListRelationFilter
    replacements?: PartReplacementListRelationFilter
    transfers?: ComponentTransferListRelationFilter
    maintenanceRecords?: ComponentMaintenanceListRelationFilter
  }

  export type AssetComponentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    partNumber?: SortOrderInput | SortOrder
    serialNumber?: SortOrderInput | SortOrder
    brand?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    status?: SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    purchasePrice?: SortOrderInput | SortOrder
    warrantyExpiry?: SortOrderInput | SortOrder
    isReplaceable?: SortOrder
    isTransferable?: SortOrder
    notes?: SortOrderInput | SortOrder
    specifications?: SortOrderInput | SortOrder
    assetId?: SortOrder
    parentAssetId?: SortOrderInput | SortOrder
    sourcePartId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset?: AssetOrderByWithRelationInput
    parentAsset?: AssetOrderByWithRelationInput
    sourcePart?: SparePartOrderByWithRelationInput
    usages?: PartUsageOrderByRelationAggregateInput
    replacements?: PartReplacementOrderByRelationAggregateInput
    transfers?: ComponentTransferOrderByRelationAggregateInput
    maintenanceRecords?: ComponentMaintenanceOrderByRelationAggregateInput
  }

  export type AssetComponentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssetComponentWhereInput | AssetComponentWhereInput[]
    OR?: AssetComponentWhereInput[]
    NOT?: AssetComponentWhereInput | AssetComponentWhereInput[]
    name?: StringFilter<"AssetComponent"> | string
    description?: StringNullableFilter<"AssetComponent"> | string | null
    partNumber?: StringNullableFilter<"AssetComponent"> | string | null
    serialNumber?: StringNullableFilter<"AssetComponent"> | string | null
    brand?: StringNullableFilter<"AssetComponent"> | string | null
    model?: StringNullableFilter<"AssetComponent"> | string | null
    status?: EnumComponentStatusFilter<"AssetComponent"> | $Enums.ComponentStatus
    purchaseDate?: DateTimeNullableFilter<"AssetComponent"> | Date | string | null
    purchasePrice?: DecimalNullableFilter<"AssetComponent"> | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: DateTimeNullableFilter<"AssetComponent"> | Date | string | null
    isReplaceable?: BoolFilter<"AssetComponent"> | boolean
    isTransferable?: BoolFilter<"AssetComponent"> | boolean
    notes?: StringNullableFilter<"AssetComponent"> | string | null
    specifications?: JsonNullableFilter<"AssetComponent">
    assetId?: StringFilter<"AssetComponent"> | string
    parentAssetId?: StringNullableFilter<"AssetComponent"> | string | null
    sourcePartId?: StringNullableFilter<"AssetComponent"> | string | null
    createdAt?: DateTimeFilter<"AssetComponent"> | Date | string
    updatedAt?: DateTimeFilter<"AssetComponent"> | Date | string
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    parentAsset?: XOR<AssetNullableRelationFilter, AssetWhereInput> | null
    sourcePart?: XOR<SparePartNullableRelationFilter, SparePartWhereInput> | null
    usages?: PartUsageListRelationFilter
    replacements?: PartReplacementListRelationFilter
    transfers?: ComponentTransferListRelationFilter
    maintenanceRecords?: ComponentMaintenanceListRelationFilter
  }, "id">

  export type AssetComponentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    partNumber?: SortOrderInput | SortOrder
    serialNumber?: SortOrderInput | SortOrder
    brand?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    status?: SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    purchasePrice?: SortOrderInput | SortOrder
    warrantyExpiry?: SortOrderInput | SortOrder
    isReplaceable?: SortOrder
    isTransferable?: SortOrder
    notes?: SortOrderInput | SortOrder
    specifications?: SortOrderInput | SortOrder
    assetId?: SortOrder
    parentAssetId?: SortOrderInput | SortOrder
    sourcePartId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssetComponentCountOrderByAggregateInput
    _avg?: AssetComponentAvgOrderByAggregateInput
    _max?: AssetComponentMaxOrderByAggregateInput
    _min?: AssetComponentMinOrderByAggregateInput
    _sum?: AssetComponentSumOrderByAggregateInput
  }

  export type AssetComponentScalarWhereWithAggregatesInput = {
    AND?: AssetComponentScalarWhereWithAggregatesInput | AssetComponentScalarWhereWithAggregatesInput[]
    OR?: AssetComponentScalarWhereWithAggregatesInput[]
    NOT?: AssetComponentScalarWhereWithAggregatesInput | AssetComponentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AssetComponent"> | string
    name?: StringWithAggregatesFilter<"AssetComponent"> | string
    description?: StringNullableWithAggregatesFilter<"AssetComponent"> | string | null
    partNumber?: StringNullableWithAggregatesFilter<"AssetComponent"> | string | null
    serialNumber?: StringNullableWithAggregatesFilter<"AssetComponent"> | string | null
    brand?: StringNullableWithAggregatesFilter<"AssetComponent"> | string | null
    model?: StringNullableWithAggregatesFilter<"AssetComponent"> | string | null
    status?: EnumComponentStatusWithAggregatesFilter<"AssetComponent"> | $Enums.ComponentStatus
    purchaseDate?: DateTimeNullableWithAggregatesFilter<"AssetComponent"> | Date | string | null
    purchasePrice?: DecimalNullableWithAggregatesFilter<"AssetComponent"> | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: DateTimeNullableWithAggregatesFilter<"AssetComponent"> | Date | string | null
    isReplaceable?: BoolWithAggregatesFilter<"AssetComponent"> | boolean
    isTransferable?: BoolWithAggregatesFilter<"AssetComponent"> | boolean
    notes?: StringNullableWithAggregatesFilter<"AssetComponent"> | string | null
    specifications?: JsonNullableWithAggregatesFilter<"AssetComponent">
    assetId?: StringWithAggregatesFilter<"AssetComponent"> | string
    parentAssetId?: StringNullableWithAggregatesFilter<"AssetComponent"> | string | null
    sourcePartId?: StringNullableWithAggregatesFilter<"AssetComponent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AssetComponent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AssetComponent"> | Date | string
  }

  export type ComponentTransferWhereInput = {
    AND?: ComponentTransferWhereInput | ComponentTransferWhereInput[]
    OR?: ComponentTransferWhereInput[]
    NOT?: ComponentTransferWhereInput | ComponentTransferWhereInput[]
    id?: StringFilter<"ComponentTransfer"> | string
    transferNumber?: StringFilter<"ComponentTransfer"> | string
    reason?: StringFilter<"ComponentTransfer"> | string
    transferDate?: DateTimeFilter<"ComponentTransfer"> | Date | string
    notes?: StringNullableFilter<"ComponentTransfer"> | string | null
    componentId?: StringFilter<"ComponentTransfer"> | string
    fromAssetId?: StringFilter<"ComponentTransfer"> | string
    toAssetId?: StringFilter<"ComponentTransfer"> | string
    transferredById?: StringFilter<"ComponentTransfer"> | string
    createdAt?: DateTimeFilter<"ComponentTransfer"> | Date | string
    updatedAt?: DateTimeFilter<"ComponentTransfer"> | Date | string
    component?: XOR<AssetComponentRelationFilter, AssetComponentWhereInput>
    fromAsset?: XOR<AssetRelationFilter, AssetWhereInput>
    toAsset?: XOR<AssetRelationFilter, AssetWhereInput>
    transferredBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ComponentTransferOrderByWithRelationInput = {
    id?: SortOrder
    transferNumber?: SortOrder
    reason?: SortOrder
    transferDate?: SortOrder
    notes?: SortOrderInput | SortOrder
    componentId?: SortOrder
    fromAssetId?: SortOrder
    toAssetId?: SortOrder
    transferredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    component?: AssetComponentOrderByWithRelationInput
    fromAsset?: AssetOrderByWithRelationInput
    toAsset?: AssetOrderByWithRelationInput
    transferredBy?: UserOrderByWithRelationInput
  }

  export type ComponentTransferWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    transferNumber?: string
    AND?: ComponentTransferWhereInput | ComponentTransferWhereInput[]
    OR?: ComponentTransferWhereInput[]
    NOT?: ComponentTransferWhereInput | ComponentTransferWhereInput[]
    reason?: StringFilter<"ComponentTransfer"> | string
    transferDate?: DateTimeFilter<"ComponentTransfer"> | Date | string
    notes?: StringNullableFilter<"ComponentTransfer"> | string | null
    componentId?: StringFilter<"ComponentTransfer"> | string
    fromAssetId?: StringFilter<"ComponentTransfer"> | string
    toAssetId?: StringFilter<"ComponentTransfer"> | string
    transferredById?: StringFilter<"ComponentTransfer"> | string
    createdAt?: DateTimeFilter<"ComponentTransfer"> | Date | string
    updatedAt?: DateTimeFilter<"ComponentTransfer"> | Date | string
    component?: XOR<AssetComponentRelationFilter, AssetComponentWhereInput>
    fromAsset?: XOR<AssetRelationFilter, AssetWhereInput>
    toAsset?: XOR<AssetRelationFilter, AssetWhereInput>
    transferredBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "transferNumber">

  export type ComponentTransferOrderByWithAggregationInput = {
    id?: SortOrder
    transferNumber?: SortOrder
    reason?: SortOrder
    transferDate?: SortOrder
    notes?: SortOrderInput | SortOrder
    componentId?: SortOrder
    fromAssetId?: SortOrder
    toAssetId?: SortOrder
    transferredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ComponentTransferCountOrderByAggregateInput
    _max?: ComponentTransferMaxOrderByAggregateInput
    _min?: ComponentTransferMinOrderByAggregateInput
  }

  export type ComponentTransferScalarWhereWithAggregatesInput = {
    AND?: ComponentTransferScalarWhereWithAggregatesInput | ComponentTransferScalarWhereWithAggregatesInput[]
    OR?: ComponentTransferScalarWhereWithAggregatesInput[]
    NOT?: ComponentTransferScalarWhereWithAggregatesInput | ComponentTransferScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ComponentTransfer"> | string
    transferNumber?: StringWithAggregatesFilter<"ComponentTransfer"> | string
    reason?: StringWithAggregatesFilter<"ComponentTransfer"> | string
    transferDate?: DateTimeWithAggregatesFilter<"ComponentTransfer"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"ComponentTransfer"> | string | null
    componentId?: StringWithAggregatesFilter<"ComponentTransfer"> | string
    fromAssetId?: StringWithAggregatesFilter<"ComponentTransfer"> | string
    toAssetId?: StringWithAggregatesFilter<"ComponentTransfer"> | string
    transferredById?: StringWithAggregatesFilter<"ComponentTransfer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ComponentTransfer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ComponentTransfer"> | Date | string
  }

  export type ComponentMaintenanceWhereInput = {
    AND?: ComponentMaintenanceWhereInput | ComponentMaintenanceWhereInput[]
    OR?: ComponentMaintenanceWhereInput[]
    NOT?: ComponentMaintenanceWhereInput | ComponentMaintenanceWhereInput[]
    id?: StringFilter<"ComponentMaintenance"> | string
    description?: StringFilter<"ComponentMaintenance"> | string
    maintenanceType?: StringFilter<"ComponentMaintenance"> | string
    maintenanceDate?: DateTimeFilter<"ComponentMaintenance"> | Date | string
    cost?: DecimalNullableFilter<"ComponentMaintenance"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"ComponentMaintenance"> | string | null
    componentId?: StringFilter<"ComponentMaintenance"> | string
    performedById?: StringFilter<"ComponentMaintenance"> | string
    createdAt?: DateTimeFilter<"ComponentMaintenance"> | Date | string
    updatedAt?: DateTimeFilter<"ComponentMaintenance"> | Date | string
    component?: XOR<AssetComponentRelationFilter, AssetComponentWhereInput>
    performedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ComponentMaintenanceOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    maintenanceType?: SortOrder
    maintenanceDate?: SortOrder
    cost?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    componentId?: SortOrder
    performedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    component?: AssetComponentOrderByWithRelationInput
    performedBy?: UserOrderByWithRelationInput
  }

  export type ComponentMaintenanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ComponentMaintenanceWhereInput | ComponentMaintenanceWhereInput[]
    OR?: ComponentMaintenanceWhereInput[]
    NOT?: ComponentMaintenanceWhereInput | ComponentMaintenanceWhereInput[]
    description?: StringFilter<"ComponentMaintenance"> | string
    maintenanceType?: StringFilter<"ComponentMaintenance"> | string
    maintenanceDate?: DateTimeFilter<"ComponentMaintenance"> | Date | string
    cost?: DecimalNullableFilter<"ComponentMaintenance"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"ComponentMaintenance"> | string | null
    componentId?: StringFilter<"ComponentMaintenance"> | string
    performedById?: StringFilter<"ComponentMaintenance"> | string
    createdAt?: DateTimeFilter<"ComponentMaintenance"> | Date | string
    updatedAt?: DateTimeFilter<"ComponentMaintenance"> | Date | string
    component?: XOR<AssetComponentRelationFilter, AssetComponentWhereInput>
    performedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ComponentMaintenanceOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    maintenanceType?: SortOrder
    maintenanceDate?: SortOrder
    cost?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    componentId?: SortOrder
    performedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ComponentMaintenanceCountOrderByAggregateInput
    _avg?: ComponentMaintenanceAvgOrderByAggregateInput
    _max?: ComponentMaintenanceMaxOrderByAggregateInput
    _min?: ComponentMaintenanceMinOrderByAggregateInput
    _sum?: ComponentMaintenanceSumOrderByAggregateInput
  }

  export type ComponentMaintenanceScalarWhereWithAggregatesInput = {
    AND?: ComponentMaintenanceScalarWhereWithAggregatesInput | ComponentMaintenanceScalarWhereWithAggregatesInput[]
    OR?: ComponentMaintenanceScalarWhereWithAggregatesInput[]
    NOT?: ComponentMaintenanceScalarWhereWithAggregatesInput | ComponentMaintenanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ComponentMaintenance"> | string
    description?: StringWithAggregatesFilter<"ComponentMaintenance"> | string
    maintenanceType?: StringWithAggregatesFilter<"ComponentMaintenance"> | string
    maintenanceDate?: DateTimeWithAggregatesFilter<"ComponentMaintenance"> | Date | string
    cost?: DecimalNullableWithAggregatesFilter<"ComponentMaintenance"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableWithAggregatesFilter<"ComponentMaintenance"> | string | null
    componentId?: StringWithAggregatesFilter<"ComponentMaintenance"> | string
    performedById?: StringWithAggregatesFilter<"ComponentMaintenance"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ComponentMaintenance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ComponentMaintenance"> | Date | string
  }

  export type InventoryWhereInput = {
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    id?: StringFilter<"Inventory"> | string
    inventoryTag?: StringFilter<"Inventory"> | string
    quantity?: IntFilter<"Inventory"> | number
    availableQty?: IntFilter<"Inventory"> | number
    condition?: StringFilter<"Inventory"> | string
    status?: StringFilter<"Inventory"> | string
    location?: StringNullableFilter<"Inventory"> | string | null
    notes?: StringNullableFilter<"Inventory"> | string | null
    minStockLevel?: IntNullableFilter<"Inventory"> | number | null
    assetId?: StringFilter<"Inventory"> | string
    departmentId?: StringFilter<"Inventory"> | string
    custodianId?: StringNullableFilter<"Inventory"> | string | null
    createdAt?: DateTimeFilter<"Inventory"> | Date | string
    updatedAt?: DateTimeFilter<"Inventory"> | Date | string
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    custodian?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    loans?: InventoryLoanListRelationFilter
  }

  export type InventoryOrderByWithRelationInput = {
    id?: SortOrder
    inventoryTag?: SortOrder
    quantity?: SortOrder
    availableQty?: SortOrder
    condition?: SortOrder
    status?: SortOrder
    location?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    minStockLevel?: SortOrderInput | SortOrder
    assetId?: SortOrder
    departmentId?: SortOrder
    custodianId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset?: AssetOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    custodian?: UserOrderByWithRelationInput
    loans?: InventoryLoanOrderByRelationAggregateInput
  }

  export type InventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    inventoryTag?: string
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    quantity?: IntFilter<"Inventory"> | number
    availableQty?: IntFilter<"Inventory"> | number
    condition?: StringFilter<"Inventory"> | string
    status?: StringFilter<"Inventory"> | string
    location?: StringNullableFilter<"Inventory"> | string | null
    notes?: StringNullableFilter<"Inventory"> | string | null
    minStockLevel?: IntNullableFilter<"Inventory"> | number | null
    assetId?: StringFilter<"Inventory"> | string
    departmentId?: StringFilter<"Inventory"> | string
    custodianId?: StringNullableFilter<"Inventory"> | string | null
    createdAt?: DateTimeFilter<"Inventory"> | Date | string
    updatedAt?: DateTimeFilter<"Inventory"> | Date | string
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    custodian?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    loans?: InventoryLoanListRelationFilter
  }, "id" | "inventoryTag">

  export type InventoryOrderByWithAggregationInput = {
    id?: SortOrder
    inventoryTag?: SortOrder
    quantity?: SortOrder
    availableQty?: SortOrder
    condition?: SortOrder
    status?: SortOrder
    location?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    minStockLevel?: SortOrderInput | SortOrder
    assetId?: SortOrder
    departmentId?: SortOrder
    custodianId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InventoryCountOrderByAggregateInput
    _avg?: InventoryAvgOrderByAggregateInput
    _max?: InventoryMaxOrderByAggregateInput
    _min?: InventoryMinOrderByAggregateInput
    _sum?: InventorySumOrderByAggregateInput
  }

  export type InventoryScalarWhereWithAggregatesInput = {
    AND?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    OR?: InventoryScalarWhereWithAggregatesInput[]
    NOT?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Inventory"> | string
    inventoryTag?: StringWithAggregatesFilter<"Inventory"> | string
    quantity?: IntWithAggregatesFilter<"Inventory"> | number
    availableQty?: IntWithAggregatesFilter<"Inventory"> | number
    condition?: StringWithAggregatesFilter<"Inventory"> | string
    status?: StringWithAggregatesFilter<"Inventory"> | string
    location?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
    minStockLevel?: IntNullableWithAggregatesFilter<"Inventory"> | number | null
    assetId?: StringWithAggregatesFilter<"Inventory"> | string
    departmentId?: StringWithAggregatesFilter<"Inventory"> | string
    custodianId?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Inventory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Inventory"> | Date | string
  }

  export type InventoryLoanWhereInput = {
    AND?: InventoryLoanWhereInput | InventoryLoanWhereInput[]
    OR?: InventoryLoanWhereInput[]
    NOT?: InventoryLoanWhereInput | InventoryLoanWhereInput[]
    id?: StringFilter<"InventoryLoan"> | string
    loanNumber?: StringFilter<"InventoryLoan"> | string
    purpose?: StringFilter<"InventoryLoan"> | string
    quantity?: IntFilter<"InventoryLoan"> | number
    loanDate?: DateTimeFilter<"InventoryLoan"> | Date | string
    expectedReturnDate?: DateTimeFilter<"InventoryLoan"> | Date | string
    actualReturnDate?: DateTimeNullableFilter<"InventoryLoan"> | Date | string | null
    status?: StringFilter<"InventoryLoan"> | string
    condition?: StringNullableFilter<"InventoryLoan"> | string | null
    notes?: StringNullableFilter<"InventoryLoan"> | string | null
    approvalNotes?: StringNullableFilter<"InventoryLoan"> | string | null
    inventoryId?: StringFilter<"InventoryLoan"> | string
    borrowerId?: StringFilter<"InventoryLoan"> | string
    approvedById?: StringNullableFilter<"InventoryLoan"> | string | null
    responsibleId?: StringFilter<"InventoryLoan"> | string
    createdAt?: DateTimeFilter<"InventoryLoan"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryLoan"> | Date | string
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
    borrower?: XOR<UserRelationFilter, UserWhereInput>
    approvedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    responsible?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type InventoryLoanOrderByWithRelationInput = {
    id?: SortOrder
    loanNumber?: SortOrder
    purpose?: SortOrder
    quantity?: SortOrder
    loanDate?: SortOrder
    expectedReturnDate?: SortOrder
    actualReturnDate?: SortOrderInput | SortOrder
    status?: SortOrder
    condition?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    approvalNotes?: SortOrderInput | SortOrder
    inventoryId?: SortOrder
    borrowerId?: SortOrder
    approvedById?: SortOrderInput | SortOrder
    responsibleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    inventory?: InventoryOrderByWithRelationInput
    borrower?: UserOrderByWithRelationInput
    approvedBy?: UserOrderByWithRelationInput
    responsible?: UserOrderByWithRelationInput
  }

  export type InventoryLoanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    loanNumber?: string
    AND?: InventoryLoanWhereInput | InventoryLoanWhereInput[]
    OR?: InventoryLoanWhereInput[]
    NOT?: InventoryLoanWhereInput | InventoryLoanWhereInput[]
    purpose?: StringFilter<"InventoryLoan"> | string
    quantity?: IntFilter<"InventoryLoan"> | number
    loanDate?: DateTimeFilter<"InventoryLoan"> | Date | string
    expectedReturnDate?: DateTimeFilter<"InventoryLoan"> | Date | string
    actualReturnDate?: DateTimeNullableFilter<"InventoryLoan"> | Date | string | null
    status?: StringFilter<"InventoryLoan"> | string
    condition?: StringNullableFilter<"InventoryLoan"> | string | null
    notes?: StringNullableFilter<"InventoryLoan"> | string | null
    approvalNotes?: StringNullableFilter<"InventoryLoan"> | string | null
    inventoryId?: StringFilter<"InventoryLoan"> | string
    borrowerId?: StringFilter<"InventoryLoan"> | string
    approvedById?: StringNullableFilter<"InventoryLoan"> | string | null
    responsibleId?: StringFilter<"InventoryLoan"> | string
    createdAt?: DateTimeFilter<"InventoryLoan"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryLoan"> | Date | string
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
    borrower?: XOR<UserRelationFilter, UserWhereInput>
    approvedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    responsible?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "loanNumber">

  export type InventoryLoanOrderByWithAggregationInput = {
    id?: SortOrder
    loanNumber?: SortOrder
    purpose?: SortOrder
    quantity?: SortOrder
    loanDate?: SortOrder
    expectedReturnDate?: SortOrder
    actualReturnDate?: SortOrderInput | SortOrder
    status?: SortOrder
    condition?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    approvalNotes?: SortOrderInput | SortOrder
    inventoryId?: SortOrder
    borrowerId?: SortOrder
    approvedById?: SortOrderInput | SortOrder
    responsibleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InventoryLoanCountOrderByAggregateInput
    _avg?: InventoryLoanAvgOrderByAggregateInput
    _max?: InventoryLoanMaxOrderByAggregateInput
    _min?: InventoryLoanMinOrderByAggregateInput
    _sum?: InventoryLoanSumOrderByAggregateInput
  }

  export type InventoryLoanScalarWhereWithAggregatesInput = {
    AND?: InventoryLoanScalarWhereWithAggregatesInput | InventoryLoanScalarWhereWithAggregatesInput[]
    OR?: InventoryLoanScalarWhereWithAggregatesInput[]
    NOT?: InventoryLoanScalarWhereWithAggregatesInput | InventoryLoanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InventoryLoan"> | string
    loanNumber?: StringWithAggregatesFilter<"InventoryLoan"> | string
    purpose?: StringWithAggregatesFilter<"InventoryLoan"> | string
    quantity?: IntWithAggregatesFilter<"InventoryLoan"> | number
    loanDate?: DateTimeWithAggregatesFilter<"InventoryLoan"> | Date | string
    expectedReturnDate?: DateTimeWithAggregatesFilter<"InventoryLoan"> | Date | string
    actualReturnDate?: DateTimeNullableWithAggregatesFilter<"InventoryLoan"> | Date | string | null
    status?: StringWithAggregatesFilter<"InventoryLoan"> | string
    condition?: StringNullableWithAggregatesFilter<"InventoryLoan"> | string | null
    notes?: StringNullableWithAggregatesFilter<"InventoryLoan"> | string | null
    approvalNotes?: StringNullableWithAggregatesFilter<"InventoryLoan"> | string | null
    inventoryId?: StringWithAggregatesFilter<"InventoryLoan"> | string
    borrowerId?: StringWithAggregatesFilter<"InventoryLoan"> | string
    approvedById?: StringNullableWithAggregatesFilter<"InventoryLoan"> | string | null
    responsibleId?: StringWithAggregatesFilter<"InventoryLoan"> | string
    createdAt?: DateTimeWithAggregatesFilter<"InventoryLoan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InventoryLoan"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    manager?: UserCreateNestedOneWithoutManagedDepartmentsInput
    users?: UserCreateNestedManyWithoutDepartmentInput
    assets?: AssetCreateNestedManyWithoutDepartmentInput
    assetRequests?: AssetRequestCreateNestedManyWithoutDepartmentInput
    inventories?: InventoryCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    managerId?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    assets?: AssetUncheckedCreateNestedManyWithoutDepartmentInput
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutDepartmentInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manager?: UserUpdateOneWithoutManagedDepartmentsNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
    assets?: AssetUpdateManyWithoutDepartmentNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutDepartmentNestedInput
    inventories?: InventoryUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    assets?: AssetUncheckedUpdateManyWithoutDepartmentNestedInput
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutDepartmentNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    managerId?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateInput = {
    id?: string
    name: string
    building?: string | null
    floor?: string | null
    room?: string | null
    address?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: string
    name: string
    building?: string | null
    floor?: string | null
    room?: string | null
    address?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: string
    name: string
    building?: string | null
    floor?: string | null
    room?: string | null
    address?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    assets?: AssetCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    assets?: AssetUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    assets?: AssetUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    assets?: AssetUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorCreateInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutVendorInput
    maintenanceContracts?: MaintenanceContractCreateNestedManyWithoutVendorInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutVendorInput
    spareParts?: SparePartCreateNestedManyWithoutVendorInput
    procurements?: ProcurementCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutVendorInput
    maintenanceContracts?: MaintenanceContractUncheckedCreateNestedManyWithoutVendorInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutVendorInput
    spareParts?: SparePartUncheckedCreateNestedManyWithoutVendorInput
    procurements?: ProcurementUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutVendorNestedInput
    maintenanceContracts?: MaintenanceContractUpdateManyWithoutVendorNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutVendorNestedInput
    spareParts?: SparePartUpdateManyWithoutVendorNestedInput
    procurements?: ProcurementUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutVendorNestedInput
    maintenanceContracts?: MaintenanceContractUncheckedUpdateManyWithoutVendorNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutVendorNestedInput
    spareParts?: SparePartUncheckedUpdateManyWithoutVendorNestedInput
    procurements?: ProcurementUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorCreateManyInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VendorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCreateInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetCreateManyInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
  }

  export type AssetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetRequestCreateInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutAssetRequestsInput
    department: DepartmentCreateNestedOneWithoutAssetRequestsInput
    asset?: AssetCreateNestedOneWithoutAssetRequestsInput
    approvedBy?: UserCreateNestedOneWithoutApprovedRequestsInput
  }

  export type AssetRequestUncheckedCreateInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    requesterId: string
    departmentId: string
    assetId?: string | null
    approvedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutAssetRequestsNestedInput
    department?: DepartmentUpdateOneRequiredWithoutAssetRequestsNestedInput
    asset?: AssetUpdateOneWithoutAssetRequestsNestedInput
    approvedBy?: UserUpdateOneWithoutApprovedRequestsNestedInput
  }

  export type AssetRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetRequestCreateManyInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    requesterId: string
    departmentId: string
    assetId?: string | null
    approvedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceRecordCreateInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutMaintenanceRecordsInput
    technician?: UserCreateNestedOneWithoutMaintenanceRecordsInput
    vendor?: VendorCreateNestedOneWithoutMaintenanceRecordsInput
    partUsages?: PartUsageCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceRecordUncheckedCreateInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    assetId: string
    technicianId?: string | null
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutMaintenanceRecordsNestedInput
    technician?: UserUpdateOneWithoutMaintenanceRecordsNestedInput
    vendor?: VendorUpdateOneWithoutMaintenanceRecordsNestedInput
    partUsages?: PartUsageUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: StringFieldUpdateOperationsInput | string
    technicianId?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    partUsages?: PartUsageUncheckedUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceRecordCreateManyInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    assetId: string
    technicianId?: string | null
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: StringFieldUpdateOperationsInput | string
    technicianId?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceContractCreateInput = {
    id?: string
    contractNumber: string
    description: string
    startDate: Date | string
    endDate: Date | string
    cost: Decimal | DecimalJsLike | number | string
    terms?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor: VendorCreateNestedOneWithoutMaintenanceContractsInput
  }

  export type MaintenanceContractUncheckedCreateInput = {
    id?: string
    contractNumber: string
    description: string
    startDate: Date | string
    endDate: Date | string
    cost: Decimal | DecimalJsLike | number | string
    terms?: string | null
    isActive?: boolean
    vendorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceContractUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    terms?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneRequiredWithoutMaintenanceContractsNestedInput
  }

  export type MaintenanceContractUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    terms?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    vendorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceContractCreateManyInput = {
    id?: string
    contractNumber: string
    description: string
    startDate: Date | string
    endDate: Date | string
    cost: Decimal | DecimalJsLike | number | string
    terms?: string | null
    isActive?: boolean
    vendorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceContractUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    terms?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceContractUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    terms?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    vendorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditRecordCreateInput = {
    id?: string
    auditType: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.AuditStatus
    findings?: string | null
    recommendations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset?: AssetCreateNestedOneWithoutAuditRecordsInput
    auditor: UserCreateNestedOneWithoutAuditRecordsInput
  }

  export type AuditRecordUncheckedCreateInput = {
    id?: string
    auditType: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.AuditStatus
    findings?: string | null
    recommendations?: string | null
    assetId?: string | null
    auditorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    auditType?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    findings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneWithoutAuditRecordsNestedInput
    auditor?: UserUpdateOneRequiredWithoutAuditRecordsNestedInput
  }

  export type AuditRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    auditType?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    findings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    auditorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditRecordCreateManyInput = {
    id?: string
    auditType: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.AuditStatus
    findings?: string | null
    recommendations?: string | null
    assetId?: string | null
    auditorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    auditType?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    findings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    auditType?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    findings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    auditorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DisposalRecordCreateInput = {
    id?: string
    disposalType: string
    disposalDate: Date | string
    disposalValue?: Decimal | DecimalJsLike | number | string | null
    reason: string
    approvalReference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutDisposalRecordInput
  }

  export type DisposalRecordUncheckedCreateInput = {
    id?: string
    disposalType: string
    disposalDate: Date | string
    disposalValue?: Decimal | DecimalJsLike | number | string | null
    reason: string
    approvalReference?: string | null
    notes?: string | null
    assetId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DisposalRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    disposalType?: StringFieldUpdateOperationsInput | string
    disposalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    disposalValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reason?: StringFieldUpdateOperationsInput | string
    approvalReference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutDisposalRecordNestedInput
  }

  export type DisposalRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    disposalType?: StringFieldUpdateOperationsInput | string
    disposalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    disposalValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reason?: StringFieldUpdateOperationsInput | string
    approvalReference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DisposalRecordCreateManyInput = {
    id?: string
    disposalType: string
    disposalDate: Date | string
    disposalValue?: Decimal | DecimalJsLike | number | string | null
    reason: string
    approvalReference?: string | null
    notes?: string | null
    assetId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DisposalRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    disposalType?: StringFieldUpdateOperationsInput | string
    disposalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    disposalValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reason?: StringFieldUpdateOperationsInput | string
    approvalReference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DisposalRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    disposalType?: StringFieldUpdateOperationsInput | string
    disposalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    disposalValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reason?: StringFieldUpdateOperationsInput | string
    approvalReference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsCreateInput = {
    id?: string
    key: string
    value: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingsUncheckedCreateInput = {
    id?: string
    key: string
    value: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsCreateManyInput = {
    id?: string
    key: string
    value: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SparePartCreateInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSparePartsInput
    procurements?: ProcurementCreateNestedManyWithoutPartInput
    usages?: PartUsageCreateNestedManyWithoutPartInput
    replacements?: PartReplacementCreateNestedManyWithoutNewPartInput
    oldReplacements?: PartReplacementCreateNestedManyWithoutOldPartInput
    registrations?: NewPartRegistrationCreateNestedManyWithoutPartInput
    sourceComponents?: AssetComponentCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartUncheckedCreateInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    procurements?: ProcurementUncheckedCreateNestedManyWithoutPartInput
    usages?: PartUsageUncheckedCreateNestedManyWithoutPartInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutNewPartInput
    oldReplacements?: PartReplacementUncheckedCreateNestedManyWithoutOldPartInput
    registrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutPartInput
    sourceComponents?: AssetComponentUncheckedCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSparePartsNestedInput
    procurements?: ProcurementUpdateManyWithoutPartNestedInput
    usages?: PartUsageUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUpdateManyWithoutNewPartNestedInput
    oldReplacements?: PartReplacementUpdateManyWithoutOldPartNestedInput
    registrations?: NewPartRegistrationUpdateManyWithoutPartNestedInput
    sourceComponents?: AssetComponentUpdateManyWithoutSourcePartNestedInput
  }

  export type SparePartUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    procurements?: ProcurementUncheckedUpdateManyWithoutPartNestedInput
    usages?: PartUsageUncheckedUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutNewPartNestedInput
    oldReplacements?: PartReplacementUncheckedUpdateManyWithoutOldPartNestedInput
    registrations?: NewPartRegistrationUncheckedUpdateManyWithoutPartNestedInput
    sourceComponents?: AssetComponentUncheckedUpdateManyWithoutSourcePartNestedInput
  }

  export type SparePartCreateManyInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SparePartUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SparePartUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcurementCreateInput = {
    id?: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.ProcurementStatus
    orderedDate?: Date | string
    expectedDate?: Date | string | null
    receivedDate?: Date | string | null
    receivedQuantity?: number | null
    invoiceNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    part: SparePartCreateNestedOneWithoutProcurementsInput
    vendor?: VendorCreateNestedOneWithoutProcurementsInput
    orderedBy: UserCreateNestedOneWithoutProcurementsOrderedInput
  }

  export type ProcurementUncheckedCreateInput = {
    id?: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.ProcurementStatus
    orderedDate?: Date | string
    expectedDate?: Date | string | null
    receivedDate?: Date | string | null
    receivedQuantity?: number | null
    invoiceNumber?: string | null
    notes?: string | null
    partId: string
    vendorId?: string | null
    orderedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProcurementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    part?: SparePartUpdateOneRequiredWithoutProcurementsNestedInput
    vendor?: VendorUpdateOneWithoutProcurementsNestedInput
    orderedBy?: UserUpdateOneRequiredWithoutProcurementsOrderedNestedInput
  }

  export type ProcurementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    orderedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcurementCreateManyInput = {
    id?: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.ProcurementStatus
    orderedDate?: Date | string
    expectedDate?: Date | string | null
    receivedDate?: Date | string | null
    receivedQuantity?: number | null
    invoiceNumber?: string | null
    notes?: string | null
    partId: string
    vendorId?: string | null
    orderedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProcurementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcurementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    orderedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageCreateInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    part: SparePartCreateNestedOneWithoutUsagesInput
    asset?: AssetCreateNestedOneWithoutPartUsagesInput
    component?: AssetComponentCreateNestedOneWithoutUsagesInput
    maintenance?: MaintenanceRecordCreateNestedOneWithoutPartUsagesInput
    usedBy: UserCreateNestedOneWithoutPartUsagesInput
  }

  export type PartUsageUncheckedCreateInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    partId: string
    assetId?: string | null
    componentId?: string | null
    maintenanceId?: string | null
    usedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartUsageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    part?: SparePartUpdateOneRequiredWithoutUsagesNestedInput
    asset?: AssetUpdateOneWithoutPartUsagesNestedInput
    component?: AssetComponentUpdateOneWithoutUsagesNestedInput
    maintenance?: MaintenanceRecordUpdateOneWithoutPartUsagesNestedInput
    usedBy?: UserUpdateOneRequiredWithoutPartUsagesNestedInput
  }

  export type PartUsageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableStringFieldUpdateOperationsInput | string | null
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    usedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageCreateManyInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    partId: string
    assetId?: string | null
    componentId?: string | null
    maintenanceId?: string | null
    usedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartUsageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableStringFieldUpdateOperationsInput | string | null
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    usedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementCreateInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    oldPart?: SparePartCreateNestedOneWithoutOldReplacementsInput
    oldComponent?: AssetComponentCreateNestedOneWithoutReplacementsInput
    newPart: SparePartCreateNestedOneWithoutReplacementsInput
    asset: AssetCreateNestedOneWithoutPartReplacementsInput
    performedBy?: UserCreateNestedOneWithoutReplacementsPerformedInput
  }

  export type PartReplacementUncheckedCreateInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    oldPartId?: string | null
    oldComponentId?: string | null
    newPartId: string
    assetId: string
    performedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartReplacementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldPart?: SparePartUpdateOneWithoutOldReplacementsNestedInput
    oldComponent?: AssetComponentUpdateOneWithoutReplacementsNestedInput
    newPart?: SparePartUpdateOneRequiredWithoutReplacementsNestedInput
    asset?: AssetUpdateOneRequiredWithoutPartReplacementsNestedInput
    performedBy?: UserUpdateOneWithoutReplacementsPerformedNestedInput
  }

  export type PartReplacementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    oldPartId?: NullableStringFieldUpdateOperationsInput | string | null
    oldComponentId?: NullableStringFieldUpdateOperationsInput | string | null
    newPartId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    performedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementCreateManyInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    oldPartId?: string | null
    oldComponentId?: string | null
    newPartId: string
    assetId: string
    performedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartReplacementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    oldPartId?: NullableStringFieldUpdateOperationsInput | string | null
    oldComponentId?: NullableStringFieldUpdateOperationsInput | string | null
    newPartId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    performedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewPartRegistrationCreateInput = {
    id?: string
    registrationNumber: string
    serialNumber?: string | null
    assetTag?: string | null
    status?: $Enums.RegistrationStatus
    registeredDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    part: SparePartCreateNestedOneWithoutRegistrationsInput
    asset?: AssetCreateNestedOneWithoutPartRegistrationsInput
    registeredBy: UserCreateNestedOneWithoutPartRegistrationsInput
  }

  export type NewPartRegistrationUncheckedCreateInput = {
    id?: string
    registrationNumber: string
    serialNumber?: string | null
    assetTag?: string | null
    status?: $Enums.RegistrationStatus
    registeredDate?: Date | string | null
    notes?: string | null
    partId: string
    assetId?: string | null
    registeredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewPartRegistrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    part?: SparePartUpdateOneRequiredWithoutRegistrationsNestedInput
    asset?: AssetUpdateOneWithoutPartRegistrationsNestedInput
    registeredBy?: UserUpdateOneRequiredWithoutPartRegistrationsNestedInput
  }

  export type NewPartRegistrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewPartRegistrationCreateManyInput = {
    id?: string
    registrationNumber: string
    serialNumber?: string | null
    assetTag?: string | null
    status?: $Enums.RegistrationStatus
    registeredDate?: Date | string | null
    notes?: string | null
    partId: string
    assetId?: string | null
    registeredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewPartRegistrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewPartRegistrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetComponentCreateInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutComponentsInput
    parentAsset?: AssetCreateNestedOneWithoutParentComponentsInput
    sourcePart?: SparePartCreateNestedOneWithoutSourceComponentsInput
    usages?: PartUsageCreateNestedManyWithoutComponentInput
    replacements?: PartReplacementCreateNestedManyWithoutOldComponentInput
    transfers?: ComponentTransferCreateNestedManyWithoutComponentInput
    maintenanceRecords?: ComponentMaintenanceCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId: string
    parentAssetId?: string | null
    sourcePartId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: PartUsageUncheckedCreateNestedManyWithoutComponentInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutOldComponentInput
    transfers?: ComponentTransferUncheckedCreateNestedManyWithoutComponentInput
    maintenanceRecords?: ComponentMaintenanceUncheckedCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutComponentsNestedInput
    parentAsset?: AssetUpdateOneWithoutParentComponentsNestedInput
    sourcePart?: SparePartUpdateOneWithoutSourceComponentsNestedInput
    usages?: PartUsageUpdateManyWithoutComponentNestedInput
    replacements?: PartReplacementUpdateManyWithoutOldComponentNestedInput
    transfers?: ComponentTransferUpdateManyWithoutComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUpdateManyWithoutComponentNestedInput
  }

  export type AssetComponentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId?: StringFieldUpdateOperationsInput | string
    parentAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    sourcePartId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: PartUsageUncheckedUpdateManyWithoutComponentNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutOldComponentNestedInput
    transfers?: ComponentTransferUncheckedUpdateManyWithoutComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type AssetComponentCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId: string
    parentAssetId?: string | null
    sourcePartId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetComponentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetComponentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId?: StringFieldUpdateOperationsInput | string
    parentAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    sourcePartId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTransferCreateInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    component: AssetComponentCreateNestedOneWithoutTransfersInput
    fromAsset: AssetCreateNestedOneWithoutTransfersFromInput
    toAsset: AssetCreateNestedOneWithoutTransfersToInput
    transferredBy: UserCreateNestedOneWithoutComponentTransfersInput
  }

  export type ComponentTransferUncheckedCreateInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    componentId: string
    fromAssetId: string
    toAssetId: string
    transferredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentTransferUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    component?: AssetComponentUpdateOneRequiredWithoutTransfersNestedInput
    fromAsset?: AssetUpdateOneRequiredWithoutTransfersFromNestedInput
    toAsset?: AssetUpdateOneRequiredWithoutTransfersToNestedInput
    transferredBy?: UserUpdateOneRequiredWithoutComponentTransfersNestedInput
  }

  export type ComponentTransferUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: StringFieldUpdateOperationsInput | string
    fromAssetId?: StringFieldUpdateOperationsInput | string
    toAssetId?: StringFieldUpdateOperationsInput | string
    transferredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTransferCreateManyInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    componentId: string
    fromAssetId: string
    toAssetId: string
    transferredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentTransferUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTransferUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: StringFieldUpdateOperationsInput | string
    fromAssetId?: StringFieldUpdateOperationsInput | string
    toAssetId?: StringFieldUpdateOperationsInput | string
    transferredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentMaintenanceCreateInput = {
    id?: string
    description: string
    maintenanceType: string
    maintenanceDate?: Date | string
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    component: AssetComponentCreateNestedOneWithoutMaintenanceRecordsInput
    performedBy: UserCreateNestedOneWithoutComponentMaintenanceInput
  }

  export type ComponentMaintenanceUncheckedCreateInput = {
    id?: string
    description: string
    maintenanceType: string
    maintenanceDate?: Date | string
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    componentId: string
    performedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentMaintenanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    component?: AssetComponentUpdateOneRequiredWithoutMaintenanceRecordsNestedInput
    performedBy?: UserUpdateOneRequiredWithoutComponentMaintenanceNestedInput
  }

  export type ComponentMaintenanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: StringFieldUpdateOperationsInput | string
    performedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentMaintenanceCreateManyInput = {
    id?: string
    description: string
    maintenanceType: string
    maintenanceDate?: Date | string
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    componentId: string
    performedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentMaintenanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentMaintenanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: StringFieldUpdateOperationsInput | string
    performedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryCreateInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutInventoriesInput
    department: DepartmentCreateNestedOneWithoutInventoriesInput
    custodian?: UserCreateNestedOneWithoutCustodiedInventoriesInput
    loans?: InventoryLoanCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    assetId: string
    departmentId: string
    custodianId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loans?: InventoryLoanUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutInventoriesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutInventoriesNestedInput
    custodian?: UserUpdateOneWithoutCustodiedInventoriesNestedInput
    loans?: InventoryLoanUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    assetId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    custodianId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loans?: InventoryLoanUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryCreateManyInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    assetId: string
    departmentId: string
    custodianId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    assetId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    custodianId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryLoanCreateInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory: InventoryCreateNestedOneWithoutLoansInput
    borrower: UserCreateNestedOneWithoutBorrowedLoansInput
    approvedBy?: UserCreateNestedOneWithoutApprovedLoansInput
    responsible: UserCreateNestedOneWithoutResponsibleLoansInput
  }

  export type InventoryLoanUncheckedCreateInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    inventoryId: string
    borrowerId: string
    approvedById?: string | null
    responsibleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryLoanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUpdateOneRequiredWithoutLoansNestedInput
    borrower?: UserUpdateOneRequiredWithoutBorrowedLoansNestedInput
    approvedBy?: UserUpdateOneWithoutApprovedLoansNestedInput
    responsible?: UserUpdateOneRequiredWithoutResponsibleLoansNestedInput
  }

  export type InventoryLoanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    inventoryId?: StringFieldUpdateOperationsInput | string
    borrowerId?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryLoanCreateManyInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    inventoryId: string
    borrowerId: string
    approvedById?: string | null
    responsibleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryLoanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryLoanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    inventoryId?: StringFieldUpdateOperationsInput | string
    borrowerId?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DepartmentNullableRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type AssetRequestListRelationFilter = {
    every?: AssetRequestWhereInput
    some?: AssetRequestWhereInput
    none?: AssetRequestWhereInput
  }

  export type AssetListRelationFilter = {
    every?: AssetWhereInput
    some?: AssetWhereInput
    none?: AssetWhereInput
  }

  export type MaintenanceRecordListRelationFilter = {
    every?: MaintenanceRecordWhereInput
    some?: MaintenanceRecordWhereInput
    none?: MaintenanceRecordWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type AuditRecordListRelationFilter = {
    every?: AuditRecordWhereInput
    some?: AuditRecordWhereInput
    none?: AuditRecordWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type ProcurementListRelationFilter = {
    every?: ProcurementWhereInput
    some?: ProcurementWhereInput
    none?: ProcurementWhereInput
  }

  export type PartUsageListRelationFilter = {
    every?: PartUsageWhereInput
    some?: PartUsageWhereInput
    none?: PartUsageWhereInput
  }

  export type PartReplacementListRelationFilter = {
    every?: PartReplacementWhereInput
    some?: PartReplacementWhereInput
    none?: PartReplacementWhereInput
  }

  export type NewPartRegistrationListRelationFilter = {
    every?: NewPartRegistrationWhereInput
    some?: NewPartRegistrationWhereInput
    none?: NewPartRegistrationWhereInput
  }

  export type ComponentTransferListRelationFilter = {
    every?: ComponentTransferWhereInput
    some?: ComponentTransferWhereInput
    none?: ComponentTransferWhereInput
  }

  export type ComponentMaintenanceListRelationFilter = {
    every?: ComponentMaintenanceWhereInput
    some?: ComponentMaintenanceWhereInput
    none?: ComponentMaintenanceWhereInput
  }

  export type InventoryListRelationFilter = {
    every?: InventoryWhereInput
    some?: InventoryWhereInput
    none?: InventoryWhereInput
  }

  export type InventoryLoanListRelationFilter = {
    every?: InventoryLoanWhereInput
    some?: InventoryLoanWhereInput
    none?: InventoryLoanWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AssetRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaintenanceRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProcurementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PartUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PartReplacementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NewPartRegistrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComponentTransferOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComponentMaintenanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryLoanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    managerId?: SortOrder
    budgetLimit?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    budgetLimit?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    managerId?: SortOrder
    budgetLimit?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    managerId?: SortOrder
    budgetLimit?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    budgetLimit?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    building?: SortOrder
    floor?: SortOrder
    room?: SortOrder
    address?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    building?: SortOrder
    floor?: SortOrder
    room?: SortOrder
    address?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    building?: SortOrder
    floor?: SortOrder
    room?: SortOrder
    address?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryNullableRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    parentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    parentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    parentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaintenanceContractListRelationFilter = {
    every?: MaintenanceContractWhereInput
    some?: MaintenanceContractWhereInput
    none?: MaintenanceContractWhereInput
  }

  export type SparePartListRelationFilter = {
    every?: SparePartWhereInput
    some?: SparePartWhereInput
    none?: SparePartWhereInput
  }

  export type MaintenanceContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SparePartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    contactPerson?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VendorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    contactPerson?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VendorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    contactPerson?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumAssetStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetStatusFilter<$PrismaModel> | $Enums.AssetStatus
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type VendorNullableRelationFilter = {
    is?: VendorWhereInput | null
    isNot?: VendorWhereInput | null
  }

  export type LocationNullableRelationFilter = {
    is?: LocationWhereInput | null
    isNot?: LocationWhereInput | null
  }

  export type DisposalRecordNullableRelationFilter = {
    is?: DisposalRecordWhereInput | null
    isNot?: DisposalRecordWhereInput | null
  }

  export type AssetComponentListRelationFilter = {
    every?: AssetComponentWhereInput
    some?: AssetComponentWhereInput
    none?: AssetComponentWhereInput
  }

  export type AssetComponentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetCountOrderByAggregateInput = {
    id?: SortOrder
    assetTag?: SortOrder
    name?: SortOrder
    description?: SortOrder
    serialNumber?: SortOrder
    model?: SortOrder
    brand?: SortOrder
    purchaseDate?: SortOrder
    purchasePrice?: SortOrder
    currentValue?: SortOrder
    warrantyExpiry?: SortOrder
    status?: SortOrder
    condition?: SortOrder
    notes?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    vendorId?: SortOrder
    locationId?: SortOrder
    departmentId?: SortOrder
    assignedToId?: SortOrder
  }

  export type AssetAvgOrderByAggregateInput = {
    purchasePrice?: SortOrder
    currentValue?: SortOrder
  }

  export type AssetMaxOrderByAggregateInput = {
    id?: SortOrder
    assetTag?: SortOrder
    name?: SortOrder
    description?: SortOrder
    serialNumber?: SortOrder
    model?: SortOrder
    brand?: SortOrder
    purchaseDate?: SortOrder
    purchasePrice?: SortOrder
    currentValue?: SortOrder
    warrantyExpiry?: SortOrder
    status?: SortOrder
    condition?: SortOrder
    notes?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    vendorId?: SortOrder
    locationId?: SortOrder
    departmentId?: SortOrder
    assignedToId?: SortOrder
  }

  export type AssetMinOrderByAggregateInput = {
    id?: SortOrder
    assetTag?: SortOrder
    name?: SortOrder
    description?: SortOrder
    serialNumber?: SortOrder
    model?: SortOrder
    brand?: SortOrder
    purchaseDate?: SortOrder
    purchasePrice?: SortOrder
    currentValue?: SortOrder
    warrantyExpiry?: SortOrder
    status?: SortOrder
    condition?: SortOrder
    notes?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    vendorId?: SortOrder
    locationId?: SortOrder
    departmentId?: SortOrder
    assignedToId?: SortOrder
  }

  export type AssetSumOrderByAggregateInput = {
    purchasePrice?: SortOrder
    currentValue?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumAssetStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssetStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetStatusFilter<$PrismaModel>
    _max?: NestedEnumAssetStatusFilter<$PrismaModel>
  }

  export type EnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DepartmentRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type AssetNullableRelationFilter = {
    is?: AssetWhereInput | null
    isNot?: AssetWhereInput | null
  }

  export type AssetRequestCountOrderByAggregateInput = {
    id?: SortOrder
    requestNumber?: SortOrder
    description?: SortOrder
    justification?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    requestedDate?: SortOrder
    approvedDate?: SortOrder
    allocatedDate?: SortOrder
    rejectionReason?: SortOrder
    notes?: SortOrder
    requesterId?: SortOrder
    departmentId?: SortOrder
    assetId?: SortOrder
    approvedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    requestNumber?: SortOrder
    description?: SortOrder
    justification?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    requestedDate?: SortOrder
    approvedDate?: SortOrder
    allocatedDate?: SortOrder
    rejectionReason?: SortOrder
    notes?: SortOrder
    requesterId?: SortOrder
    departmentId?: SortOrder
    assetId?: SortOrder
    approvedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetRequestMinOrderByAggregateInput = {
    id?: SortOrder
    requestNumber?: SortOrder
    description?: SortOrder
    justification?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    requestedDate?: SortOrder
    approvedDate?: SortOrder
    allocatedDate?: SortOrder
    rejectionReason?: SortOrder
    notes?: SortOrder
    requesterId?: SortOrder
    departmentId?: SortOrder
    assetId?: SortOrder
    approvedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type EnumMaintenanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceStatusFilter<$PrismaModel> | $Enums.MaintenanceStatus
  }

  export type AssetRelationFilter = {
    is?: AssetWhereInput
    isNot?: AssetWhereInput
  }

  export type MaintenanceRecordCountOrderByAggregateInput = {
    id?: SortOrder
    maintenanceType?: SortOrder
    description?: SortOrder
    scheduledDate?: SortOrder
    completedDate?: SortOrder
    status?: SortOrder
    cost?: SortOrder
    notes?: SortOrder
    assetId?: SortOrder
    technicianId?: SortOrder
    vendorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaintenanceRecordAvgOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type MaintenanceRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    maintenanceType?: SortOrder
    description?: SortOrder
    scheduledDate?: SortOrder
    completedDate?: SortOrder
    status?: SortOrder
    cost?: SortOrder
    notes?: SortOrder
    assetId?: SortOrder
    technicianId?: SortOrder
    vendorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaintenanceRecordMinOrderByAggregateInput = {
    id?: SortOrder
    maintenanceType?: SortOrder
    description?: SortOrder
    scheduledDate?: SortOrder
    completedDate?: SortOrder
    status?: SortOrder
    cost?: SortOrder
    notes?: SortOrder
    assetId?: SortOrder
    technicianId?: SortOrder
    vendorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaintenanceRecordSumOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type EnumMaintenanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type VendorRelationFilter = {
    is?: VendorWhereInput
    isNot?: VendorWhereInput
  }

  export type MaintenanceContractCountOrderByAggregateInput = {
    id?: SortOrder
    contractNumber?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    cost?: SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    vendorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaintenanceContractAvgOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type MaintenanceContractMaxOrderByAggregateInput = {
    id?: SortOrder
    contractNumber?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    cost?: SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    vendorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaintenanceContractMinOrderByAggregateInput = {
    id?: SortOrder
    contractNumber?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    cost?: SortOrder
    terms?: SortOrder
    isActive?: SortOrder
    vendorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaintenanceContractSumOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumAuditStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditStatus | EnumAuditStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditStatusFilter<$PrismaModel> | $Enums.AuditStatus
  }

  export type AuditRecordCountOrderByAggregateInput = {
    id?: SortOrder
    auditType?: SortOrder
    scheduledDate?: SortOrder
    completedDate?: SortOrder
    status?: SortOrder
    findings?: SortOrder
    recommendations?: SortOrder
    assetId?: SortOrder
    auditorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuditRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    auditType?: SortOrder
    scheduledDate?: SortOrder
    completedDate?: SortOrder
    status?: SortOrder
    findings?: SortOrder
    recommendations?: SortOrder
    assetId?: SortOrder
    auditorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuditRecordMinOrderByAggregateInput = {
    id?: SortOrder
    auditType?: SortOrder
    scheduledDate?: SortOrder
    completedDate?: SortOrder
    status?: SortOrder
    findings?: SortOrder
    recommendations?: SortOrder
    assetId?: SortOrder
    auditorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAuditStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditStatus | EnumAuditStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditStatusWithAggregatesFilter<$PrismaModel> | $Enums.AuditStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditStatusFilter<$PrismaModel>
    _max?: NestedEnumAuditStatusFilter<$PrismaModel>
  }

  export type DisposalRecordCountOrderByAggregateInput = {
    id?: SortOrder
    disposalType?: SortOrder
    disposalDate?: SortOrder
    disposalValue?: SortOrder
    reason?: SortOrder
    approvalReference?: SortOrder
    notes?: SortOrder
    assetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DisposalRecordAvgOrderByAggregateInput = {
    disposalValue?: SortOrder
  }

  export type DisposalRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    disposalType?: SortOrder
    disposalDate?: SortOrder
    disposalValue?: SortOrder
    reason?: SortOrder
    approvalReference?: SortOrder
    notes?: SortOrder
    assetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DisposalRecordMinOrderByAggregateInput = {
    id?: SortOrder
    disposalType?: SortOrder
    disposalDate?: SortOrder
    disposalValue?: SortOrder
    reason?: SortOrder
    approvalReference?: SortOrder
    notes?: SortOrder
    assetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DisposalRecordSumOrderByAggregateInput = {
    disposalValue?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type SystemSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSparePartCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.SparePartCategory | EnumSparePartCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.SparePartCategory[] | ListEnumSparePartCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.SparePartCategory[] | ListEnumSparePartCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumSparePartCategoryFilter<$PrismaModel> | $Enums.SparePartCategory
  }

  export type EnumSparePartTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SparePartType | EnumSparePartTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SparePartType[] | ListEnumSparePartTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SparePartType[] | ListEnumSparePartTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSparePartTypeFilter<$PrismaModel> | $Enums.SparePartType
  }

  export type EnumSparePartStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SparePartStatus | EnumSparePartStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SparePartStatus[] | ListEnumSparePartStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SparePartStatus[] | ListEnumSparePartStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSparePartStatusFilter<$PrismaModel> | $Enums.SparePartStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type SparePartCountOrderByAggregateInput = {
    id?: SortOrder
    partNumber?: SortOrder
    name?: SortOrder
    description?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    category?: SortOrder
    partType?: SortOrder
    status?: SortOrder
    unitPrice?: SortOrder
    stockLevel?: SortOrder
    minStockLevel?: SortOrder
    maxStockLevel?: SortOrder
    reorderPoint?: SortOrder
    storageLocation?: SortOrder
    specifications?: SortOrder
    compatibleWith?: SortOrder
    notes?: SortOrder
    isActive?: SortOrder
    vendorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SparePartAvgOrderByAggregateInput = {
    unitPrice?: SortOrder
    stockLevel?: SortOrder
    minStockLevel?: SortOrder
    maxStockLevel?: SortOrder
    reorderPoint?: SortOrder
  }

  export type SparePartMaxOrderByAggregateInput = {
    id?: SortOrder
    partNumber?: SortOrder
    name?: SortOrder
    description?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    category?: SortOrder
    partType?: SortOrder
    status?: SortOrder
    unitPrice?: SortOrder
    stockLevel?: SortOrder
    minStockLevel?: SortOrder
    maxStockLevel?: SortOrder
    reorderPoint?: SortOrder
    storageLocation?: SortOrder
    notes?: SortOrder
    isActive?: SortOrder
    vendorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SparePartMinOrderByAggregateInput = {
    id?: SortOrder
    partNumber?: SortOrder
    name?: SortOrder
    description?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    category?: SortOrder
    partType?: SortOrder
    status?: SortOrder
    unitPrice?: SortOrder
    stockLevel?: SortOrder
    minStockLevel?: SortOrder
    maxStockLevel?: SortOrder
    reorderPoint?: SortOrder
    storageLocation?: SortOrder
    notes?: SortOrder
    isActive?: SortOrder
    vendorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SparePartSumOrderByAggregateInput = {
    unitPrice?: SortOrder
    stockLevel?: SortOrder
    minStockLevel?: SortOrder
    maxStockLevel?: SortOrder
    reorderPoint?: SortOrder
  }

  export type EnumSparePartCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SparePartCategory | EnumSparePartCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.SparePartCategory[] | ListEnumSparePartCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.SparePartCategory[] | ListEnumSparePartCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumSparePartCategoryWithAggregatesFilter<$PrismaModel> | $Enums.SparePartCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSparePartCategoryFilter<$PrismaModel>
    _max?: NestedEnumSparePartCategoryFilter<$PrismaModel>
  }

  export type EnumSparePartTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SparePartType | EnumSparePartTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SparePartType[] | ListEnumSparePartTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SparePartType[] | ListEnumSparePartTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSparePartTypeWithAggregatesFilter<$PrismaModel> | $Enums.SparePartType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSparePartTypeFilter<$PrismaModel>
    _max?: NestedEnumSparePartTypeFilter<$PrismaModel>
  }

  export type EnumSparePartStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SparePartStatus | EnumSparePartStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SparePartStatus[] | ListEnumSparePartStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SparePartStatus[] | ListEnumSparePartStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSparePartStatusWithAggregatesFilter<$PrismaModel> | $Enums.SparePartStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSparePartStatusFilter<$PrismaModel>
    _max?: NestedEnumSparePartStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumProcurementStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcurementStatus | EnumProcurementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProcurementStatus[] | ListEnumProcurementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcurementStatus[] | ListEnumProcurementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProcurementStatusFilter<$PrismaModel> | $Enums.ProcurementStatus
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SparePartRelationFilter = {
    is?: SparePartWhereInput
    isNot?: SparePartWhereInput
  }

  export type ProcurementCountOrderByAggregateInput = {
    id?: SortOrder
    procurementNumber?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalCost?: SortOrder
    status?: SortOrder
    orderedDate?: SortOrder
    expectedDate?: SortOrder
    receivedDate?: SortOrder
    receivedQuantity?: SortOrder
    invoiceNumber?: SortOrder
    notes?: SortOrder
    partId?: SortOrder
    vendorId?: SortOrder
    orderedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProcurementAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalCost?: SortOrder
    receivedQuantity?: SortOrder
  }

  export type ProcurementMaxOrderByAggregateInput = {
    id?: SortOrder
    procurementNumber?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalCost?: SortOrder
    status?: SortOrder
    orderedDate?: SortOrder
    expectedDate?: SortOrder
    receivedDate?: SortOrder
    receivedQuantity?: SortOrder
    invoiceNumber?: SortOrder
    notes?: SortOrder
    partId?: SortOrder
    vendorId?: SortOrder
    orderedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProcurementMinOrderByAggregateInput = {
    id?: SortOrder
    procurementNumber?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalCost?: SortOrder
    status?: SortOrder
    orderedDate?: SortOrder
    expectedDate?: SortOrder
    receivedDate?: SortOrder
    receivedQuantity?: SortOrder
    invoiceNumber?: SortOrder
    notes?: SortOrder
    partId?: SortOrder
    vendorId?: SortOrder
    orderedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProcurementSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalCost?: SortOrder
    receivedQuantity?: SortOrder
  }

  export type EnumProcurementStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcurementStatus | EnumProcurementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProcurementStatus[] | ListEnumProcurementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcurementStatus[] | ListEnumProcurementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProcurementStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProcurementStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProcurementStatusFilter<$PrismaModel>
    _max?: NestedEnumProcurementStatusFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumPartUsageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PartUsageType | EnumPartUsageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PartUsageType[] | ListEnumPartUsageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PartUsageType[] | ListEnumPartUsageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPartUsageTypeFilter<$PrismaModel> | $Enums.PartUsageType
  }

  export type AssetComponentNullableRelationFilter = {
    is?: AssetComponentWhereInput | null
    isNot?: AssetComponentWhereInput | null
  }

  export type MaintenanceRecordNullableRelationFilter = {
    is?: MaintenanceRecordWhereInput | null
    isNot?: MaintenanceRecordWhereInput | null
  }

  export type PartUsageCountOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    usageType?: SortOrder
    usageDate?: SortOrder
    notes?: SortOrder
    partId?: SortOrder
    assetId?: SortOrder
    componentId?: SortOrder
    maintenanceId?: SortOrder
    usedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartUsageAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type PartUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    usageType?: SortOrder
    usageDate?: SortOrder
    notes?: SortOrder
    partId?: SortOrder
    assetId?: SortOrder
    componentId?: SortOrder
    maintenanceId?: SortOrder
    usedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartUsageMinOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    usageType?: SortOrder
    usageDate?: SortOrder
    notes?: SortOrder
    partId?: SortOrder
    assetId?: SortOrder
    componentId?: SortOrder
    maintenanceId?: SortOrder
    usedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartUsageSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type EnumPartUsageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PartUsageType | EnumPartUsageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PartUsageType[] | ListEnumPartUsageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PartUsageType[] | ListEnumPartUsageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPartUsageTypeWithAggregatesFilter<$PrismaModel> | $Enums.PartUsageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPartUsageTypeFilter<$PrismaModel>
    _max?: NestedEnumPartUsageTypeFilter<$PrismaModel>
  }

  export type EnumReplacementStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReplacementStatus | EnumReplacementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReplacementStatus[] | ListEnumReplacementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReplacementStatus[] | ListEnumReplacementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReplacementStatusFilter<$PrismaModel> | $Enums.ReplacementStatus
  }

  export type SparePartNullableRelationFilter = {
    is?: SparePartWhereInput | null
    isNot?: SparePartWhereInput | null
  }

  export type PartReplacementCountOrderByAggregateInput = {
    id?: SortOrder
    replacementNumber?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    plannedDate?: SortOrder
    completedDate?: SortOrder
    cost?: SortOrder
    notes?: SortOrder
    oldPartId?: SortOrder
    oldComponentId?: SortOrder
    newPartId?: SortOrder
    assetId?: SortOrder
    performedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartReplacementAvgOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type PartReplacementMaxOrderByAggregateInput = {
    id?: SortOrder
    replacementNumber?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    plannedDate?: SortOrder
    completedDate?: SortOrder
    cost?: SortOrder
    notes?: SortOrder
    oldPartId?: SortOrder
    oldComponentId?: SortOrder
    newPartId?: SortOrder
    assetId?: SortOrder
    performedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartReplacementMinOrderByAggregateInput = {
    id?: SortOrder
    replacementNumber?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    plannedDate?: SortOrder
    completedDate?: SortOrder
    cost?: SortOrder
    notes?: SortOrder
    oldPartId?: SortOrder
    oldComponentId?: SortOrder
    newPartId?: SortOrder
    assetId?: SortOrder
    performedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartReplacementSumOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type EnumReplacementStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReplacementStatus | EnumReplacementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReplacementStatus[] | ListEnumReplacementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReplacementStatus[] | ListEnumReplacementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReplacementStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReplacementStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReplacementStatusFilter<$PrismaModel>
    _max?: NestedEnumReplacementStatusFilter<$PrismaModel>
  }

  export type EnumRegistrationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RegistrationStatus | EnumRegistrationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRegistrationStatusFilter<$PrismaModel> | $Enums.RegistrationStatus
  }

  export type NewPartRegistrationCountOrderByAggregateInput = {
    id?: SortOrder
    registrationNumber?: SortOrder
    serialNumber?: SortOrder
    assetTag?: SortOrder
    status?: SortOrder
    registeredDate?: SortOrder
    notes?: SortOrder
    partId?: SortOrder
    assetId?: SortOrder
    registeredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewPartRegistrationMaxOrderByAggregateInput = {
    id?: SortOrder
    registrationNumber?: SortOrder
    serialNumber?: SortOrder
    assetTag?: SortOrder
    status?: SortOrder
    registeredDate?: SortOrder
    notes?: SortOrder
    partId?: SortOrder
    assetId?: SortOrder
    registeredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewPartRegistrationMinOrderByAggregateInput = {
    id?: SortOrder
    registrationNumber?: SortOrder
    serialNumber?: SortOrder
    assetTag?: SortOrder
    status?: SortOrder
    registeredDate?: SortOrder
    notes?: SortOrder
    partId?: SortOrder
    assetId?: SortOrder
    registeredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRegistrationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RegistrationStatus | EnumRegistrationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRegistrationStatusWithAggregatesFilter<$PrismaModel> | $Enums.RegistrationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRegistrationStatusFilter<$PrismaModel>
    _max?: NestedEnumRegistrationStatusFilter<$PrismaModel>
  }

  export type EnumComponentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComponentStatus | EnumComponentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComponentStatusFilter<$PrismaModel> | $Enums.ComponentStatus
  }

  export type AssetComponentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    partNumber?: SortOrder
    serialNumber?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    status?: SortOrder
    purchaseDate?: SortOrder
    purchasePrice?: SortOrder
    warrantyExpiry?: SortOrder
    isReplaceable?: SortOrder
    isTransferable?: SortOrder
    notes?: SortOrder
    specifications?: SortOrder
    assetId?: SortOrder
    parentAssetId?: SortOrder
    sourcePartId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetComponentAvgOrderByAggregateInput = {
    purchasePrice?: SortOrder
  }

  export type AssetComponentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    partNumber?: SortOrder
    serialNumber?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    status?: SortOrder
    purchaseDate?: SortOrder
    purchasePrice?: SortOrder
    warrantyExpiry?: SortOrder
    isReplaceable?: SortOrder
    isTransferable?: SortOrder
    notes?: SortOrder
    assetId?: SortOrder
    parentAssetId?: SortOrder
    sourcePartId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetComponentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    partNumber?: SortOrder
    serialNumber?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    status?: SortOrder
    purchaseDate?: SortOrder
    purchasePrice?: SortOrder
    warrantyExpiry?: SortOrder
    isReplaceable?: SortOrder
    isTransferable?: SortOrder
    notes?: SortOrder
    assetId?: SortOrder
    parentAssetId?: SortOrder
    sourcePartId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetComponentSumOrderByAggregateInput = {
    purchasePrice?: SortOrder
  }

  export type EnumComponentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComponentStatus | EnumComponentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComponentStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComponentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComponentStatusFilter<$PrismaModel>
    _max?: NestedEnumComponentStatusFilter<$PrismaModel>
  }

  export type AssetComponentRelationFilter = {
    is?: AssetComponentWhereInput
    isNot?: AssetComponentWhereInput
  }

  export type ComponentTransferCountOrderByAggregateInput = {
    id?: SortOrder
    transferNumber?: SortOrder
    reason?: SortOrder
    transferDate?: SortOrder
    notes?: SortOrder
    componentId?: SortOrder
    fromAssetId?: SortOrder
    toAssetId?: SortOrder
    transferredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ComponentTransferMaxOrderByAggregateInput = {
    id?: SortOrder
    transferNumber?: SortOrder
    reason?: SortOrder
    transferDate?: SortOrder
    notes?: SortOrder
    componentId?: SortOrder
    fromAssetId?: SortOrder
    toAssetId?: SortOrder
    transferredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ComponentTransferMinOrderByAggregateInput = {
    id?: SortOrder
    transferNumber?: SortOrder
    reason?: SortOrder
    transferDate?: SortOrder
    notes?: SortOrder
    componentId?: SortOrder
    fromAssetId?: SortOrder
    toAssetId?: SortOrder
    transferredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ComponentMaintenanceCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    maintenanceType?: SortOrder
    maintenanceDate?: SortOrder
    cost?: SortOrder
    notes?: SortOrder
    componentId?: SortOrder
    performedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ComponentMaintenanceAvgOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type ComponentMaintenanceMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    maintenanceType?: SortOrder
    maintenanceDate?: SortOrder
    cost?: SortOrder
    notes?: SortOrder
    componentId?: SortOrder
    performedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ComponentMaintenanceMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    maintenanceType?: SortOrder
    maintenanceDate?: SortOrder
    cost?: SortOrder
    notes?: SortOrder
    componentId?: SortOrder
    performedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ComponentMaintenanceSumOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type InventoryCountOrderByAggregateInput = {
    id?: SortOrder
    inventoryTag?: SortOrder
    quantity?: SortOrder
    availableQty?: SortOrder
    condition?: SortOrder
    status?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    minStockLevel?: SortOrder
    assetId?: SortOrder
    departmentId?: SortOrder
    custodianId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryAvgOrderByAggregateInput = {
    quantity?: SortOrder
    availableQty?: SortOrder
    minStockLevel?: SortOrder
  }

  export type InventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    inventoryTag?: SortOrder
    quantity?: SortOrder
    availableQty?: SortOrder
    condition?: SortOrder
    status?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    minStockLevel?: SortOrder
    assetId?: SortOrder
    departmentId?: SortOrder
    custodianId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryMinOrderByAggregateInput = {
    id?: SortOrder
    inventoryTag?: SortOrder
    quantity?: SortOrder
    availableQty?: SortOrder
    condition?: SortOrder
    status?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    minStockLevel?: SortOrder
    assetId?: SortOrder
    departmentId?: SortOrder
    custodianId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventorySumOrderByAggregateInput = {
    quantity?: SortOrder
    availableQty?: SortOrder
    minStockLevel?: SortOrder
  }

  export type InventoryRelationFilter = {
    is?: InventoryWhereInput
    isNot?: InventoryWhereInput
  }

  export type InventoryLoanCountOrderByAggregateInput = {
    id?: SortOrder
    loanNumber?: SortOrder
    purpose?: SortOrder
    quantity?: SortOrder
    loanDate?: SortOrder
    expectedReturnDate?: SortOrder
    actualReturnDate?: SortOrder
    status?: SortOrder
    condition?: SortOrder
    notes?: SortOrder
    approvalNotes?: SortOrder
    inventoryId?: SortOrder
    borrowerId?: SortOrder
    approvedById?: SortOrder
    responsibleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryLoanAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type InventoryLoanMaxOrderByAggregateInput = {
    id?: SortOrder
    loanNumber?: SortOrder
    purpose?: SortOrder
    quantity?: SortOrder
    loanDate?: SortOrder
    expectedReturnDate?: SortOrder
    actualReturnDate?: SortOrder
    status?: SortOrder
    condition?: SortOrder
    notes?: SortOrder
    approvalNotes?: SortOrder
    inventoryId?: SortOrder
    borrowerId?: SortOrder
    approvedById?: SortOrder
    responsibleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryLoanMinOrderByAggregateInput = {
    id?: SortOrder
    loanNumber?: SortOrder
    purpose?: SortOrder
    quantity?: SortOrder
    loanDate?: SortOrder
    expectedReturnDate?: SortOrder
    actualReturnDate?: SortOrder
    status?: SortOrder
    condition?: SortOrder
    notes?: SortOrder
    approvalNotes?: SortOrder
    inventoryId?: SortOrder
    borrowerId?: SortOrder
    approvedById?: SortOrder
    responsibleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryLoanSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type DepartmentCreateNestedOneWithoutUsersInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    connect?: DepartmentWhereUniqueInput
  }

  export type AssetRequestCreateNestedManyWithoutRequesterInput = {
    create?: XOR<AssetRequestCreateWithoutRequesterInput, AssetRequestUncheckedCreateWithoutRequesterInput> | AssetRequestCreateWithoutRequesterInput[] | AssetRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutRequesterInput | AssetRequestCreateOrConnectWithoutRequesterInput[]
    createMany?: AssetRequestCreateManyRequesterInputEnvelope
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
  }

  export type AssetRequestCreateNestedManyWithoutApprovedByInput = {
    create?: XOR<AssetRequestCreateWithoutApprovedByInput, AssetRequestUncheckedCreateWithoutApprovedByInput> | AssetRequestCreateWithoutApprovedByInput[] | AssetRequestUncheckedCreateWithoutApprovedByInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutApprovedByInput | AssetRequestCreateOrConnectWithoutApprovedByInput[]
    createMany?: AssetRequestCreateManyApprovedByInputEnvelope
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
  }

  export type AssetCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<AssetCreateWithoutAssignedToInput, AssetUncheckedCreateWithoutAssignedToInput> | AssetCreateWithoutAssignedToInput[] | AssetUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutAssignedToInput | AssetCreateOrConnectWithoutAssignedToInput[]
    createMany?: AssetCreateManyAssignedToInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type MaintenanceRecordCreateNestedManyWithoutTechnicianInput = {
    create?: XOR<MaintenanceRecordCreateWithoutTechnicianInput, MaintenanceRecordUncheckedCreateWithoutTechnicianInput> | MaintenanceRecordCreateWithoutTechnicianInput[] | MaintenanceRecordUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutTechnicianInput | MaintenanceRecordCreateOrConnectWithoutTechnicianInput[]
    createMany?: MaintenanceRecordCreateManyTechnicianInputEnvelope
    connect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutManagerInput = {
    create?: XOR<DepartmentCreateWithoutManagerInput, DepartmentUncheckedCreateWithoutManagerInput> | DepartmentCreateWithoutManagerInput[] | DepartmentUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutManagerInput | DepartmentCreateOrConnectWithoutManagerInput[]
    createMany?: DepartmentCreateManyManagerInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type AuditRecordCreateNestedManyWithoutAuditorInput = {
    create?: XOR<AuditRecordCreateWithoutAuditorInput, AuditRecordUncheckedCreateWithoutAuditorInput> | AuditRecordCreateWithoutAuditorInput[] | AuditRecordUncheckedCreateWithoutAuditorInput[]
    connectOrCreate?: AuditRecordCreateOrConnectWithoutAuditorInput | AuditRecordCreateOrConnectWithoutAuditorInput[]
    createMany?: AuditRecordCreateManyAuditorInputEnvelope
    connect?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ProcurementCreateNestedManyWithoutOrderedByInput = {
    create?: XOR<ProcurementCreateWithoutOrderedByInput, ProcurementUncheckedCreateWithoutOrderedByInput> | ProcurementCreateWithoutOrderedByInput[] | ProcurementUncheckedCreateWithoutOrderedByInput[]
    connectOrCreate?: ProcurementCreateOrConnectWithoutOrderedByInput | ProcurementCreateOrConnectWithoutOrderedByInput[]
    createMany?: ProcurementCreateManyOrderedByInputEnvelope
    connect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
  }

  export type PartUsageCreateNestedManyWithoutUsedByInput = {
    create?: XOR<PartUsageCreateWithoutUsedByInput, PartUsageUncheckedCreateWithoutUsedByInput> | PartUsageCreateWithoutUsedByInput[] | PartUsageUncheckedCreateWithoutUsedByInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutUsedByInput | PartUsageCreateOrConnectWithoutUsedByInput[]
    createMany?: PartUsageCreateManyUsedByInputEnvelope
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
  }

  export type PartReplacementCreateNestedManyWithoutPerformedByInput = {
    create?: XOR<PartReplacementCreateWithoutPerformedByInput, PartReplacementUncheckedCreateWithoutPerformedByInput> | PartReplacementCreateWithoutPerformedByInput[] | PartReplacementUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutPerformedByInput | PartReplacementCreateOrConnectWithoutPerformedByInput[]
    createMany?: PartReplacementCreateManyPerformedByInputEnvelope
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
  }

  export type NewPartRegistrationCreateNestedManyWithoutRegisteredByInput = {
    create?: XOR<NewPartRegistrationCreateWithoutRegisteredByInput, NewPartRegistrationUncheckedCreateWithoutRegisteredByInput> | NewPartRegistrationCreateWithoutRegisteredByInput[] | NewPartRegistrationUncheckedCreateWithoutRegisteredByInput[]
    connectOrCreate?: NewPartRegistrationCreateOrConnectWithoutRegisteredByInput | NewPartRegistrationCreateOrConnectWithoutRegisteredByInput[]
    createMany?: NewPartRegistrationCreateManyRegisteredByInputEnvelope
    connect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
  }

  export type ComponentTransferCreateNestedManyWithoutTransferredByInput = {
    create?: XOR<ComponentTransferCreateWithoutTransferredByInput, ComponentTransferUncheckedCreateWithoutTransferredByInput> | ComponentTransferCreateWithoutTransferredByInput[] | ComponentTransferUncheckedCreateWithoutTransferredByInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutTransferredByInput | ComponentTransferCreateOrConnectWithoutTransferredByInput[]
    createMany?: ComponentTransferCreateManyTransferredByInputEnvelope
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
  }

  export type ComponentMaintenanceCreateNestedManyWithoutPerformedByInput = {
    create?: XOR<ComponentMaintenanceCreateWithoutPerformedByInput, ComponentMaintenanceUncheckedCreateWithoutPerformedByInput> | ComponentMaintenanceCreateWithoutPerformedByInput[] | ComponentMaintenanceUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: ComponentMaintenanceCreateOrConnectWithoutPerformedByInput | ComponentMaintenanceCreateOrConnectWithoutPerformedByInput[]
    createMany?: ComponentMaintenanceCreateManyPerformedByInputEnvelope
    connect?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
  }

  export type InventoryCreateNestedManyWithoutCustodianInput = {
    create?: XOR<InventoryCreateWithoutCustodianInput, InventoryUncheckedCreateWithoutCustodianInput> | InventoryCreateWithoutCustodianInput[] | InventoryUncheckedCreateWithoutCustodianInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutCustodianInput | InventoryCreateOrConnectWithoutCustodianInput[]
    createMany?: InventoryCreateManyCustodianInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type InventoryLoanCreateNestedManyWithoutBorrowerInput = {
    create?: XOR<InventoryLoanCreateWithoutBorrowerInput, InventoryLoanUncheckedCreateWithoutBorrowerInput> | InventoryLoanCreateWithoutBorrowerInput[] | InventoryLoanUncheckedCreateWithoutBorrowerInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutBorrowerInput | InventoryLoanCreateOrConnectWithoutBorrowerInput[]
    createMany?: InventoryLoanCreateManyBorrowerInputEnvelope
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
  }

  export type InventoryLoanCreateNestedManyWithoutApprovedByInput = {
    create?: XOR<InventoryLoanCreateWithoutApprovedByInput, InventoryLoanUncheckedCreateWithoutApprovedByInput> | InventoryLoanCreateWithoutApprovedByInput[] | InventoryLoanUncheckedCreateWithoutApprovedByInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutApprovedByInput | InventoryLoanCreateOrConnectWithoutApprovedByInput[]
    createMany?: InventoryLoanCreateManyApprovedByInputEnvelope
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
  }

  export type InventoryLoanCreateNestedManyWithoutResponsibleInput = {
    create?: XOR<InventoryLoanCreateWithoutResponsibleInput, InventoryLoanUncheckedCreateWithoutResponsibleInput> | InventoryLoanCreateWithoutResponsibleInput[] | InventoryLoanUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutResponsibleInput | InventoryLoanCreateOrConnectWithoutResponsibleInput[]
    createMany?: InventoryLoanCreateManyResponsibleInputEnvelope
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
  }

  export type AssetRequestUncheckedCreateNestedManyWithoutRequesterInput = {
    create?: XOR<AssetRequestCreateWithoutRequesterInput, AssetRequestUncheckedCreateWithoutRequesterInput> | AssetRequestCreateWithoutRequesterInput[] | AssetRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutRequesterInput | AssetRequestCreateOrConnectWithoutRequesterInput[]
    createMany?: AssetRequestCreateManyRequesterInputEnvelope
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
  }

  export type AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput = {
    create?: XOR<AssetRequestCreateWithoutApprovedByInput, AssetRequestUncheckedCreateWithoutApprovedByInput> | AssetRequestCreateWithoutApprovedByInput[] | AssetRequestUncheckedCreateWithoutApprovedByInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutApprovedByInput | AssetRequestCreateOrConnectWithoutApprovedByInput[]
    createMany?: AssetRequestCreateManyApprovedByInputEnvelope
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<AssetCreateWithoutAssignedToInput, AssetUncheckedCreateWithoutAssignedToInput> | AssetCreateWithoutAssignedToInput[] | AssetUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutAssignedToInput | AssetCreateOrConnectWithoutAssignedToInput[]
    createMany?: AssetCreateManyAssignedToInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput = {
    create?: XOR<MaintenanceRecordCreateWithoutTechnicianInput, MaintenanceRecordUncheckedCreateWithoutTechnicianInput> | MaintenanceRecordCreateWithoutTechnicianInput[] | MaintenanceRecordUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutTechnicianInput | MaintenanceRecordCreateOrConnectWithoutTechnicianInput[]
    createMany?: MaintenanceRecordCreateManyTechnicianInputEnvelope
    connect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutManagerInput = {
    create?: XOR<DepartmentCreateWithoutManagerInput, DepartmentUncheckedCreateWithoutManagerInput> | DepartmentCreateWithoutManagerInput[] | DepartmentUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutManagerInput | DepartmentCreateOrConnectWithoutManagerInput[]
    createMany?: DepartmentCreateManyManagerInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type AuditRecordUncheckedCreateNestedManyWithoutAuditorInput = {
    create?: XOR<AuditRecordCreateWithoutAuditorInput, AuditRecordUncheckedCreateWithoutAuditorInput> | AuditRecordCreateWithoutAuditorInput[] | AuditRecordUncheckedCreateWithoutAuditorInput[]
    connectOrCreate?: AuditRecordCreateOrConnectWithoutAuditorInput | AuditRecordCreateOrConnectWithoutAuditorInput[]
    createMany?: AuditRecordCreateManyAuditorInputEnvelope
    connect?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ProcurementUncheckedCreateNestedManyWithoutOrderedByInput = {
    create?: XOR<ProcurementCreateWithoutOrderedByInput, ProcurementUncheckedCreateWithoutOrderedByInput> | ProcurementCreateWithoutOrderedByInput[] | ProcurementUncheckedCreateWithoutOrderedByInput[]
    connectOrCreate?: ProcurementCreateOrConnectWithoutOrderedByInput | ProcurementCreateOrConnectWithoutOrderedByInput[]
    createMany?: ProcurementCreateManyOrderedByInputEnvelope
    connect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
  }

  export type PartUsageUncheckedCreateNestedManyWithoutUsedByInput = {
    create?: XOR<PartUsageCreateWithoutUsedByInput, PartUsageUncheckedCreateWithoutUsedByInput> | PartUsageCreateWithoutUsedByInput[] | PartUsageUncheckedCreateWithoutUsedByInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutUsedByInput | PartUsageCreateOrConnectWithoutUsedByInput[]
    createMany?: PartUsageCreateManyUsedByInputEnvelope
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
  }

  export type PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput = {
    create?: XOR<PartReplacementCreateWithoutPerformedByInput, PartReplacementUncheckedCreateWithoutPerformedByInput> | PartReplacementCreateWithoutPerformedByInput[] | PartReplacementUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutPerformedByInput | PartReplacementCreateOrConnectWithoutPerformedByInput[]
    createMany?: PartReplacementCreateManyPerformedByInputEnvelope
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
  }

  export type NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput = {
    create?: XOR<NewPartRegistrationCreateWithoutRegisteredByInput, NewPartRegistrationUncheckedCreateWithoutRegisteredByInput> | NewPartRegistrationCreateWithoutRegisteredByInput[] | NewPartRegistrationUncheckedCreateWithoutRegisteredByInput[]
    connectOrCreate?: NewPartRegistrationCreateOrConnectWithoutRegisteredByInput | NewPartRegistrationCreateOrConnectWithoutRegisteredByInput[]
    createMany?: NewPartRegistrationCreateManyRegisteredByInputEnvelope
    connect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
  }

  export type ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput = {
    create?: XOR<ComponentTransferCreateWithoutTransferredByInput, ComponentTransferUncheckedCreateWithoutTransferredByInput> | ComponentTransferCreateWithoutTransferredByInput[] | ComponentTransferUncheckedCreateWithoutTransferredByInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutTransferredByInput | ComponentTransferCreateOrConnectWithoutTransferredByInput[]
    createMany?: ComponentTransferCreateManyTransferredByInputEnvelope
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
  }

  export type ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput = {
    create?: XOR<ComponentMaintenanceCreateWithoutPerformedByInput, ComponentMaintenanceUncheckedCreateWithoutPerformedByInput> | ComponentMaintenanceCreateWithoutPerformedByInput[] | ComponentMaintenanceUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: ComponentMaintenanceCreateOrConnectWithoutPerformedByInput | ComponentMaintenanceCreateOrConnectWithoutPerformedByInput[]
    createMany?: ComponentMaintenanceCreateManyPerformedByInputEnvelope
    connect?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
  }

  export type InventoryUncheckedCreateNestedManyWithoutCustodianInput = {
    create?: XOR<InventoryCreateWithoutCustodianInput, InventoryUncheckedCreateWithoutCustodianInput> | InventoryCreateWithoutCustodianInput[] | InventoryUncheckedCreateWithoutCustodianInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutCustodianInput | InventoryCreateOrConnectWithoutCustodianInput[]
    createMany?: InventoryCreateManyCustodianInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput = {
    create?: XOR<InventoryLoanCreateWithoutBorrowerInput, InventoryLoanUncheckedCreateWithoutBorrowerInput> | InventoryLoanCreateWithoutBorrowerInput[] | InventoryLoanUncheckedCreateWithoutBorrowerInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutBorrowerInput | InventoryLoanCreateOrConnectWithoutBorrowerInput[]
    createMany?: InventoryLoanCreateManyBorrowerInputEnvelope
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
  }

  export type InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput = {
    create?: XOR<InventoryLoanCreateWithoutApprovedByInput, InventoryLoanUncheckedCreateWithoutApprovedByInput> | InventoryLoanCreateWithoutApprovedByInput[] | InventoryLoanUncheckedCreateWithoutApprovedByInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutApprovedByInput | InventoryLoanCreateOrConnectWithoutApprovedByInput[]
    createMany?: InventoryLoanCreateManyApprovedByInputEnvelope
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
  }

  export type InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput = {
    create?: XOR<InventoryLoanCreateWithoutResponsibleInput, InventoryLoanUncheckedCreateWithoutResponsibleInput> | InventoryLoanCreateWithoutResponsibleInput[] | InventoryLoanUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutResponsibleInput | InventoryLoanCreateOrConnectWithoutResponsibleInput[]
    createMany?: InventoryLoanCreateManyResponsibleInputEnvelope
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DepartmentUpdateOneWithoutUsersNestedInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    upsert?: DepartmentUpsertWithoutUsersInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutUsersInput, DepartmentUpdateWithoutUsersInput>, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type AssetRequestUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<AssetRequestCreateWithoutRequesterInput, AssetRequestUncheckedCreateWithoutRequesterInput> | AssetRequestCreateWithoutRequesterInput[] | AssetRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutRequesterInput | AssetRequestCreateOrConnectWithoutRequesterInput[]
    upsert?: AssetRequestUpsertWithWhereUniqueWithoutRequesterInput | AssetRequestUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: AssetRequestCreateManyRequesterInputEnvelope
    set?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    disconnect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    delete?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    update?: AssetRequestUpdateWithWhereUniqueWithoutRequesterInput | AssetRequestUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: AssetRequestUpdateManyWithWhereWithoutRequesterInput | AssetRequestUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: AssetRequestScalarWhereInput | AssetRequestScalarWhereInput[]
  }

  export type AssetRequestUpdateManyWithoutApprovedByNestedInput = {
    create?: XOR<AssetRequestCreateWithoutApprovedByInput, AssetRequestUncheckedCreateWithoutApprovedByInput> | AssetRequestCreateWithoutApprovedByInput[] | AssetRequestUncheckedCreateWithoutApprovedByInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutApprovedByInput | AssetRequestCreateOrConnectWithoutApprovedByInput[]
    upsert?: AssetRequestUpsertWithWhereUniqueWithoutApprovedByInput | AssetRequestUpsertWithWhereUniqueWithoutApprovedByInput[]
    createMany?: AssetRequestCreateManyApprovedByInputEnvelope
    set?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    disconnect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    delete?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    update?: AssetRequestUpdateWithWhereUniqueWithoutApprovedByInput | AssetRequestUpdateWithWhereUniqueWithoutApprovedByInput[]
    updateMany?: AssetRequestUpdateManyWithWhereWithoutApprovedByInput | AssetRequestUpdateManyWithWhereWithoutApprovedByInput[]
    deleteMany?: AssetRequestScalarWhereInput | AssetRequestScalarWhereInput[]
  }

  export type AssetUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<AssetCreateWithoutAssignedToInput, AssetUncheckedCreateWithoutAssignedToInput> | AssetCreateWithoutAssignedToInput[] | AssetUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutAssignedToInput | AssetCreateOrConnectWithoutAssignedToInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutAssignedToInput | AssetUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: AssetCreateManyAssignedToInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutAssignedToInput | AssetUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutAssignedToInput | AssetUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type MaintenanceRecordUpdateManyWithoutTechnicianNestedInput = {
    create?: XOR<MaintenanceRecordCreateWithoutTechnicianInput, MaintenanceRecordUncheckedCreateWithoutTechnicianInput> | MaintenanceRecordCreateWithoutTechnicianInput[] | MaintenanceRecordUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutTechnicianInput | MaintenanceRecordCreateOrConnectWithoutTechnicianInput[]
    upsert?: MaintenanceRecordUpsertWithWhereUniqueWithoutTechnicianInput | MaintenanceRecordUpsertWithWhereUniqueWithoutTechnicianInput[]
    createMany?: MaintenanceRecordCreateManyTechnicianInputEnvelope
    set?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    disconnect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    delete?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    connect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    update?: MaintenanceRecordUpdateWithWhereUniqueWithoutTechnicianInput | MaintenanceRecordUpdateWithWhereUniqueWithoutTechnicianInput[]
    updateMany?: MaintenanceRecordUpdateManyWithWhereWithoutTechnicianInput | MaintenanceRecordUpdateManyWithWhereWithoutTechnicianInput[]
    deleteMany?: MaintenanceRecordScalarWhereInput | MaintenanceRecordScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutManagerNestedInput = {
    create?: XOR<DepartmentCreateWithoutManagerInput, DepartmentUncheckedCreateWithoutManagerInput> | DepartmentCreateWithoutManagerInput[] | DepartmentUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutManagerInput | DepartmentCreateOrConnectWithoutManagerInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutManagerInput | DepartmentUpsertWithWhereUniqueWithoutManagerInput[]
    createMany?: DepartmentCreateManyManagerInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutManagerInput | DepartmentUpdateWithWhereUniqueWithoutManagerInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutManagerInput | DepartmentUpdateManyWithWhereWithoutManagerInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type AuditRecordUpdateManyWithoutAuditorNestedInput = {
    create?: XOR<AuditRecordCreateWithoutAuditorInput, AuditRecordUncheckedCreateWithoutAuditorInput> | AuditRecordCreateWithoutAuditorInput[] | AuditRecordUncheckedCreateWithoutAuditorInput[]
    connectOrCreate?: AuditRecordCreateOrConnectWithoutAuditorInput | AuditRecordCreateOrConnectWithoutAuditorInput[]
    upsert?: AuditRecordUpsertWithWhereUniqueWithoutAuditorInput | AuditRecordUpsertWithWhereUniqueWithoutAuditorInput[]
    createMany?: AuditRecordCreateManyAuditorInputEnvelope
    set?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    disconnect?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    delete?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    connect?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    update?: AuditRecordUpdateWithWhereUniqueWithoutAuditorInput | AuditRecordUpdateWithWhereUniqueWithoutAuditorInput[]
    updateMany?: AuditRecordUpdateManyWithWhereWithoutAuditorInput | AuditRecordUpdateManyWithWhereWithoutAuditorInput[]
    deleteMany?: AuditRecordScalarWhereInput | AuditRecordScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ProcurementUpdateManyWithoutOrderedByNestedInput = {
    create?: XOR<ProcurementCreateWithoutOrderedByInput, ProcurementUncheckedCreateWithoutOrderedByInput> | ProcurementCreateWithoutOrderedByInput[] | ProcurementUncheckedCreateWithoutOrderedByInput[]
    connectOrCreate?: ProcurementCreateOrConnectWithoutOrderedByInput | ProcurementCreateOrConnectWithoutOrderedByInput[]
    upsert?: ProcurementUpsertWithWhereUniqueWithoutOrderedByInput | ProcurementUpsertWithWhereUniqueWithoutOrderedByInput[]
    createMany?: ProcurementCreateManyOrderedByInputEnvelope
    set?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    disconnect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    delete?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    connect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    update?: ProcurementUpdateWithWhereUniqueWithoutOrderedByInput | ProcurementUpdateWithWhereUniqueWithoutOrderedByInput[]
    updateMany?: ProcurementUpdateManyWithWhereWithoutOrderedByInput | ProcurementUpdateManyWithWhereWithoutOrderedByInput[]
    deleteMany?: ProcurementScalarWhereInput | ProcurementScalarWhereInput[]
  }

  export type PartUsageUpdateManyWithoutUsedByNestedInput = {
    create?: XOR<PartUsageCreateWithoutUsedByInput, PartUsageUncheckedCreateWithoutUsedByInput> | PartUsageCreateWithoutUsedByInput[] | PartUsageUncheckedCreateWithoutUsedByInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutUsedByInput | PartUsageCreateOrConnectWithoutUsedByInput[]
    upsert?: PartUsageUpsertWithWhereUniqueWithoutUsedByInput | PartUsageUpsertWithWhereUniqueWithoutUsedByInput[]
    createMany?: PartUsageCreateManyUsedByInputEnvelope
    set?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    disconnect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    delete?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    update?: PartUsageUpdateWithWhereUniqueWithoutUsedByInput | PartUsageUpdateWithWhereUniqueWithoutUsedByInput[]
    updateMany?: PartUsageUpdateManyWithWhereWithoutUsedByInput | PartUsageUpdateManyWithWhereWithoutUsedByInput[]
    deleteMany?: PartUsageScalarWhereInput | PartUsageScalarWhereInput[]
  }

  export type PartReplacementUpdateManyWithoutPerformedByNestedInput = {
    create?: XOR<PartReplacementCreateWithoutPerformedByInput, PartReplacementUncheckedCreateWithoutPerformedByInput> | PartReplacementCreateWithoutPerformedByInput[] | PartReplacementUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutPerformedByInput | PartReplacementCreateOrConnectWithoutPerformedByInput[]
    upsert?: PartReplacementUpsertWithWhereUniqueWithoutPerformedByInput | PartReplacementUpsertWithWhereUniqueWithoutPerformedByInput[]
    createMany?: PartReplacementCreateManyPerformedByInputEnvelope
    set?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    disconnect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    delete?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    update?: PartReplacementUpdateWithWhereUniqueWithoutPerformedByInput | PartReplacementUpdateWithWhereUniqueWithoutPerformedByInput[]
    updateMany?: PartReplacementUpdateManyWithWhereWithoutPerformedByInput | PartReplacementUpdateManyWithWhereWithoutPerformedByInput[]
    deleteMany?: PartReplacementScalarWhereInput | PartReplacementScalarWhereInput[]
  }

  export type NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput = {
    create?: XOR<NewPartRegistrationCreateWithoutRegisteredByInput, NewPartRegistrationUncheckedCreateWithoutRegisteredByInput> | NewPartRegistrationCreateWithoutRegisteredByInput[] | NewPartRegistrationUncheckedCreateWithoutRegisteredByInput[]
    connectOrCreate?: NewPartRegistrationCreateOrConnectWithoutRegisteredByInput | NewPartRegistrationCreateOrConnectWithoutRegisteredByInput[]
    upsert?: NewPartRegistrationUpsertWithWhereUniqueWithoutRegisteredByInput | NewPartRegistrationUpsertWithWhereUniqueWithoutRegisteredByInput[]
    createMany?: NewPartRegistrationCreateManyRegisteredByInputEnvelope
    set?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    disconnect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    delete?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    connect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    update?: NewPartRegistrationUpdateWithWhereUniqueWithoutRegisteredByInput | NewPartRegistrationUpdateWithWhereUniqueWithoutRegisteredByInput[]
    updateMany?: NewPartRegistrationUpdateManyWithWhereWithoutRegisteredByInput | NewPartRegistrationUpdateManyWithWhereWithoutRegisteredByInput[]
    deleteMany?: NewPartRegistrationScalarWhereInput | NewPartRegistrationScalarWhereInput[]
  }

  export type ComponentTransferUpdateManyWithoutTransferredByNestedInput = {
    create?: XOR<ComponentTransferCreateWithoutTransferredByInput, ComponentTransferUncheckedCreateWithoutTransferredByInput> | ComponentTransferCreateWithoutTransferredByInput[] | ComponentTransferUncheckedCreateWithoutTransferredByInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutTransferredByInput | ComponentTransferCreateOrConnectWithoutTransferredByInput[]
    upsert?: ComponentTransferUpsertWithWhereUniqueWithoutTransferredByInput | ComponentTransferUpsertWithWhereUniqueWithoutTransferredByInput[]
    createMany?: ComponentTransferCreateManyTransferredByInputEnvelope
    set?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    disconnect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    delete?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    update?: ComponentTransferUpdateWithWhereUniqueWithoutTransferredByInput | ComponentTransferUpdateWithWhereUniqueWithoutTransferredByInput[]
    updateMany?: ComponentTransferUpdateManyWithWhereWithoutTransferredByInput | ComponentTransferUpdateManyWithWhereWithoutTransferredByInput[]
    deleteMany?: ComponentTransferScalarWhereInput | ComponentTransferScalarWhereInput[]
  }

  export type ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput = {
    create?: XOR<ComponentMaintenanceCreateWithoutPerformedByInput, ComponentMaintenanceUncheckedCreateWithoutPerformedByInput> | ComponentMaintenanceCreateWithoutPerformedByInput[] | ComponentMaintenanceUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: ComponentMaintenanceCreateOrConnectWithoutPerformedByInput | ComponentMaintenanceCreateOrConnectWithoutPerformedByInput[]
    upsert?: ComponentMaintenanceUpsertWithWhereUniqueWithoutPerformedByInput | ComponentMaintenanceUpsertWithWhereUniqueWithoutPerformedByInput[]
    createMany?: ComponentMaintenanceCreateManyPerformedByInputEnvelope
    set?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    disconnect?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    delete?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    connect?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    update?: ComponentMaintenanceUpdateWithWhereUniqueWithoutPerformedByInput | ComponentMaintenanceUpdateWithWhereUniqueWithoutPerformedByInput[]
    updateMany?: ComponentMaintenanceUpdateManyWithWhereWithoutPerformedByInput | ComponentMaintenanceUpdateManyWithWhereWithoutPerformedByInput[]
    deleteMany?: ComponentMaintenanceScalarWhereInput | ComponentMaintenanceScalarWhereInput[]
  }

  export type InventoryUpdateManyWithoutCustodianNestedInput = {
    create?: XOR<InventoryCreateWithoutCustodianInput, InventoryUncheckedCreateWithoutCustodianInput> | InventoryCreateWithoutCustodianInput[] | InventoryUncheckedCreateWithoutCustodianInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutCustodianInput | InventoryCreateOrConnectWithoutCustodianInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutCustodianInput | InventoryUpsertWithWhereUniqueWithoutCustodianInput[]
    createMany?: InventoryCreateManyCustodianInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutCustodianInput | InventoryUpdateWithWhereUniqueWithoutCustodianInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutCustodianInput | InventoryUpdateManyWithWhereWithoutCustodianInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type InventoryLoanUpdateManyWithoutBorrowerNestedInput = {
    create?: XOR<InventoryLoanCreateWithoutBorrowerInput, InventoryLoanUncheckedCreateWithoutBorrowerInput> | InventoryLoanCreateWithoutBorrowerInput[] | InventoryLoanUncheckedCreateWithoutBorrowerInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutBorrowerInput | InventoryLoanCreateOrConnectWithoutBorrowerInput[]
    upsert?: InventoryLoanUpsertWithWhereUniqueWithoutBorrowerInput | InventoryLoanUpsertWithWhereUniqueWithoutBorrowerInput[]
    createMany?: InventoryLoanCreateManyBorrowerInputEnvelope
    set?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    disconnect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    delete?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    update?: InventoryLoanUpdateWithWhereUniqueWithoutBorrowerInput | InventoryLoanUpdateWithWhereUniqueWithoutBorrowerInput[]
    updateMany?: InventoryLoanUpdateManyWithWhereWithoutBorrowerInput | InventoryLoanUpdateManyWithWhereWithoutBorrowerInput[]
    deleteMany?: InventoryLoanScalarWhereInput | InventoryLoanScalarWhereInput[]
  }

  export type InventoryLoanUpdateManyWithoutApprovedByNestedInput = {
    create?: XOR<InventoryLoanCreateWithoutApprovedByInput, InventoryLoanUncheckedCreateWithoutApprovedByInput> | InventoryLoanCreateWithoutApprovedByInput[] | InventoryLoanUncheckedCreateWithoutApprovedByInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutApprovedByInput | InventoryLoanCreateOrConnectWithoutApprovedByInput[]
    upsert?: InventoryLoanUpsertWithWhereUniqueWithoutApprovedByInput | InventoryLoanUpsertWithWhereUniqueWithoutApprovedByInput[]
    createMany?: InventoryLoanCreateManyApprovedByInputEnvelope
    set?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    disconnect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    delete?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    update?: InventoryLoanUpdateWithWhereUniqueWithoutApprovedByInput | InventoryLoanUpdateWithWhereUniqueWithoutApprovedByInput[]
    updateMany?: InventoryLoanUpdateManyWithWhereWithoutApprovedByInput | InventoryLoanUpdateManyWithWhereWithoutApprovedByInput[]
    deleteMany?: InventoryLoanScalarWhereInput | InventoryLoanScalarWhereInput[]
  }

  export type InventoryLoanUpdateManyWithoutResponsibleNestedInput = {
    create?: XOR<InventoryLoanCreateWithoutResponsibleInput, InventoryLoanUncheckedCreateWithoutResponsibleInput> | InventoryLoanCreateWithoutResponsibleInput[] | InventoryLoanUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutResponsibleInput | InventoryLoanCreateOrConnectWithoutResponsibleInput[]
    upsert?: InventoryLoanUpsertWithWhereUniqueWithoutResponsibleInput | InventoryLoanUpsertWithWhereUniqueWithoutResponsibleInput[]
    createMany?: InventoryLoanCreateManyResponsibleInputEnvelope
    set?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    disconnect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    delete?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    update?: InventoryLoanUpdateWithWhereUniqueWithoutResponsibleInput | InventoryLoanUpdateWithWhereUniqueWithoutResponsibleInput[]
    updateMany?: InventoryLoanUpdateManyWithWhereWithoutResponsibleInput | InventoryLoanUpdateManyWithWhereWithoutResponsibleInput[]
    deleteMany?: InventoryLoanScalarWhereInput | InventoryLoanScalarWhereInput[]
  }

  export type AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<AssetRequestCreateWithoutRequesterInput, AssetRequestUncheckedCreateWithoutRequesterInput> | AssetRequestCreateWithoutRequesterInput[] | AssetRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutRequesterInput | AssetRequestCreateOrConnectWithoutRequesterInput[]
    upsert?: AssetRequestUpsertWithWhereUniqueWithoutRequesterInput | AssetRequestUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: AssetRequestCreateManyRequesterInputEnvelope
    set?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    disconnect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    delete?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    update?: AssetRequestUpdateWithWhereUniqueWithoutRequesterInput | AssetRequestUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: AssetRequestUpdateManyWithWhereWithoutRequesterInput | AssetRequestUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: AssetRequestScalarWhereInput | AssetRequestScalarWhereInput[]
  }

  export type AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput = {
    create?: XOR<AssetRequestCreateWithoutApprovedByInput, AssetRequestUncheckedCreateWithoutApprovedByInput> | AssetRequestCreateWithoutApprovedByInput[] | AssetRequestUncheckedCreateWithoutApprovedByInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutApprovedByInput | AssetRequestCreateOrConnectWithoutApprovedByInput[]
    upsert?: AssetRequestUpsertWithWhereUniqueWithoutApprovedByInput | AssetRequestUpsertWithWhereUniqueWithoutApprovedByInput[]
    createMany?: AssetRequestCreateManyApprovedByInputEnvelope
    set?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    disconnect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    delete?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    update?: AssetRequestUpdateWithWhereUniqueWithoutApprovedByInput | AssetRequestUpdateWithWhereUniqueWithoutApprovedByInput[]
    updateMany?: AssetRequestUpdateManyWithWhereWithoutApprovedByInput | AssetRequestUpdateManyWithWhereWithoutApprovedByInput[]
    deleteMany?: AssetRequestScalarWhereInput | AssetRequestScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<AssetCreateWithoutAssignedToInput, AssetUncheckedCreateWithoutAssignedToInput> | AssetCreateWithoutAssignedToInput[] | AssetUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutAssignedToInput | AssetCreateOrConnectWithoutAssignedToInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutAssignedToInput | AssetUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: AssetCreateManyAssignedToInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutAssignedToInput | AssetUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutAssignedToInput | AssetUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput = {
    create?: XOR<MaintenanceRecordCreateWithoutTechnicianInput, MaintenanceRecordUncheckedCreateWithoutTechnicianInput> | MaintenanceRecordCreateWithoutTechnicianInput[] | MaintenanceRecordUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutTechnicianInput | MaintenanceRecordCreateOrConnectWithoutTechnicianInput[]
    upsert?: MaintenanceRecordUpsertWithWhereUniqueWithoutTechnicianInput | MaintenanceRecordUpsertWithWhereUniqueWithoutTechnicianInput[]
    createMany?: MaintenanceRecordCreateManyTechnicianInputEnvelope
    set?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    disconnect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    delete?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    connect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    update?: MaintenanceRecordUpdateWithWhereUniqueWithoutTechnicianInput | MaintenanceRecordUpdateWithWhereUniqueWithoutTechnicianInput[]
    updateMany?: MaintenanceRecordUpdateManyWithWhereWithoutTechnicianInput | MaintenanceRecordUpdateManyWithWhereWithoutTechnicianInput[]
    deleteMany?: MaintenanceRecordScalarWhereInput | MaintenanceRecordScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutManagerNestedInput = {
    create?: XOR<DepartmentCreateWithoutManagerInput, DepartmentUncheckedCreateWithoutManagerInput> | DepartmentCreateWithoutManagerInput[] | DepartmentUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutManagerInput | DepartmentCreateOrConnectWithoutManagerInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutManagerInput | DepartmentUpsertWithWhereUniqueWithoutManagerInput[]
    createMany?: DepartmentCreateManyManagerInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutManagerInput | DepartmentUpdateWithWhereUniqueWithoutManagerInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutManagerInput | DepartmentUpdateManyWithWhereWithoutManagerInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput = {
    create?: XOR<AuditRecordCreateWithoutAuditorInput, AuditRecordUncheckedCreateWithoutAuditorInput> | AuditRecordCreateWithoutAuditorInput[] | AuditRecordUncheckedCreateWithoutAuditorInput[]
    connectOrCreate?: AuditRecordCreateOrConnectWithoutAuditorInput | AuditRecordCreateOrConnectWithoutAuditorInput[]
    upsert?: AuditRecordUpsertWithWhereUniqueWithoutAuditorInput | AuditRecordUpsertWithWhereUniqueWithoutAuditorInput[]
    createMany?: AuditRecordCreateManyAuditorInputEnvelope
    set?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    disconnect?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    delete?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    connect?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    update?: AuditRecordUpdateWithWhereUniqueWithoutAuditorInput | AuditRecordUpdateWithWhereUniqueWithoutAuditorInput[]
    updateMany?: AuditRecordUpdateManyWithWhereWithoutAuditorInput | AuditRecordUpdateManyWithWhereWithoutAuditorInput[]
    deleteMany?: AuditRecordScalarWhereInput | AuditRecordScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput = {
    create?: XOR<ProcurementCreateWithoutOrderedByInput, ProcurementUncheckedCreateWithoutOrderedByInput> | ProcurementCreateWithoutOrderedByInput[] | ProcurementUncheckedCreateWithoutOrderedByInput[]
    connectOrCreate?: ProcurementCreateOrConnectWithoutOrderedByInput | ProcurementCreateOrConnectWithoutOrderedByInput[]
    upsert?: ProcurementUpsertWithWhereUniqueWithoutOrderedByInput | ProcurementUpsertWithWhereUniqueWithoutOrderedByInput[]
    createMany?: ProcurementCreateManyOrderedByInputEnvelope
    set?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    disconnect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    delete?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    connect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    update?: ProcurementUpdateWithWhereUniqueWithoutOrderedByInput | ProcurementUpdateWithWhereUniqueWithoutOrderedByInput[]
    updateMany?: ProcurementUpdateManyWithWhereWithoutOrderedByInput | ProcurementUpdateManyWithWhereWithoutOrderedByInput[]
    deleteMany?: ProcurementScalarWhereInput | ProcurementScalarWhereInput[]
  }

  export type PartUsageUncheckedUpdateManyWithoutUsedByNestedInput = {
    create?: XOR<PartUsageCreateWithoutUsedByInput, PartUsageUncheckedCreateWithoutUsedByInput> | PartUsageCreateWithoutUsedByInput[] | PartUsageUncheckedCreateWithoutUsedByInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutUsedByInput | PartUsageCreateOrConnectWithoutUsedByInput[]
    upsert?: PartUsageUpsertWithWhereUniqueWithoutUsedByInput | PartUsageUpsertWithWhereUniqueWithoutUsedByInput[]
    createMany?: PartUsageCreateManyUsedByInputEnvelope
    set?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    disconnect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    delete?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    update?: PartUsageUpdateWithWhereUniqueWithoutUsedByInput | PartUsageUpdateWithWhereUniqueWithoutUsedByInput[]
    updateMany?: PartUsageUpdateManyWithWhereWithoutUsedByInput | PartUsageUpdateManyWithWhereWithoutUsedByInput[]
    deleteMany?: PartUsageScalarWhereInput | PartUsageScalarWhereInput[]
  }

  export type PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput = {
    create?: XOR<PartReplacementCreateWithoutPerformedByInput, PartReplacementUncheckedCreateWithoutPerformedByInput> | PartReplacementCreateWithoutPerformedByInput[] | PartReplacementUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutPerformedByInput | PartReplacementCreateOrConnectWithoutPerformedByInput[]
    upsert?: PartReplacementUpsertWithWhereUniqueWithoutPerformedByInput | PartReplacementUpsertWithWhereUniqueWithoutPerformedByInput[]
    createMany?: PartReplacementCreateManyPerformedByInputEnvelope
    set?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    disconnect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    delete?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    update?: PartReplacementUpdateWithWhereUniqueWithoutPerformedByInput | PartReplacementUpdateWithWhereUniqueWithoutPerformedByInput[]
    updateMany?: PartReplacementUpdateManyWithWhereWithoutPerformedByInput | PartReplacementUpdateManyWithWhereWithoutPerformedByInput[]
    deleteMany?: PartReplacementScalarWhereInput | PartReplacementScalarWhereInput[]
  }

  export type NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput = {
    create?: XOR<NewPartRegistrationCreateWithoutRegisteredByInput, NewPartRegistrationUncheckedCreateWithoutRegisteredByInput> | NewPartRegistrationCreateWithoutRegisteredByInput[] | NewPartRegistrationUncheckedCreateWithoutRegisteredByInput[]
    connectOrCreate?: NewPartRegistrationCreateOrConnectWithoutRegisteredByInput | NewPartRegistrationCreateOrConnectWithoutRegisteredByInput[]
    upsert?: NewPartRegistrationUpsertWithWhereUniqueWithoutRegisteredByInput | NewPartRegistrationUpsertWithWhereUniqueWithoutRegisteredByInput[]
    createMany?: NewPartRegistrationCreateManyRegisteredByInputEnvelope
    set?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    disconnect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    delete?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    connect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    update?: NewPartRegistrationUpdateWithWhereUniqueWithoutRegisteredByInput | NewPartRegistrationUpdateWithWhereUniqueWithoutRegisteredByInput[]
    updateMany?: NewPartRegistrationUpdateManyWithWhereWithoutRegisteredByInput | NewPartRegistrationUpdateManyWithWhereWithoutRegisteredByInput[]
    deleteMany?: NewPartRegistrationScalarWhereInput | NewPartRegistrationScalarWhereInput[]
  }

  export type ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput = {
    create?: XOR<ComponentTransferCreateWithoutTransferredByInput, ComponentTransferUncheckedCreateWithoutTransferredByInput> | ComponentTransferCreateWithoutTransferredByInput[] | ComponentTransferUncheckedCreateWithoutTransferredByInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutTransferredByInput | ComponentTransferCreateOrConnectWithoutTransferredByInput[]
    upsert?: ComponentTransferUpsertWithWhereUniqueWithoutTransferredByInput | ComponentTransferUpsertWithWhereUniqueWithoutTransferredByInput[]
    createMany?: ComponentTransferCreateManyTransferredByInputEnvelope
    set?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    disconnect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    delete?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    update?: ComponentTransferUpdateWithWhereUniqueWithoutTransferredByInput | ComponentTransferUpdateWithWhereUniqueWithoutTransferredByInput[]
    updateMany?: ComponentTransferUpdateManyWithWhereWithoutTransferredByInput | ComponentTransferUpdateManyWithWhereWithoutTransferredByInput[]
    deleteMany?: ComponentTransferScalarWhereInput | ComponentTransferScalarWhereInput[]
  }

  export type ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput = {
    create?: XOR<ComponentMaintenanceCreateWithoutPerformedByInput, ComponentMaintenanceUncheckedCreateWithoutPerformedByInput> | ComponentMaintenanceCreateWithoutPerformedByInput[] | ComponentMaintenanceUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: ComponentMaintenanceCreateOrConnectWithoutPerformedByInput | ComponentMaintenanceCreateOrConnectWithoutPerformedByInput[]
    upsert?: ComponentMaintenanceUpsertWithWhereUniqueWithoutPerformedByInput | ComponentMaintenanceUpsertWithWhereUniqueWithoutPerformedByInput[]
    createMany?: ComponentMaintenanceCreateManyPerformedByInputEnvelope
    set?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    disconnect?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    delete?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    connect?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    update?: ComponentMaintenanceUpdateWithWhereUniqueWithoutPerformedByInput | ComponentMaintenanceUpdateWithWhereUniqueWithoutPerformedByInput[]
    updateMany?: ComponentMaintenanceUpdateManyWithWhereWithoutPerformedByInput | ComponentMaintenanceUpdateManyWithWhereWithoutPerformedByInput[]
    deleteMany?: ComponentMaintenanceScalarWhereInput | ComponentMaintenanceScalarWhereInput[]
  }

  export type InventoryUncheckedUpdateManyWithoutCustodianNestedInput = {
    create?: XOR<InventoryCreateWithoutCustodianInput, InventoryUncheckedCreateWithoutCustodianInput> | InventoryCreateWithoutCustodianInput[] | InventoryUncheckedCreateWithoutCustodianInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutCustodianInput | InventoryCreateOrConnectWithoutCustodianInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutCustodianInput | InventoryUpsertWithWhereUniqueWithoutCustodianInput[]
    createMany?: InventoryCreateManyCustodianInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutCustodianInput | InventoryUpdateWithWhereUniqueWithoutCustodianInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutCustodianInput | InventoryUpdateManyWithWhereWithoutCustodianInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput = {
    create?: XOR<InventoryLoanCreateWithoutBorrowerInput, InventoryLoanUncheckedCreateWithoutBorrowerInput> | InventoryLoanCreateWithoutBorrowerInput[] | InventoryLoanUncheckedCreateWithoutBorrowerInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutBorrowerInput | InventoryLoanCreateOrConnectWithoutBorrowerInput[]
    upsert?: InventoryLoanUpsertWithWhereUniqueWithoutBorrowerInput | InventoryLoanUpsertWithWhereUniqueWithoutBorrowerInput[]
    createMany?: InventoryLoanCreateManyBorrowerInputEnvelope
    set?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    disconnect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    delete?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    update?: InventoryLoanUpdateWithWhereUniqueWithoutBorrowerInput | InventoryLoanUpdateWithWhereUniqueWithoutBorrowerInput[]
    updateMany?: InventoryLoanUpdateManyWithWhereWithoutBorrowerInput | InventoryLoanUpdateManyWithWhereWithoutBorrowerInput[]
    deleteMany?: InventoryLoanScalarWhereInput | InventoryLoanScalarWhereInput[]
  }

  export type InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput = {
    create?: XOR<InventoryLoanCreateWithoutApprovedByInput, InventoryLoanUncheckedCreateWithoutApprovedByInput> | InventoryLoanCreateWithoutApprovedByInput[] | InventoryLoanUncheckedCreateWithoutApprovedByInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutApprovedByInput | InventoryLoanCreateOrConnectWithoutApprovedByInput[]
    upsert?: InventoryLoanUpsertWithWhereUniqueWithoutApprovedByInput | InventoryLoanUpsertWithWhereUniqueWithoutApprovedByInput[]
    createMany?: InventoryLoanCreateManyApprovedByInputEnvelope
    set?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    disconnect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    delete?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    update?: InventoryLoanUpdateWithWhereUniqueWithoutApprovedByInput | InventoryLoanUpdateWithWhereUniqueWithoutApprovedByInput[]
    updateMany?: InventoryLoanUpdateManyWithWhereWithoutApprovedByInput | InventoryLoanUpdateManyWithWhereWithoutApprovedByInput[]
    deleteMany?: InventoryLoanScalarWhereInput | InventoryLoanScalarWhereInput[]
  }

  export type InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput = {
    create?: XOR<InventoryLoanCreateWithoutResponsibleInput, InventoryLoanUncheckedCreateWithoutResponsibleInput> | InventoryLoanCreateWithoutResponsibleInput[] | InventoryLoanUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutResponsibleInput | InventoryLoanCreateOrConnectWithoutResponsibleInput[]
    upsert?: InventoryLoanUpsertWithWhereUniqueWithoutResponsibleInput | InventoryLoanUpsertWithWhereUniqueWithoutResponsibleInput[]
    createMany?: InventoryLoanCreateManyResponsibleInputEnvelope
    set?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    disconnect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    delete?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    update?: InventoryLoanUpdateWithWhereUniqueWithoutResponsibleInput | InventoryLoanUpdateWithWhereUniqueWithoutResponsibleInput[]
    updateMany?: InventoryLoanUpdateManyWithWhereWithoutResponsibleInput | InventoryLoanUpdateManyWithWhereWithoutResponsibleInput[]
    deleteMany?: InventoryLoanScalarWhereInput | InventoryLoanScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutManagedDepartmentsInput = {
    create?: XOR<UserCreateWithoutManagedDepartmentsInput, UserUncheckedCreateWithoutManagedDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagedDepartmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AssetCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<AssetCreateWithoutDepartmentInput, AssetUncheckedCreateWithoutDepartmentInput> | AssetCreateWithoutDepartmentInput[] | AssetUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutDepartmentInput | AssetCreateOrConnectWithoutDepartmentInput[]
    createMany?: AssetCreateManyDepartmentInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type AssetRequestCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<AssetRequestCreateWithoutDepartmentInput, AssetRequestUncheckedCreateWithoutDepartmentInput> | AssetRequestCreateWithoutDepartmentInput[] | AssetRequestUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutDepartmentInput | AssetRequestCreateOrConnectWithoutDepartmentInput[]
    createMany?: AssetRequestCreateManyDepartmentInputEnvelope
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
  }

  export type InventoryCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<InventoryCreateWithoutDepartmentInput, InventoryUncheckedCreateWithoutDepartmentInput> | InventoryCreateWithoutDepartmentInput[] | InventoryUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutDepartmentInput | InventoryCreateOrConnectWithoutDepartmentInput[]
    createMany?: InventoryCreateManyDepartmentInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<AssetCreateWithoutDepartmentInput, AssetUncheckedCreateWithoutDepartmentInput> | AssetCreateWithoutDepartmentInput[] | AssetUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutDepartmentInput | AssetCreateOrConnectWithoutDepartmentInput[]
    createMany?: AssetCreateManyDepartmentInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type AssetRequestUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<AssetRequestCreateWithoutDepartmentInput, AssetRequestUncheckedCreateWithoutDepartmentInput> | AssetRequestCreateWithoutDepartmentInput[] | AssetRequestUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutDepartmentInput | AssetRequestCreateOrConnectWithoutDepartmentInput[]
    createMany?: AssetRequestCreateManyDepartmentInputEnvelope
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
  }

  export type InventoryUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<InventoryCreateWithoutDepartmentInput, InventoryUncheckedCreateWithoutDepartmentInput> | InventoryCreateWithoutDepartmentInput[] | InventoryUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutDepartmentInput | InventoryCreateOrConnectWithoutDepartmentInput[]
    createMany?: InventoryCreateManyDepartmentInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneWithoutManagedDepartmentsNestedInput = {
    create?: XOR<UserCreateWithoutManagedDepartmentsInput, UserUncheckedCreateWithoutManagedDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagedDepartmentsInput
    upsert?: UserUpsertWithoutManagedDepartmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutManagedDepartmentsInput, UserUpdateWithoutManagedDepartmentsInput>, UserUncheckedUpdateWithoutManagedDepartmentsInput>
  }

  export type UserUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AssetUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<AssetCreateWithoutDepartmentInput, AssetUncheckedCreateWithoutDepartmentInput> | AssetCreateWithoutDepartmentInput[] | AssetUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutDepartmentInput | AssetCreateOrConnectWithoutDepartmentInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutDepartmentInput | AssetUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: AssetCreateManyDepartmentInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutDepartmentInput | AssetUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutDepartmentInput | AssetUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type AssetRequestUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<AssetRequestCreateWithoutDepartmentInput, AssetRequestUncheckedCreateWithoutDepartmentInput> | AssetRequestCreateWithoutDepartmentInput[] | AssetRequestUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutDepartmentInput | AssetRequestCreateOrConnectWithoutDepartmentInput[]
    upsert?: AssetRequestUpsertWithWhereUniqueWithoutDepartmentInput | AssetRequestUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: AssetRequestCreateManyDepartmentInputEnvelope
    set?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    disconnect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    delete?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    update?: AssetRequestUpdateWithWhereUniqueWithoutDepartmentInput | AssetRequestUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: AssetRequestUpdateManyWithWhereWithoutDepartmentInput | AssetRequestUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: AssetRequestScalarWhereInput | AssetRequestScalarWhereInput[]
  }

  export type InventoryUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<InventoryCreateWithoutDepartmentInput, InventoryUncheckedCreateWithoutDepartmentInput> | InventoryCreateWithoutDepartmentInput[] | InventoryUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutDepartmentInput | InventoryCreateOrConnectWithoutDepartmentInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutDepartmentInput | InventoryUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: InventoryCreateManyDepartmentInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutDepartmentInput | InventoryUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutDepartmentInput | InventoryUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<AssetCreateWithoutDepartmentInput, AssetUncheckedCreateWithoutDepartmentInput> | AssetCreateWithoutDepartmentInput[] | AssetUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutDepartmentInput | AssetCreateOrConnectWithoutDepartmentInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutDepartmentInput | AssetUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: AssetCreateManyDepartmentInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutDepartmentInput | AssetUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutDepartmentInput | AssetUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type AssetRequestUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<AssetRequestCreateWithoutDepartmentInput, AssetRequestUncheckedCreateWithoutDepartmentInput> | AssetRequestCreateWithoutDepartmentInput[] | AssetRequestUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutDepartmentInput | AssetRequestCreateOrConnectWithoutDepartmentInput[]
    upsert?: AssetRequestUpsertWithWhereUniqueWithoutDepartmentInput | AssetRequestUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: AssetRequestCreateManyDepartmentInputEnvelope
    set?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    disconnect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    delete?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    update?: AssetRequestUpdateWithWhereUniqueWithoutDepartmentInput | AssetRequestUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: AssetRequestUpdateManyWithWhereWithoutDepartmentInput | AssetRequestUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: AssetRequestScalarWhereInput | AssetRequestScalarWhereInput[]
  }

  export type InventoryUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<InventoryCreateWithoutDepartmentInput, InventoryUncheckedCreateWithoutDepartmentInput> | InventoryCreateWithoutDepartmentInput[] | InventoryUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutDepartmentInput | InventoryCreateOrConnectWithoutDepartmentInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutDepartmentInput | InventoryUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: InventoryCreateManyDepartmentInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutDepartmentInput | InventoryUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutDepartmentInput | InventoryUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type AssetCreateNestedManyWithoutLocationInput = {
    create?: XOR<AssetCreateWithoutLocationInput, AssetUncheckedCreateWithoutLocationInput> | AssetCreateWithoutLocationInput[] | AssetUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutLocationInput | AssetCreateOrConnectWithoutLocationInput[]
    createMany?: AssetCreateManyLocationInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<AssetCreateWithoutLocationInput, AssetUncheckedCreateWithoutLocationInput> | AssetCreateWithoutLocationInput[] | AssetUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutLocationInput | AssetCreateOrConnectWithoutLocationInput[]
    createMany?: AssetCreateManyLocationInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type AssetUpdateManyWithoutLocationNestedInput = {
    create?: XOR<AssetCreateWithoutLocationInput, AssetUncheckedCreateWithoutLocationInput> | AssetCreateWithoutLocationInput[] | AssetUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutLocationInput | AssetCreateOrConnectWithoutLocationInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutLocationInput | AssetUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: AssetCreateManyLocationInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutLocationInput | AssetUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutLocationInput | AssetUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<AssetCreateWithoutLocationInput, AssetUncheckedCreateWithoutLocationInput> | AssetCreateWithoutLocationInput[] | AssetUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutLocationInput | AssetCreateOrConnectWithoutLocationInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutLocationInput | AssetUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: AssetCreateManyLocationInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutLocationInput | AssetUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutLocationInput | AssetUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type AssetCreateNestedManyWithoutCategoryInput = {
    create?: XOR<AssetCreateWithoutCategoryInput, AssetUncheckedCreateWithoutCategoryInput> | AssetCreateWithoutCategoryInput[] | AssetUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutCategoryInput | AssetCreateOrConnectWithoutCategoryInput[]
    createMany?: AssetCreateManyCategoryInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<AssetCreateWithoutCategoryInput, AssetUncheckedCreateWithoutCategoryInput> | AssetCreateWithoutCategoryInput[] | AssetUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutCategoryInput | AssetCreateOrConnectWithoutCategoryInput[]
    createMany?: AssetCreateManyCategoryInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type CategoryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    upsert?: CategoryUpsertWithoutChildrenInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutChildrenInput, CategoryUpdateWithoutChildrenInput>, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type AssetUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<AssetCreateWithoutCategoryInput, AssetUncheckedCreateWithoutCategoryInput> | AssetCreateWithoutCategoryInput[] | AssetUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutCategoryInput | AssetCreateOrConnectWithoutCategoryInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutCategoryInput | AssetUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: AssetCreateManyCategoryInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutCategoryInput | AssetUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutCategoryInput | AssetUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<AssetCreateWithoutCategoryInput, AssetUncheckedCreateWithoutCategoryInput> | AssetCreateWithoutCategoryInput[] | AssetUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutCategoryInput | AssetCreateOrConnectWithoutCategoryInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutCategoryInput | AssetUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: AssetCreateManyCategoryInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutCategoryInput | AssetUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutCategoryInput | AssetUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type AssetCreateNestedManyWithoutVendorInput = {
    create?: XOR<AssetCreateWithoutVendorInput, AssetUncheckedCreateWithoutVendorInput> | AssetCreateWithoutVendorInput[] | AssetUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutVendorInput | AssetCreateOrConnectWithoutVendorInput[]
    createMany?: AssetCreateManyVendorInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type MaintenanceContractCreateNestedManyWithoutVendorInput = {
    create?: XOR<MaintenanceContractCreateWithoutVendorInput, MaintenanceContractUncheckedCreateWithoutVendorInput> | MaintenanceContractCreateWithoutVendorInput[] | MaintenanceContractUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MaintenanceContractCreateOrConnectWithoutVendorInput | MaintenanceContractCreateOrConnectWithoutVendorInput[]
    createMany?: MaintenanceContractCreateManyVendorInputEnvelope
    connect?: MaintenanceContractWhereUniqueInput | MaintenanceContractWhereUniqueInput[]
  }

  export type MaintenanceRecordCreateNestedManyWithoutVendorInput = {
    create?: XOR<MaintenanceRecordCreateWithoutVendorInput, MaintenanceRecordUncheckedCreateWithoutVendorInput> | MaintenanceRecordCreateWithoutVendorInput[] | MaintenanceRecordUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutVendorInput | MaintenanceRecordCreateOrConnectWithoutVendorInput[]
    createMany?: MaintenanceRecordCreateManyVendorInputEnvelope
    connect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
  }

  export type SparePartCreateNestedManyWithoutVendorInput = {
    create?: XOR<SparePartCreateWithoutVendorInput, SparePartUncheckedCreateWithoutVendorInput> | SparePartCreateWithoutVendorInput[] | SparePartUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SparePartCreateOrConnectWithoutVendorInput | SparePartCreateOrConnectWithoutVendorInput[]
    createMany?: SparePartCreateManyVendorInputEnvelope
    connect?: SparePartWhereUniqueInput | SparePartWhereUniqueInput[]
  }

  export type ProcurementCreateNestedManyWithoutVendorInput = {
    create?: XOR<ProcurementCreateWithoutVendorInput, ProcurementUncheckedCreateWithoutVendorInput> | ProcurementCreateWithoutVendorInput[] | ProcurementUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: ProcurementCreateOrConnectWithoutVendorInput | ProcurementCreateOrConnectWithoutVendorInput[]
    createMany?: ProcurementCreateManyVendorInputEnvelope
    connect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<AssetCreateWithoutVendorInput, AssetUncheckedCreateWithoutVendorInput> | AssetCreateWithoutVendorInput[] | AssetUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutVendorInput | AssetCreateOrConnectWithoutVendorInput[]
    createMany?: AssetCreateManyVendorInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type MaintenanceContractUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<MaintenanceContractCreateWithoutVendorInput, MaintenanceContractUncheckedCreateWithoutVendorInput> | MaintenanceContractCreateWithoutVendorInput[] | MaintenanceContractUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MaintenanceContractCreateOrConnectWithoutVendorInput | MaintenanceContractCreateOrConnectWithoutVendorInput[]
    createMany?: MaintenanceContractCreateManyVendorInputEnvelope
    connect?: MaintenanceContractWhereUniqueInput | MaintenanceContractWhereUniqueInput[]
  }

  export type MaintenanceRecordUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<MaintenanceRecordCreateWithoutVendorInput, MaintenanceRecordUncheckedCreateWithoutVendorInput> | MaintenanceRecordCreateWithoutVendorInput[] | MaintenanceRecordUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutVendorInput | MaintenanceRecordCreateOrConnectWithoutVendorInput[]
    createMany?: MaintenanceRecordCreateManyVendorInputEnvelope
    connect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
  }

  export type SparePartUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<SparePartCreateWithoutVendorInput, SparePartUncheckedCreateWithoutVendorInput> | SparePartCreateWithoutVendorInput[] | SparePartUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SparePartCreateOrConnectWithoutVendorInput | SparePartCreateOrConnectWithoutVendorInput[]
    createMany?: SparePartCreateManyVendorInputEnvelope
    connect?: SparePartWhereUniqueInput | SparePartWhereUniqueInput[]
  }

  export type ProcurementUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<ProcurementCreateWithoutVendorInput, ProcurementUncheckedCreateWithoutVendorInput> | ProcurementCreateWithoutVendorInput[] | ProcurementUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: ProcurementCreateOrConnectWithoutVendorInput | ProcurementCreateOrConnectWithoutVendorInput[]
    createMany?: ProcurementCreateManyVendorInputEnvelope
    connect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
  }

  export type AssetUpdateManyWithoutVendorNestedInput = {
    create?: XOR<AssetCreateWithoutVendorInput, AssetUncheckedCreateWithoutVendorInput> | AssetCreateWithoutVendorInput[] | AssetUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutVendorInput | AssetCreateOrConnectWithoutVendorInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutVendorInput | AssetUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: AssetCreateManyVendorInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutVendorInput | AssetUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutVendorInput | AssetUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type MaintenanceContractUpdateManyWithoutVendorNestedInput = {
    create?: XOR<MaintenanceContractCreateWithoutVendorInput, MaintenanceContractUncheckedCreateWithoutVendorInput> | MaintenanceContractCreateWithoutVendorInput[] | MaintenanceContractUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MaintenanceContractCreateOrConnectWithoutVendorInput | MaintenanceContractCreateOrConnectWithoutVendorInput[]
    upsert?: MaintenanceContractUpsertWithWhereUniqueWithoutVendorInput | MaintenanceContractUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: MaintenanceContractCreateManyVendorInputEnvelope
    set?: MaintenanceContractWhereUniqueInput | MaintenanceContractWhereUniqueInput[]
    disconnect?: MaintenanceContractWhereUniqueInput | MaintenanceContractWhereUniqueInput[]
    delete?: MaintenanceContractWhereUniqueInput | MaintenanceContractWhereUniqueInput[]
    connect?: MaintenanceContractWhereUniqueInput | MaintenanceContractWhereUniqueInput[]
    update?: MaintenanceContractUpdateWithWhereUniqueWithoutVendorInput | MaintenanceContractUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: MaintenanceContractUpdateManyWithWhereWithoutVendorInput | MaintenanceContractUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: MaintenanceContractScalarWhereInput | MaintenanceContractScalarWhereInput[]
  }

  export type MaintenanceRecordUpdateManyWithoutVendorNestedInput = {
    create?: XOR<MaintenanceRecordCreateWithoutVendorInput, MaintenanceRecordUncheckedCreateWithoutVendorInput> | MaintenanceRecordCreateWithoutVendorInput[] | MaintenanceRecordUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutVendorInput | MaintenanceRecordCreateOrConnectWithoutVendorInput[]
    upsert?: MaintenanceRecordUpsertWithWhereUniqueWithoutVendorInput | MaintenanceRecordUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: MaintenanceRecordCreateManyVendorInputEnvelope
    set?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    disconnect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    delete?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    connect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    update?: MaintenanceRecordUpdateWithWhereUniqueWithoutVendorInput | MaintenanceRecordUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: MaintenanceRecordUpdateManyWithWhereWithoutVendorInput | MaintenanceRecordUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: MaintenanceRecordScalarWhereInput | MaintenanceRecordScalarWhereInput[]
  }

  export type SparePartUpdateManyWithoutVendorNestedInput = {
    create?: XOR<SparePartCreateWithoutVendorInput, SparePartUncheckedCreateWithoutVendorInput> | SparePartCreateWithoutVendorInput[] | SparePartUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SparePartCreateOrConnectWithoutVendorInput | SparePartCreateOrConnectWithoutVendorInput[]
    upsert?: SparePartUpsertWithWhereUniqueWithoutVendorInput | SparePartUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: SparePartCreateManyVendorInputEnvelope
    set?: SparePartWhereUniqueInput | SparePartWhereUniqueInput[]
    disconnect?: SparePartWhereUniqueInput | SparePartWhereUniqueInput[]
    delete?: SparePartWhereUniqueInput | SparePartWhereUniqueInput[]
    connect?: SparePartWhereUniqueInput | SparePartWhereUniqueInput[]
    update?: SparePartUpdateWithWhereUniqueWithoutVendorInput | SparePartUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: SparePartUpdateManyWithWhereWithoutVendorInput | SparePartUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: SparePartScalarWhereInput | SparePartScalarWhereInput[]
  }

  export type ProcurementUpdateManyWithoutVendorNestedInput = {
    create?: XOR<ProcurementCreateWithoutVendorInput, ProcurementUncheckedCreateWithoutVendorInput> | ProcurementCreateWithoutVendorInput[] | ProcurementUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: ProcurementCreateOrConnectWithoutVendorInput | ProcurementCreateOrConnectWithoutVendorInput[]
    upsert?: ProcurementUpsertWithWhereUniqueWithoutVendorInput | ProcurementUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: ProcurementCreateManyVendorInputEnvelope
    set?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    disconnect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    delete?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    connect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    update?: ProcurementUpdateWithWhereUniqueWithoutVendorInput | ProcurementUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: ProcurementUpdateManyWithWhereWithoutVendorInput | ProcurementUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: ProcurementScalarWhereInput | ProcurementScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<AssetCreateWithoutVendorInput, AssetUncheckedCreateWithoutVendorInput> | AssetCreateWithoutVendorInput[] | AssetUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutVendorInput | AssetCreateOrConnectWithoutVendorInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutVendorInput | AssetUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: AssetCreateManyVendorInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutVendorInput | AssetUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutVendorInput | AssetUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type MaintenanceContractUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<MaintenanceContractCreateWithoutVendorInput, MaintenanceContractUncheckedCreateWithoutVendorInput> | MaintenanceContractCreateWithoutVendorInput[] | MaintenanceContractUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MaintenanceContractCreateOrConnectWithoutVendorInput | MaintenanceContractCreateOrConnectWithoutVendorInput[]
    upsert?: MaintenanceContractUpsertWithWhereUniqueWithoutVendorInput | MaintenanceContractUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: MaintenanceContractCreateManyVendorInputEnvelope
    set?: MaintenanceContractWhereUniqueInput | MaintenanceContractWhereUniqueInput[]
    disconnect?: MaintenanceContractWhereUniqueInput | MaintenanceContractWhereUniqueInput[]
    delete?: MaintenanceContractWhereUniqueInput | MaintenanceContractWhereUniqueInput[]
    connect?: MaintenanceContractWhereUniqueInput | MaintenanceContractWhereUniqueInput[]
    update?: MaintenanceContractUpdateWithWhereUniqueWithoutVendorInput | MaintenanceContractUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: MaintenanceContractUpdateManyWithWhereWithoutVendorInput | MaintenanceContractUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: MaintenanceContractScalarWhereInput | MaintenanceContractScalarWhereInput[]
  }

  export type MaintenanceRecordUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<MaintenanceRecordCreateWithoutVendorInput, MaintenanceRecordUncheckedCreateWithoutVendorInput> | MaintenanceRecordCreateWithoutVendorInput[] | MaintenanceRecordUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutVendorInput | MaintenanceRecordCreateOrConnectWithoutVendorInput[]
    upsert?: MaintenanceRecordUpsertWithWhereUniqueWithoutVendorInput | MaintenanceRecordUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: MaintenanceRecordCreateManyVendorInputEnvelope
    set?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    disconnect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    delete?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    connect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    update?: MaintenanceRecordUpdateWithWhereUniqueWithoutVendorInput | MaintenanceRecordUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: MaintenanceRecordUpdateManyWithWhereWithoutVendorInput | MaintenanceRecordUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: MaintenanceRecordScalarWhereInput | MaintenanceRecordScalarWhereInput[]
  }

  export type SparePartUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<SparePartCreateWithoutVendorInput, SparePartUncheckedCreateWithoutVendorInput> | SparePartCreateWithoutVendorInput[] | SparePartUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SparePartCreateOrConnectWithoutVendorInput | SparePartCreateOrConnectWithoutVendorInput[]
    upsert?: SparePartUpsertWithWhereUniqueWithoutVendorInput | SparePartUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: SparePartCreateManyVendorInputEnvelope
    set?: SparePartWhereUniqueInput | SparePartWhereUniqueInput[]
    disconnect?: SparePartWhereUniqueInput | SparePartWhereUniqueInput[]
    delete?: SparePartWhereUniqueInput | SparePartWhereUniqueInput[]
    connect?: SparePartWhereUniqueInput | SparePartWhereUniqueInput[]
    update?: SparePartUpdateWithWhereUniqueWithoutVendorInput | SparePartUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: SparePartUpdateManyWithWhereWithoutVendorInput | SparePartUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: SparePartScalarWhereInput | SparePartScalarWhereInput[]
  }

  export type ProcurementUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<ProcurementCreateWithoutVendorInput, ProcurementUncheckedCreateWithoutVendorInput> | ProcurementCreateWithoutVendorInput[] | ProcurementUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: ProcurementCreateOrConnectWithoutVendorInput | ProcurementCreateOrConnectWithoutVendorInput[]
    upsert?: ProcurementUpsertWithWhereUniqueWithoutVendorInput | ProcurementUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: ProcurementCreateManyVendorInputEnvelope
    set?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    disconnect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    delete?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    connect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    update?: ProcurementUpdateWithWhereUniqueWithoutVendorInput | ProcurementUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: ProcurementUpdateManyWithWhereWithoutVendorInput | ProcurementUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: ProcurementScalarWhereInput | ProcurementScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutAssetsInput = {
    create?: XOR<CategoryCreateWithoutAssetsInput, CategoryUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutAssetsInput
    connect?: CategoryWhereUniqueInput
  }

  export type VendorCreateNestedOneWithoutAssetsInput = {
    create?: XOR<VendorCreateWithoutAssetsInput, VendorUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutAssetsInput
    connect?: VendorWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutAssetsInput = {
    create?: XOR<LocationCreateWithoutAssetsInput, LocationUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutAssetsInput
    connect?: LocationWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutAssetsInput = {
    create?: XOR<DepartmentCreateWithoutAssetsInput, DepartmentUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutAssetsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedAssetsInput = {
    create?: XOR<UserCreateWithoutAssignedAssetsInput, UserUncheckedCreateWithoutAssignedAssetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedAssetsInput
    connect?: UserWhereUniqueInput
  }

  export type AssetRequestCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetRequestCreateWithoutAssetInput, AssetRequestUncheckedCreateWithoutAssetInput> | AssetRequestCreateWithoutAssetInput[] | AssetRequestUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutAssetInput | AssetRequestCreateOrConnectWithoutAssetInput[]
    createMany?: AssetRequestCreateManyAssetInputEnvelope
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
  }

  export type MaintenanceRecordCreateNestedManyWithoutAssetInput = {
    create?: XOR<MaintenanceRecordCreateWithoutAssetInput, MaintenanceRecordUncheckedCreateWithoutAssetInput> | MaintenanceRecordCreateWithoutAssetInput[] | MaintenanceRecordUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutAssetInput | MaintenanceRecordCreateOrConnectWithoutAssetInput[]
    createMany?: MaintenanceRecordCreateManyAssetInputEnvelope
    connect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
  }

  export type AuditRecordCreateNestedManyWithoutAssetInput = {
    create?: XOR<AuditRecordCreateWithoutAssetInput, AuditRecordUncheckedCreateWithoutAssetInput> | AuditRecordCreateWithoutAssetInput[] | AuditRecordUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AuditRecordCreateOrConnectWithoutAssetInput | AuditRecordCreateOrConnectWithoutAssetInput[]
    createMany?: AuditRecordCreateManyAssetInputEnvelope
    connect?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
  }

  export type DisposalRecordCreateNestedOneWithoutAssetInput = {
    create?: XOR<DisposalRecordCreateWithoutAssetInput, DisposalRecordUncheckedCreateWithoutAssetInput>
    connectOrCreate?: DisposalRecordCreateOrConnectWithoutAssetInput
    connect?: DisposalRecordWhereUniqueInput
  }

  export type PartUsageCreateNestedManyWithoutAssetInput = {
    create?: XOR<PartUsageCreateWithoutAssetInput, PartUsageUncheckedCreateWithoutAssetInput> | PartUsageCreateWithoutAssetInput[] | PartUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutAssetInput | PartUsageCreateOrConnectWithoutAssetInput[]
    createMany?: PartUsageCreateManyAssetInputEnvelope
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
  }

  export type PartReplacementCreateNestedManyWithoutAssetInput = {
    create?: XOR<PartReplacementCreateWithoutAssetInput, PartReplacementUncheckedCreateWithoutAssetInput> | PartReplacementCreateWithoutAssetInput[] | PartReplacementUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutAssetInput | PartReplacementCreateOrConnectWithoutAssetInput[]
    createMany?: PartReplacementCreateManyAssetInputEnvelope
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
  }

  export type NewPartRegistrationCreateNestedManyWithoutAssetInput = {
    create?: XOR<NewPartRegistrationCreateWithoutAssetInput, NewPartRegistrationUncheckedCreateWithoutAssetInput> | NewPartRegistrationCreateWithoutAssetInput[] | NewPartRegistrationUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: NewPartRegistrationCreateOrConnectWithoutAssetInput | NewPartRegistrationCreateOrConnectWithoutAssetInput[]
    createMany?: NewPartRegistrationCreateManyAssetInputEnvelope
    connect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
  }

  export type AssetComponentCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetComponentCreateWithoutAssetInput, AssetComponentUncheckedCreateWithoutAssetInput> | AssetComponentCreateWithoutAssetInput[] | AssetComponentUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetComponentCreateOrConnectWithoutAssetInput | AssetComponentCreateOrConnectWithoutAssetInput[]
    createMany?: AssetComponentCreateManyAssetInputEnvelope
    connect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
  }

  export type AssetComponentCreateNestedManyWithoutParentAssetInput = {
    create?: XOR<AssetComponentCreateWithoutParentAssetInput, AssetComponentUncheckedCreateWithoutParentAssetInput> | AssetComponentCreateWithoutParentAssetInput[] | AssetComponentUncheckedCreateWithoutParentAssetInput[]
    connectOrCreate?: AssetComponentCreateOrConnectWithoutParentAssetInput | AssetComponentCreateOrConnectWithoutParentAssetInput[]
    createMany?: AssetComponentCreateManyParentAssetInputEnvelope
    connect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
  }

  export type ComponentTransferCreateNestedManyWithoutFromAssetInput = {
    create?: XOR<ComponentTransferCreateWithoutFromAssetInput, ComponentTransferUncheckedCreateWithoutFromAssetInput> | ComponentTransferCreateWithoutFromAssetInput[] | ComponentTransferUncheckedCreateWithoutFromAssetInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutFromAssetInput | ComponentTransferCreateOrConnectWithoutFromAssetInput[]
    createMany?: ComponentTransferCreateManyFromAssetInputEnvelope
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
  }

  export type ComponentTransferCreateNestedManyWithoutToAssetInput = {
    create?: XOR<ComponentTransferCreateWithoutToAssetInput, ComponentTransferUncheckedCreateWithoutToAssetInput> | ComponentTransferCreateWithoutToAssetInput[] | ComponentTransferUncheckedCreateWithoutToAssetInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutToAssetInput | ComponentTransferCreateOrConnectWithoutToAssetInput[]
    createMany?: ComponentTransferCreateManyToAssetInputEnvelope
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
  }

  export type InventoryCreateNestedManyWithoutAssetInput = {
    create?: XOR<InventoryCreateWithoutAssetInput, InventoryUncheckedCreateWithoutAssetInput> | InventoryCreateWithoutAssetInput[] | InventoryUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutAssetInput | InventoryCreateOrConnectWithoutAssetInput[]
    createMany?: InventoryCreateManyAssetInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type AssetRequestUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetRequestCreateWithoutAssetInput, AssetRequestUncheckedCreateWithoutAssetInput> | AssetRequestCreateWithoutAssetInput[] | AssetRequestUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutAssetInput | AssetRequestCreateOrConnectWithoutAssetInput[]
    createMany?: AssetRequestCreateManyAssetInputEnvelope
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
  }

  export type MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<MaintenanceRecordCreateWithoutAssetInput, MaintenanceRecordUncheckedCreateWithoutAssetInput> | MaintenanceRecordCreateWithoutAssetInput[] | MaintenanceRecordUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutAssetInput | MaintenanceRecordCreateOrConnectWithoutAssetInput[]
    createMany?: MaintenanceRecordCreateManyAssetInputEnvelope
    connect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
  }

  export type AuditRecordUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<AuditRecordCreateWithoutAssetInput, AuditRecordUncheckedCreateWithoutAssetInput> | AuditRecordCreateWithoutAssetInput[] | AuditRecordUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AuditRecordCreateOrConnectWithoutAssetInput | AuditRecordCreateOrConnectWithoutAssetInput[]
    createMany?: AuditRecordCreateManyAssetInputEnvelope
    connect?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
  }

  export type DisposalRecordUncheckedCreateNestedOneWithoutAssetInput = {
    create?: XOR<DisposalRecordCreateWithoutAssetInput, DisposalRecordUncheckedCreateWithoutAssetInput>
    connectOrCreate?: DisposalRecordCreateOrConnectWithoutAssetInput
    connect?: DisposalRecordWhereUniqueInput
  }

  export type PartUsageUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<PartUsageCreateWithoutAssetInput, PartUsageUncheckedCreateWithoutAssetInput> | PartUsageCreateWithoutAssetInput[] | PartUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutAssetInput | PartUsageCreateOrConnectWithoutAssetInput[]
    createMany?: PartUsageCreateManyAssetInputEnvelope
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
  }

  export type PartReplacementUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<PartReplacementCreateWithoutAssetInput, PartReplacementUncheckedCreateWithoutAssetInput> | PartReplacementCreateWithoutAssetInput[] | PartReplacementUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutAssetInput | PartReplacementCreateOrConnectWithoutAssetInput[]
    createMany?: PartReplacementCreateManyAssetInputEnvelope
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
  }

  export type NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<NewPartRegistrationCreateWithoutAssetInput, NewPartRegistrationUncheckedCreateWithoutAssetInput> | NewPartRegistrationCreateWithoutAssetInput[] | NewPartRegistrationUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: NewPartRegistrationCreateOrConnectWithoutAssetInput | NewPartRegistrationCreateOrConnectWithoutAssetInput[]
    createMany?: NewPartRegistrationCreateManyAssetInputEnvelope
    connect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
  }

  export type AssetComponentUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetComponentCreateWithoutAssetInput, AssetComponentUncheckedCreateWithoutAssetInput> | AssetComponentCreateWithoutAssetInput[] | AssetComponentUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetComponentCreateOrConnectWithoutAssetInput | AssetComponentCreateOrConnectWithoutAssetInput[]
    createMany?: AssetComponentCreateManyAssetInputEnvelope
    connect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
  }

  export type AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput = {
    create?: XOR<AssetComponentCreateWithoutParentAssetInput, AssetComponentUncheckedCreateWithoutParentAssetInput> | AssetComponentCreateWithoutParentAssetInput[] | AssetComponentUncheckedCreateWithoutParentAssetInput[]
    connectOrCreate?: AssetComponentCreateOrConnectWithoutParentAssetInput | AssetComponentCreateOrConnectWithoutParentAssetInput[]
    createMany?: AssetComponentCreateManyParentAssetInputEnvelope
    connect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
  }

  export type ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput = {
    create?: XOR<ComponentTransferCreateWithoutFromAssetInput, ComponentTransferUncheckedCreateWithoutFromAssetInput> | ComponentTransferCreateWithoutFromAssetInput[] | ComponentTransferUncheckedCreateWithoutFromAssetInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutFromAssetInput | ComponentTransferCreateOrConnectWithoutFromAssetInput[]
    createMany?: ComponentTransferCreateManyFromAssetInputEnvelope
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
  }

  export type ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput = {
    create?: XOR<ComponentTransferCreateWithoutToAssetInput, ComponentTransferUncheckedCreateWithoutToAssetInput> | ComponentTransferCreateWithoutToAssetInput[] | ComponentTransferUncheckedCreateWithoutToAssetInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutToAssetInput | ComponentTransferCreateOrConnectWithoutToAssetInput[]
    createMany?: ComponentTransferCreateManyToAssetInputEnvelope
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
  }

  export type InventoryUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<InventoryCreateWithoutAssetInput, InventoryUncheckedCreateWithoutAssetInput> | InventoryCreateWithoutAssetInput[] | InventoryUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutAssetInput | InventoryCreateOrConnectWithoutAssetInput[]
    createMany?: InventoryCreateManyAssetInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumAssetStatusFieldUpdateOperationsInput = {
    set?: $Enums.AssetStatus
  }

  export type CategoryUpdateOneRequiredWithoutAssetsNestedInput = {
    create?: XOR<CategoryCreateWithoutAssetsInput, CategoryUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutAssetsInput
    upsert?: CategoryUpsertWithoutAssetsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutAssetsInput, CategoryUpdateWithoutAssetsInput>, CategoryUncheckedUpdateWithoutAssetsInput>
  }

  export type VendorUpdateOneWithoutAssetsNestedInput = {
    create?: XOR<VendorCreateWithoutAssetsInput, VendorUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutAssetsInput
    upsert?: VendorUpsertWithoutAssetsInput
    disconnect?: VendorWhereInput | boolean
    delete?: VendorWhereInput | boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutAssetsInput, VendorUpdateWithoutAssetsInput>, VendorUncheckedUpdateWithoutAssetsInput>
  }

  export type LocationUpdateOneWithoutAssetsNestedInput = {
    create?: XOR<LocationCreateWithoutAssetsInput, LocationUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutAssetsInput
    upsert?: LocationUpsertWithoutAssetsInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutAssetsInput, LocationUpdateWithoutAssetsInput>, LocationUncheckedUpdateWithoutAssetsInput>
  }

  export type DepartmentUpdateOneWithoutAssetsNestedInput = {
    create?: XOR<DepartmentCreateWithoutAssetsInput, DepartmentUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutAssetsInput
    upsert?: DepartmentUpsertWithoutAssetsInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutAssetsInput, DepartmentUpdateWithoutAssetsInput>, DepartmentUncheckedUpdateWithoutAssetsInput>
  }

  export type UserUpdateOneWithoutAssignedAssetsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedAssetsInput, UserUncheckedCreateWithoutAssignedAssetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedAssetsInput
    upsert?: UserUpsertWithoutAssignedAssetsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedAssetsInput, UserUpdateWithoutAssignedAssetsInput>, UserUncheckedUpdateWithoutAssignedAssetsInput>
  }

  export type AssetRequestUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetRequestCreateWithoutAssetInput, AssetRequestUncheckedCreateWithoutAssetInput> | AssetRequestCreateWithoutAssetInput[] | AssetRequestUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutAssetInput | AssetRequestCreateOrConnectWithoutAssetInput[]
    upsert?: AssetRequestUpsertWithWhereUniqueWithoutAssetInput | AssetRequestUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetRequestCreateManyAssetInputEnvelope
    set?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    disconnect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    delete?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    update?: AssetRequestUpdateWithWhereUniqueWithoutAssetInput | AssetRequestUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetRequestUpdateManyWithWhereWithoutAssetInput | AssetRequestUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetRequestScalarWhereInput | AssetRequestScalarWhereInput[]
  }

  export type MaintenanceRecordUpdateManyWithoutAssetNestedInput = {
    create?: XOR<MaintenanceRecordCreateWithoutAssetInput, MaintenanceRecordUncheckedCreateWithoutAssetInput> | MaintenanceRecordCreateWithoutAssetInput[] | MaintenanceRecordUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutAssetInput | MaintenanceRecordCreateOrConnectWithoutAssetInput[]
    upsert?: MaintenanceRecordUpsertWithWhereUniqueWithoutAssetInput | MaintenanceRecordUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: MaintenanceRecordCreateManyAssetInputEnvelope
    set?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    disconnect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    delete?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    connect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    update?: MaintenanceRecordUpdateWithWhereUniqueWithoutAssetInput | MaintenanceRecordUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: MaintenanceRecordUpdateManyWithWhereWithoutAssetInput | MaintenanceRecordUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: MaintenanceRecordScalarWhereInput | MaintenanceRecordScalarWhereInput[]
  }

  export type AuditRecordUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AuditRecordCreateWithoutAssetInput, AuditRecordUncheckedCreateWithoutAssetInput> | AuditRecordCreateWithoutAssetInput[] | AuditRecordUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AuditRecordCreateOrConnectWithoutAssetInput | AuditRecordCreateOrConnectWithoutAssetInput[]
    upsert?: AuditRecordUpsertWithWhereUniqueWithoutAssetInput | AuditRecordUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AuditRecordCreateManyAssetInputEnvelope
    set?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    disconnect?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    delete?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    connect?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    update?: AuditRecordUpdateWithWhereUniqueWithoutAssetInput | AuditRecordUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AuditRecordUpdateManyWithWhereWithoutAssetInput | AuditRecordUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AuditRecordScalarWhereInput | AuditRecordScalarWhereInput[]
  }

  export type DisposalRecordUpdateOneWithoutAssetNestedInput = {
    create?: XOR<DisposalRecordCreateWithoutAssetInput, DisposalRecordUncheckedCreateWithoutAssetInput>
    connectOrCreate?: DisposalRecordCreateOrConnectWithoutAssetInput
    upsert?: DisposalRecordUpsertWithoutAssetInput
    disconnect?: DisposalRecordWhereInput | boolean
    delete?: DisposalRecordWhereInput | boolean
    connect?: DisposalRecordWhereUniqueInput
    update?: XOR<XOR<DisposalRecordUpdateToOneWithWhereWithoutAssetInput, DisposalRecordUpdateWithoutAssetInput>, DisposalRecordUncheckedUpdateWithoutAssetInput>
  }

  export type PartUsageUpdateManyWithoutAssetNestedInput = {
    create?: XOR<PartUsageCreateWithoutAssetInput, PartUsageUncheckedCreateWithoutAssetInput> | PartUsageCreateWithoutAssetInput[] | PartUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutAssetInput | PartUsageCreateOrConnectWithoutAssetInput[]
    upsert?: PartUsageUpsertWithWhereUniqueWithoutAssetInput | PartUsageUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: PartUsageCreateManyAssetInputEnvelope
    set?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    disconnect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    delete?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    update?: PartUsageUpdateWithWhereUniqueWithoutAssetInput | PartUsageUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: PartUsageUpdateManyWithWhereWithoutAssetInput | PartUsageUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: PartUsageScalarWhereInput | PartUsageScalarWhereInput[]
  }

  export type PartReplacementUpdateManyWithoutAssetNestedInput = {
    create?: XOR<PartReplacementCreateWithoutAssetInput, PartReplacementUncheckedCreateWithoutAssetInput> | PartReplacementCreateWithoutAssetInput[] | PartReplacementUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutAssetInput | PartReplacementCreateOrConnectWithoutAssetInput[]
    upsert?: PartReplacementUpsertWithWhereUniqueWithoutAssetInput | PartReplacementUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: PartReplacementCreateManyAssetInputEnvelope
    set?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    disconnect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    delete?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    update?: PartReplacementUpdateWithWhereUniqueWithoutAssetInput | PartReplacementUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: PartReplacementUpdateManyWithWhereWithoutAssetInput | PartReplacementUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: PartReplacementScalarWhereInput | PartReplacementScalarWhereInput[]
  }

  export type NewPartRegistrationUpdateManyWithoutAssetNestedInput = {
    create?: XOR<NewPartRegistrationCreateWithoutAssetInput, NewPartRegistrationUncheckedCreateWithoutAssetInput> | NewPartRegistrationCreateWithoutAssetInput[] | NewPartRegistrationUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: NewPartRegistrationCreateOrConnectWithoutAssetInput | NewPartRegistrationCreateOrConnectWithoutAssetInput[]
    upsert?: NewPartRegistrationUpsertWithWhereUniqueWithoutAssetInput | NewPartRegistrationUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: NewPartRegistrationCreateManyAssetInputEnvelope
    set?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    disconnect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    delete?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    connect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    update?: NewPartRegistrationUpdateWithWhereUniqueWithoutAssetInput | NewPartRegistrationUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: NewPartRegistrationUpdateManyWithWhereWithoutAssetInput | NewPartRegistrationUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: NewPartRegistrationScalarWhereInput | NewPartRegistrationScalarWhereInput[]
  }

  export type AssetComponentUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetComponentCreateWithoutAssetInput, AssetComponentUncheckedCreateWithoutAssetInput> | AssetComponentCreateWithoutAssetInput[] | AssetComponentUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetComponentCreateOrConnectWithoutAssetInput | AssetComponentCreateOrConnectWithoutAssetInput[]
    upsert?: AssetComponentUpsertWithWhereUniqueWithoutAssetInput | AssetComponentUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetComponentCreateManyAssetInputEnvelope
    set?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    disconnect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    delete?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    connect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    update?: AssetComponentUpdateWithWhereUniqueWithoutAssetInput | AssetComponentUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetComponentUpdateManyWithWhereWithoutAssetInput | AssetComponentUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetComponentScalarWhereInput | AssetComponentScalarWhereInput[]
  }

  export type AssetComponentUpdateManyWithoutParentAssetNestedInput = {
    create?: XOR<AssetComponentCreateWithoutParentAssetInput, AssetComponentUncheckedCreateWithoutParentAssetInput> | AssetComponentCreateWithoutParentAssetInput[] | AssetComponentUncheckedCreateWithoutParentAssetInput[]
    connectOrCreate?: AssetComponentCreateOrConnectWithoutParentAssetInput | AssetComponentCreateOrConnectWithoutParentAssetInput[]
    upsert?: AssetComponentUpsertWithWhereUniqueWithoutParentAssetInput | AssetComponentUpsertWithWhereUniqueWithoutParentAssetInput[]
    createMany?: AssetComponentCreateManyParentAssetInputEnvelope
    set?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    disconnect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    delete?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    connect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    update?: AssetComponentUpdateWithWhereUniqueWithoutParentAssetInput | AssetComponentUpdateWithWhereUniqueWithoutParentAssetInput[]
    updateMany?: AssetComponentUpdateManyWithWhereWithoutParentAssetInput | AssetComponentUpdateManyWithWhereWithoutParentAssetInput[]
    deleteMany?: AssetComponentScalarWhereInput | AssetComponentScalarWhereInput[]
  }

  export type ComponentTransferUpdateManyWithoutFromAssetNestedInput = {
    create?: XOR<ComponentTransferCreateWithoutFromAssetInput, ComponentTransferUncheckedCreateWithoutFromAssetInput> | ComponentTransferCreateWithoutFromAssetInput[] | ComponentTransferUncheckedCreateWithoutFromAssetInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutFromAssetInput | ComponentTransferCreateOrConnectWithoutFromAssetInput[]
    upsert?: ComponentTransferUpsertWithWhereUniqueWithoutFromAssetInput | ComponentTransferUpsertWithWhereUniqueWithoutFromAssetInput[]
    createMany?: ComponentTransferCreateManyFromAssetInputEnvelope
    set?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    disconnect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    delete?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    update?: ComponentTransferUpdateWithWhereUniqueWithoutFromAssetInput | ComponentTransferUpdateWithWhereUniqueWithoutFromAssetInput[]
    updateMany?: ComponentTransferUpdateManyWithWhereWithoutFromAssetInput | ComponentTransferUpdateManyWithWhereWithoutFromAssetInput[]
    deleteMany?: ComponentTransferScalarWhereInput | ComponentTransferScalarWhereInput[]
  }

  export type ComponentTransferUpdateManyWithoutToAssetNestedInput = {
    create?: XOR<ComponentTransferCreateWithoutToAssetInput, ComponentTransferUncheckedCreateWithoutToAssetInput> | ComponentTransferCreateWithoutToAssetInput[] | ComponentTransferUncheckedCreateWithoutToAssetInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutToAssetInput | ComponentTransferCreateOrConnectWithoutToAssetInput[]
    upsert?: ComponentTransferUpsertWithWhereUniqueWithoutToAssetInput | ComponentTransferUpsertWithWhereUniqueWithoutToAssetInput[]
    createMany?: ComponentTransferCreateManyToAssetInputEnvelope
    set?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    disconnect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    delete?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    update?: ComponentTransferUpdateWithWhereUniqueWithoutToAssetInput | ComponentTransferUpdateWithWhereUniqueWithoutToAssetInput[]
    updateMany?: ComponentTransferUpdateManyWithWhereWithoutToAssetInput | ComponentTransferUpdateManyWithWhereWithoutToAssetInput[]
    deleteMany?: ComponentTransferScalarWhereInput | ComponentTransferScalarWhereInput[]
  }

  export type InventoryUpdateManyWithoutAssetNestedInput = {
    create?: XOR<InventoryCreateWithoutAssetInput, InventoryUncheckedCreateWithoutAssetInput> | InventoryCreateWithoutAssetInput[] | InventoryUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutAssetInput | InventoryCreateOrConnectWithoutAssetInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutAssetInput | InventoryUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: InventoryCreateManyAssetInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutAssetInput | InventoryUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutAssetInput | InventoryUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type AssetRequestUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetRequestCreateWithoutAssetInput, AssetRequestUncheckedCreateWithoutAssetInput> | AssetRequestCreateWithoutAssetInput[] | AssetRequestUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetRequestCreateOrConnectWithoutAssetInput | AssetRequestCreateOrConnectWithoutAssetInput[]
    upsert?: AssetRequestUpsertWithWhereUniqueWithoutAssetInput | AssetRequestUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetRequestCreateManyAssetInputEnvelope
    set?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    disconnect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    delete?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    connect?: AssetRequestWhereUniqueInput | AssetRequestWhereUniqueInput[]
    update?: AssetRequestUpdateWithWhereUniqueWithoutAssetInput | AssetRequestUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetRequestUpdateManyWithWhereWithoutAssetInput | AssetRequestUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetRequestScalarWhereInput | AssetRequestScalarWhereInput[]
  }

  export type MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<MaintenanceRecordCreateWithoutAssetInput, MaintenanceRecordUncheckedCreateWithoutAssetInput> | MaintenanceRecordCreateWithoutAssetInput[] | MaintenanceRecordUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutAssetInput | MaintenanceRecordCreateOrConnectWithoutAssetInput[]
    upsert?: MaintenanceRecordUpsertWithWhereUniqueWithoutAssetInput | MaintenanceRecordUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: MaintenanceRecordCreateManyAssetInputEnvelope
    set?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    disconnect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    delete?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    connect?: MaintenanceRecordWhereUniqueInput | MaintenanceRecordWhereUniqueInput[]
    update?: MaintenanceRecordUpdateWithWhereUniqueWithoutAssetInput | MaintenanceRecordUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: MaintenanceRecordUpdateManyWithWhereWithoutAssetInput | MaintenanceRecordUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: MaintenanceRecordScalarWhereInput | MaintenanceRecordScalarWhereInput[]
  }

  export type AuditRecordUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AuditRecordCreateWithoutAssetInput, AuditRecordUncheckedCreateWithoutAssetInput> | AuditRecordCreateWithoutAssetInput[] | AuditRecordUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AuditRecordCreateOrConnectWithoutAssetInput | AuditRecordCreateOrConnectWithoutAssetInput[]
    upsert?: AuditRecordUpsertWithWhereUniqueWithoutAssetInput | AuditRecordUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AuditRecordCreateManyAssetInputEnvelope
    set?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    disconnect?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    delete?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    connect?: AuditRecordWhereUniqueInput | AuditRecordWhereUniqueInput[]
    update?: AuditRecordUpdateWithWhereUniqueWithoutAssetInput | AuditRecordUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AuditRecordUpdateManyWithWhereWithoutAssetInput | AuditRecordUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AuditRecordScalarWhereInput | AuditRecordScalarWhereInput[]
  }

  export type DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput = {
    create?: XOR<DisposalRecordCreateWithoutAssetInput, DisposalRecordUncheckedCreateWithoutAssetInput>
    connectOrCreate?: DisposalRecordCreateOrConnectWithoutAssetInput
    upsert?: DisposalRecordUpsertWithoutAssetInput
    disconnect?: DisposalRecordWhereInput | boolean
    delete?: DisposalRecordWhereInput | boolean
    connect?: DisposalRecordWhereUniqueInput
    update?: XOR<XOR<DisposalRecordUpdateToOneWithWhereWithoutAssetInput, DisposalRecordUpdateWithoutAssetInput>, DisposalRecordUncheckedUpdateWithoutAssetInput>
  }

  export type PartUsageUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<PartUsageCreateWithoutAssetInput, PartUsageUncheckedCreateWithoutAssetInput> | PartUsageCreateWithoutAssetInput[] | PartUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutAssetInput | PartUsageCreateOrConnectWithoutAssetInput[]
    upsert?: PartUsageUpsertWithWhereUniqueWithoutAssetInput | PartUsageUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: PartUsageCreateManyAssetInputEnvelope
    set?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    disconnect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    delete?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    update?: PartUsageUpdateWithWhereUniqueWithoutAssetInput | PartUsageUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: PartUsageUpdateManyWithWhereWithoutAssetInput | PartUsageUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: PartUsageScalarWhereInput | PartUsageScalarWhereInput[]
  }

  export type PartReplacementUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<PartReplacementCreateWithoutAssetInput, PartReplacementUncheckedCreateWithoutAssetInput> | PartReplacementCreateWithoutAssetInput[] | PartReplacementUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutAssetInput | PartReplacementCreateOrConnectWithoutAssetInput[]
    upsert?: PartReplacementUpsertWithWhereUniqueWithoutAssetInput | PartReplacementUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: PartReplacementCreateManyAssetInputEnvelope
    set?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    disconnect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    delete?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    update?: PartReplacementUpdateWithWhereUniqueWithoutAssetInput | PartReplacementUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: PartReplacementUpdateManyWithWhereWithoutAssetInput | PartReplacementUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: PartReplacementScalarWhereInput | PartReplacementScalarWhereInput[]
  }

  export type NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<NewPartRegistrationCreateWithoutAssetInput, NewPartRegistrationUncheckedCreateWithoutAssetInput> | NewPartRegistrationCreateWithoutAssetInput[] | NewPartRegistrationUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: NewPartRegistrationCreateOrConnectWithoutAssetInput | NewPartRegistrationCreateOrConnectWithoutAssetInput[]
    upsert?: NewPartRegistrationUpsertWithWhereUniqueWithoutAssetInput | NewPartRegistrationUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: NewPartRegistrationCreateManyAssetInputEnvelope
    set?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    disconnect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    delete?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    connect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    update?: NewPartRegistrationUpdateWithWhereUniqueWithoutAssetInput | NewPartRegistrationUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: NewPartRegistrationUpdateManyWithWhereWithoutAssetInput | NewPartRegistrationUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: NewPartRegistrationScalarWhereInput | NewPartRegistrationScalarWhereInput[]
  }

  export type AssetComponentUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetComponentCreateWithoutAssetInput, AssetComponentUncheckedCreateWithoutAssetInput> | AssetComponentCreateWithoutAssetInput[] | AssetComponentUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetComponentCreateOrConnectWithoutAssetInput | AssetComponentCreateOrConnectWithoutAssetInput[]
    upsert?: AssetComponentUpsertWithWhereUniqueWithoutAssetInput | AssetComponentUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetComponentCreateManyAssetInputEnvelope
    set?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    disconnect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    delete?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    connect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    update?: AssetComponentUpdateWithWhereUniqueWithoutAssetInput | AssetComponentUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetComponentUpdateManyWithWhereWithoutAssetInput | AssetComponentUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetComponentScalarWhereInput | AssetComponentScalarWhereInput[]
  }

  export type AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput = {
    create?: XOR<AssetComponentCreateWithoutParentAssetInput, AssetComponentUncheckedCreateWithoutParentAssetInput> | AssetComponentCreateWithoutParentAssetInput[] | AssetComponentUncheckedCreateWithoutParentAssetInput[]
    connectOrCreate?: AssetComponentCreateOrConnectWithoutParentAssetInput | AssetComponentCreateOrConnectWithoutParentAssetInput[]
    upsert?: AssetComponentUpsertWithWhereUniqueWithoutParentAssetInput | AssetComponentUpsertWithWhereUniqueWithoutParentAssetInput[]
    createMany?: AssetComponentCreateManyParentAssetInputEnvelope
    set?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    disconnect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    delete?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    connect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    update?: AssetComponentUpdateWithWhereUniqueWithoutParentAssetInput | AssetComponentUpdateWithWhereUniqueWithoutParentAssetInput[]
    updateMany?: AssetComponentUpdateManyWithWhereWithoutParentAssetInput | AssetComponentUpdateManyWithWhereWithoutParentAssetInput[]
    deleteMany?: AssetComponentScalarWhereInput | AssetComponentScalarWhereInput[]
  }

  export type ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput = {
    create?: XOR<ComponentTransferCreateWithoutFromAssetInput, ComponentTransferUncheckedCreateWithoutFromAssetInput> | ComponentTransferCreateWithoutFromAssetInput[] | ComponentTransferUncheckedCreateWithoutFromAssetInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutFromAssetInput | ComponentTransferCreateOrConnectWithoutFromAssetInput[]
    upsert?: ComponentTransferUpsertWithWhereUniqueWithoutFromAssetInput | ComponentTransferUpsertWithWhereUniqueWithoutFromAssetInput[]
    createMany?: ComponentTransferCreateManyFromAssetInputEnvelope
    set?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    disconnect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    delete?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    update?: ComponentTransferUpdateWithWhereUniqueWithoutFromAssetInput | ComponentTransferUpdateWithWhereUniqueWithoutFromAssetInput[]
    updateMany?: ComponentTransferUpdateManyWithWhereWithoutFromAssetInput | ComponentTransferUpdateManyWithWhereWithoutFromAssetInput[]
    deleteMany?: ComponentTransferScalarWhereInput | ComponentTransferScalarWhereInput[]
  }

  export type ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput = {
    create?: XOR<ComponentTransferCreateWithoutToAssetInput, ComponentTransferUncheckedCreateWithoutToAssetInput> | ComponentTransferCreateWithoutToAssetInput[] | ComponentTransferUncheckedCreateWithoutToAssetInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutToAssetInput | ComponentTransferCreateOrConnectWithoutToAssetInput[]
    upsert?: ComponentTransferUpsertWithWhereUniqueWithoutToAssetInput | ComponentTransferUpsertWithWhereUniqueWithoutToAssetInput[]
    createMany?: ComponentTransferCreateManyToAssetInputEnvelope
    set?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    disconnect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    delete?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    update?: ComponentTransferUpdateWithWhereUniqueWithoutToAssetInput | ComponentTransferUpdateWithWhereUniqueWithoutToAssetInput[]
    updateMany?: ComponentTransferUpdateManyWithWhereWithoutToAssetInput | ComponentTransferUpdateManyWithWhereWithoutToAssetInput[]
    deleteMany?: ComponentTransferScalarWhereInput | ComponentTransferScalarWhereInput[]
  }

  export type InventoryUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<InventoryCreateWithoutAssetInput, InventoryUncheckedCreateWithoutAssetInput> | InventoryCreateWithoutAssetInput[] | InventoryUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutAssetInput | InventoryCreateOrConnectWithoutAssetInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutAssetInput | InventoryUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: InventoryCreateManyAssetInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutAssetInput | InventoryUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutAssetInput | InventoryUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAssetRequestsInput = {
    create?: XOR<UserCreateWithoutAssetRequestsInput, UserUncheckedCreateWithoutAssetRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssetRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutAssetRequestsInput = {
    create?: XOR<DepartmentCreateWithoutAssetRequestsInput, DepartmentUncheckedCreateWithoutAssetRequestsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutAssetRequestsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutAssetRequestsInput = {
    create?: XOR<AssetCreateWithoutAssetRequestsInput, AssetUncheckedCreateWithoutAssetRequestsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutAssetRequestsInput
    connect?: AssetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovedRequestsInput = {
    create?: XOR<UserCreateWithoutApprovedRequestsInput, UserUncheckedCreateWithoutApprovedRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.RequestStatus
  }

  export type UserUpdateOneRequiredWithoutAssetRequestsNestedInput = {
    create?: XOR<UserCreateWithoutAssetRequestsInput, UserUncheckedCreateWithoutAssetRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssetRequestsInput
    upsert?: UserUpsertWithoutAssetRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssetRequestsInput, UserUpdateWithoutAssetRequestsInput>, UserUncheckedUpdateWithoutAssetRequestsInput>
  }

  export type DepartmentUpdateOneRequiredWithoutAssetRequestsNestedInput = {
    create?: XOR<DepartmentCreateWithoutAssetRequestsInput, DepartmentUncheckedCreateWithoutAssetRequestsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutAssetRequestsInput
    upsert?: DepartmentUpsertWithoutAssetRequestsInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutAssetRequestsInput, DepartmentUpdateWithoutAssetRequestsInput>, DepartmentUncheckedUpdateWithoutAssetRequestsInput>
  }

  export type AssetUpdateOneWithoutAssetRequestsNestedInput = {
    create?: XOR<AssetCreateWithoutAssetRequestsInput, AssetUncheckedCreateWithoutAssetRequestsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutAssetRequestsInput
    upsert?: AssetUpsertWithoutAssetRequestsInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutAssetRequestsInput, AssetUpdateWithoutAssetRequestsInput>, AssetUncheckedUpdateWithoutAssetRequestsInput>
  }

  export type UserUpdateOneWithoutApprovedRequestsNestedInput = {
    create?: XOR<UserCreateWithoutApprovedRequestsInput, UserUncheckedCreateWithoutApprovedRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedRequestsInput
    upsert?: UserUpsertWithoutApprovedRequestsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovedRequestsInput, UserUpdateWithoutApprovedRequestsInput>, UserUncheckedUpdateWithoutApprovedRequestsInput>
  }

  export type AssetCreateNestedOneWithoutMaintenanceRecordsInput = {
    create?: XOR<AssetCreateWithoutMaintenanceRecordsInput, AssetUncheckedCreateWithoutMaintenanceRecordsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutMaintenanceRecordsInput
    connect?: AssetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMaintenanceRecordsInput = {
    create?: XOR<UserCreateWithoutMaintenanceRecordsInput, UserUncheckedCreateWithoutMaintenanceRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMaintenanceRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type VendorCreateNestedOneWithoutMaintenanceRecordsInput = {
    create?: XOR<VendorCreateWithoutMaintenanceRecordsInput, VendorUncheckedCreateWithoutMaintenanceRecordsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutMaintenanceRecordsInput
    connect?: VendorWhereUniqueInput
  }

  export type PartUsageCreateNestedManyWithoutMaintenanceInput = {
    create?: XOR<PartUsageCreateWithoutMaintenanceInput, PartUsageUncheckedCreateWithoutMaintenanceInput> | PartUsageCreateWithoutMaintenanceInput[] | PartUsageUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutMaintenanceInput | PartUsageCreateOrConnectWithoutMaintenanceInput[]
    createMany?: PartUsageCreateManyMaintenanceInputEnvelope
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
  }

  export type PartUsageUncheckedCreateNestedManyWithoutMaintenanceInput = {
    create?: XOR<PartUsageCreateWithoutMaintenanceInput, PartUsageUncheckedCreateWithoutMaintenanceInput> | PartUsageCreateWithoutMaintenanceInput[] | PartUsageUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutMaintenanceInput | PartUsageCreateOrConnectWithoutMaintenanceInput[]
    createMany?: PartUsageCreateManyMaintenanceInputEnvelope
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
  }

  export type EnumMaintenanceStatusFieldUpdateOperationsInput = {
    set?: $Enums.MaintenanceStatus
  }

  export type AssetUpdateOneRequiredWithoutMaintenanceRecordsNestedInput = {
    create?: XOR<AssetCreateWithoutMaintenanceRecordsInput, AssetUncheckedCreateWithoutMaintenanceRecordsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutMaintenanceRecordsInput
    upsert?: AssetUpsertWithoutMaintenanceRecordsInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutMaintenanceRecordsInput, AssetUpdateWithoutMaintenanceRecordsInput>, AssetUncheckedUpdateWithoutMaintenanceRecordsInput>
  }

  export type UserUpdateOneWithoutMaintenanceRecordsNestedInput = {
    create?: XOR<UserCreateWithoutMaintenanceRecordsInput, UserUncheckedCreateWithoutMaintenanceRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMaintenanceRecordsInput
    upsert?: UserUpsertWithoutMaintenanceRecordsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMaintenanceRecordsInput, UserUpdateWithoutMaintenanceRecordsInput>, UserUncheckedUpdateWithoutMaintenanceRecordsInput>
  }

  export type VendorUpdateOneWithoutMaintenanceRecordsNestedInput = {
    create?: XOR<VendorCreateWithoutMaintenanceRecordsInput, VendorUncheckedCreateWithoutMaintenanceRecordsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutMaintenanceRecordsInput
    upsert?: VendorUpsertWithoutMaintenanceRecordsInput
    disconnect?: VendorWhereInput | boolean
    delete?: VendorWhereInput | boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutMaintenanceRecordsInput, VendorUpdateWithoutMaintenanceRecordsInput>, VendorUncheckedUpdateWithoutMaintenanceRecordsInput>
  }

  export type PartUsageUpdateManyWithoutMaintenanceNestedInput = {
    create?: XOR<PartUsageCreateWithoutMaintenanceInput, PartUsageUncheckedCreateWithoutMaintenanceInput> | PartUsageCreateWithoutMaintenanceInput[] | PartUsageUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutMaintenanceInput | PartUsageCreateOrConnectWithoutMaintenanceInput[]
    upsert?: PartUsageUpsertWithWhereUniqueWithoutMaintenanceInput | PartUsageUpsertWithWhereUniqueWithoutMaintenanceInput[]
    createMany?: PartUsageCreateManyMaintenanceInputEnvelope
    set?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    disconnect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    delete?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    update?: PartUsageUpdateWithWhereUniqueWithoutMaintenanceInput | PartUsageUpdateWithWhereUniqueWithoutMaintenanceInput[]
    updateMany?: PartUsageUpdateManyWithWhereWithoutMaintenanceInput | PartUsageUpdateManyWithWhereWithoutMaintenanceInput[]
    deleteMany?: PartUsageScalarWhereInput | PartUsageScalarWhereInput[]
  }

  export type PartUsageUncheckedUpdateManyWithoutMaintenanceNestedInput = {
    create?: XOR<PartUsageCreateWithoutMaintenanceInput, PartUsageUncheckedCreateWithoutMaintenanceInput> | PartUsageCreateWithoutMaintenanceInput[] | PartUsageUncheckedCreateWithoutMaintenanceInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutMaintenanceInput | PartUsageCreateOrConnectWithoutMaintenanceInput[]
    upsert?: PartUsageUpsertWithWhereUniqueWithoutMaintenanceInput | PartUsageUpsertWithWhereUniqueWithoutMaintenanceInput[]
    createMany?: PartUsageCreateManyMaintenanceInputEnvelope
    set?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    disconnect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    delete?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    update?: PartUsageUpdateWithWhereUniqueWithoutMaintenanceInput | PartUsageUpdateWithWhereUniqueWithoutMaintenanceInput[]
    updateMany?: PartUsageUpdateManyWithWhereWithoutMaintenanceInput | PartUsageUpdateManyWithWhereWithoutMaintenanceInput[]
    deleteMany?: PartUsageScalarWhereInput | PartUsageScalarWhereInput[]
  }

  export type VendorCreateNestedOneWithoutMaintenanceContractsInput = {
    create?: XOR<VendorCreateWithoutMaintenanceContractsInput, VendorUncheckedCreateWithoutMaintenanceContractsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutMaintenanceContractsInput
    connect?: VendorWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type VendorUpdateOneRequiredWithoutMaintenanceContractsNestedInput = {
    create?: XOR<VendorCreateWithoutMaintenanceContractsInput, VendorUncheckedCreateWithoutMaintenanceContractsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutMaintenanceContractsInput
    upsert?: VendorUpsertWithoutMaintenanceContractsInput
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutMaintenanceContractsInput, VendorUpdateWithoutMaintenanceContractsInput>, VendorUncheckedUpdateWithoutMaintenanceContractsInput>
  }

  export type AssetCreateNestedOneWithoutAuditRecordsInput = {
    create?: XOR<AssetCreateWithoutAuditRecordsInput, AssetUncheckedCreateWithoutAuditRecordsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutAuditRecordsInput
    connect?: AssetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAuditRecordsInput = {
    create?: XOR<UserCreateWithoutAuditRecordsInput, UserUncheckedCreateWithoutAuditRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAuditStatusFieldUpdateOperationsInput = {
    set?: $Enums.AuditStatus
  }

  export type AssetUpdateOneWithoutAuditRecordsNestedInput = {
    create?: XOR<AssetCreateWithoutAuditRecordsInput, AssetUncheckedCreateWithoutAuditRecordsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutAuditRecordsInput
    upsert?: AssetUpsertWithoutAuditRecordsInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutAuditRecordsInput, AssetUpdateWithoutAuditRecordsInput>, AssetUncheckedUpdateWithoutAuditRecordsInput>
  }

  export type UserUpdateOneRequiredWithoutAuditRecordsNestedInput = {
    create?: XOR<UserCreateWithoutAuditRecordsInput, UserUncheckedCreateWithoutAuditRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditRecordsInput
    upsert?: UserUpsertWithoutAuditRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditRecordsInput, UserUpdateWithoutAuditRecordsInput>, UserUncheckedUpdateWithoutAuditRecordsInput>
  }

  export type AssetCreateNestedOneWithoutDisposalRecordInput = {
    create?: XOR<AssetCreateWithoutDisposalRecordInput, AssetUncheckedCreateWithoutDisposalRecordInput>
    connectOrCreate?: AssetCreateOrConnectWithoutDisposalRecordInput
    connect?: AssetWhereUniqueInput
  }

  export type AssetUpdateOneRequiredWithoutDisposalRecordNestedInput = {
    create?: XOR<AssetCreateWithoutDisposalRecordInput, AssetUncheckedCreateWithoutDisposalRecordInput>
    connectOrCreate?: AssetCreateOrConnectWithoutDisposalRecordInput
    upsert?: AssetUpsertWithoutDisposalRecordInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutDisposalRecordInput, AssetUpdateWithoutDisposalRecordInput>, AssetUncheckedUpdateWithoutDisposalRecordInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type SparePartCreatecompatibleWithInput = {
    set: string[]
  }

  export type VendorCreateNestedOneWithoutSparePartsInput = {
    create?: XOR<VendorCreateWithoutSparePartsInput, VendorUncheckedCreateWithoutSparePartsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutSparePartsInput
    connect?: VendorWhereUniqueInput
  }

  export type ProcurementCreateNestedManyWithoutPartInput = {
    create?: XOR<ProcurementCreateWithoutPartInput, ProcurementUncheckedCreateWithoutPartInput> | ProcurementCreateWithoutPartInput[] | ProcurementUncheckedCreateWithoutPartInput[]
    connectOrCreate?: ProcurementCreateOrConnectWithoutPartInput | ProcurementCreateOrConnectWithoutPartInput[]
    createMany?: ProcurementCreateManyPartInputEnvelope
    connect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
  }

  export type PartUsageCreateNestedManyWithoutPartInput = {
    create?: XOR<PartUsageCreateWithoutPartInput, PartUsageUncheckedCreateWithoutPartInput> | PartUsageCreateWithoutPartInput[] | PartUsageUncheckedCreateWithoutPartInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutPartInput | PartUsageCreateOrConnectWithoutPartInput[]
    createMany?: PartUsageCreateManyPartInputEnvelope
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
  }

  export type PartReplacementCreateNestedManyWithoutNewPartInput = {
    create?: XOR<PartReplacementCreateWithoutNewPartInput, PartReplacementUncheckedCreateWithoutNewPartInput> | PartReplacementCreateWithoutNewPartInput[] | PartReplacementUncheckedCreateWithoutNewPartInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutNewPartInput | PartReplacementCreateOrConnectWithoutNewPartInput[]
    createMany?: PartReplacementCreateManyNewPartInputEnvelope
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
  }

  export type PartReplacementCreateNestedManyWithoutOldPartInput = {
    create?: XOR<PartReplacementCreateWithoutOldPartInput, PartReplacementUncheckedCreateWithoutOldPartInput> | PartReplacementCreateWithoutOldPartInput[] | PartReplacementUncheckedCreateWithoutOldPartInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutOldPartInput | PartReplacementCreateOrConnectWithoutOldPartInput[]
    createMany?: PartReplacementCreateManyOldPartInputEnvelope
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
  }

  export type NewPartRegistrationCreateNestedManyWithoutPartInput = {
    create?: XOR<NewPartRegistrationCreateWithoutPartInput, NewPartRegistrationUncheckedCreateWithoutPartInput> | NewPartRegistrationCreateWithoutPartInput[] | NewPartRegistrationUncheckedCreateWithoutPartInput[]
    connectOrCreate?: NewPartRegistrationCreateOrConnectWithoutPartInput | NewPartRegistrationCreateOrConnectWithoutPartInput[]
    createMany?: NewPartRegistrationCreateManyPartInputEnvelope
    connect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
  }

  export type AssetComponentCreateNestedManyWithoutSourcePartInput = {
    create?: XOR<AssetComponentCreateWithoutSourcePartInput, AssetComponentUncheckedCreateWithoutSourcePartInput> | AssetComponentCreateWithoutSourcePartInput[] | AssetComponentUncheckedCreateWithoutSourcePartInput[]
    connectOrCreate?: AssetComponentCreateOrConnectWithoutSourcePartInput | AssetComponentCreateOrConnectWithoutSourcePartInput[]
    createMany?: AssetComponentCreateManySourcePartInputEnvelope
    connect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
  }

  export type ProcurementUncheckedCreateNestedManyWithoutPartInput = {
    create?: XOR<ProcurementCreateWithoutPartInput, ProcurementUncheckedCreateWithoutPartInput> | ProcurementCreateWithoutPartInput[] | ProcurementUncheckedCreateWithoutPartInput[]
    connectOrCreate?: ProcurementCreateOrConnectWithoutPartInput | ProcurementCreateOrConnectWithoutPartInput[]
    createMany?: ProcurementCreateManyPartInputEnvelope
    connect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
  }

  export type PartUsageUncheckedCreateNestedManyWithoutPartInput = {
    create?: XOR<PartUsageCreateWithoutPartInput, PartUsageUncheckedCreateWithoutPartInput> | PartUsageCreateWithoutPartInput[] | PartUsageUncheckedCreateWithoutPartInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutPartInput | PartUsageCreateOrConnectWithoutPartInput[]
    createMany?: PartUsageCreateManyPartInputEnvelope
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
  }

  export type PartReplacementUncheckedCreateNestedManyWithoutNewPartInput = {
    create?: XOR<PartReplacementCreateWithoutNewPartInput, PartReplacementUncheckedCreateWithoutNewPartInput> | PartReplacementCreateWithoutNewPartInput[] | PartReplacementUncheckedCreateWithoutNewPartInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutNewPartInput | PartReplacementCreateOrConnectWithoutNewPartInput[]
    createMany?: PartReplacementCreateManyNewPartInputEnvelope
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
  }

  export type PartReplacementUncheckedCreateNestedManyWithoutOldPartInput = {
    create?: XOR<PartReplacementCreateWithoutOldPartInput, PartReplacementUncheckedCreateWithoutOldPartInput> | PartReplacementCreateWithoutOldPartInput[] | PartReplacementUncheckedCreateWithoutOldPartInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutOldPartInput | PartReplacementCreateOrConnectWithoutOldPartInput[]
    createMany?: PartReplacementCreateManyOldPartInputEnvelope
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
  }

  export type NewPartRegistrationUncheckedCreateNestedManyWithoutPartInput = {
    create?: XOR<NewPartRegistrationCreateWithoutPartInput, NewPartRegistrationUncheckedCreateWithoutPartInput> | NewPartRegistrationCreateWithoutPartInput[] | NewPartRegistrationUncheckedCreateWithoutPartInput[]
    connectOrCreate?: NewPartRegistrationCreateOrConnectWithoutPartInput | NewPartRegistrationCreateOrConnectWithoutPartInput[]
    createMany?: NewPartRegistrationCreateManyPartInputEnvelope
    connect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
  }

  export type AssetComponentUncheckedCreateNestedManyWithoutSourcePartInput = {
    create?: XOR<AssetComponentCreateWithoutSourcePartInput, AssetComponentUncheckedCreateWithoutSourcePartInput> | AssetComponentCreateWithoutSourcePartInput[] | AssetComponentUncheckedCreateWithoutSourcePartInput[]
    connectOrCreate?: AssetComponentCreateOrConnectWithoutSourcePartInput | AssetComponentCreateOrConnectWithoutSourcePartInput[]
    createMany?: AssetComponentCreateManySourcePartInputEnvelope
    connect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
  }

  export type EnumSparePartCategoryFieldUpdateOperationsInput = {
    set?: $Enums.SparePartCategory
  }

  export type EnumSparePartTypeFieldUpdateOperationsInput = {
    set?: $Enums.SparePartType
  }

  export type EnumSparePartStatusFieldUpdateOperationsInput = {
    set?: $Enums.SparePartStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SparePartUpdatecompatibleWithInput = {
    set?: string[]
    push?: string | string[]
  }

  export type VendorUpdateOneWithoutSparePartsNestedInput = {
    create?: XOR<VendorCreateWithoutSparePartsInput, VendorUncheckedCreateWithoutSparePartsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutSparePartsInput
    upsert?: VendorUpsertWithoutSparePartsInput
    disconnect?: VendorWhereInput | boolean
    delete?: VendorWhereInput | boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutSparePartsInput, VendorUpdateWithoutSparePartsInput>, VendorUncheckedUpdateWithoutSparePartsInput>
  }

  export type ProcurementUpdateManyWithoutPartNestedInput = {
    create?: XOR<ProcurementCreateWithoutPartInput, ProcurementUncheckedCreateWithoutPartInput> | ProcurementCreateWithoutPartInput[] | ProcurementUncheckedCreateWithoutPartInput[]
    connectOrCreate?: ProcurementCreateOrConnectWithoutPartInput | ProcurementCreateOrConnectWithoutPartInput[]
    upsert?: ProcurementUpsertWithWhereUniqueWithoutPartInput | ProcurementUpsertWithWhereUniqueWithoutPartInput[]
    createMany?: ProcurementCreateManyPartInputEnvelope
    set?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    disconnect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    delete?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    connect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    update?: ProcurementUpdateWithWhereUniqueWithoutPartInput | ProcurementUpdateWithWhereUniqueWithoutPartInput[]
    updateMany?: ProcurementUpdateManyWithWhereWithoutPartInput | ProcurementUpdateManyWithWhereWithoutPartInput[]
    deleteMany?: ProcurementScalarWhereInput | ProcurementScalarWhereInput[]
  }

  export type PartUsageUpdateManyWithoutPartNestedInput = {
    create?: XOR<PartUsageCreateWithoutPartInput, PartUsageUncheckedCreateWithoutPartInput> | PartUsageCreateWithoutPartInput[] | PartUsageUncheckedCreateWithoutPartInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutPartInput | PartUsageCreateOrConnectWithoutPartInput[]
    upsert?: PartUsageUpsertWithWhereUniqueWithoutPartInput | PartUsageUpsertWithWhereUniqueWithoutPartInput[]
    createMany?: PartUsageCreateManyPartInputEnvelope
    set?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    disconnect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    delete?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    update?: PartUsageUpdateWithWhereUniqueWithoutPartInput | PartUsageUpdateWithWhereUniqueWithoutPartInput[]
    updateMany?: PartUsageUpdateManyWithWhereWithoutPartInput | PartUsageUpdateManyWithWhereWithoutPartInput[]
    deleteMany?: PartUsageScalarWhereInput | PartUsageScalarWhereInput[]
  }

  export type PartReplacementUpdateManyWithoutNewPartNestedInput = {
    create?: XOR<PartReplacementCreateWithoutNewPartInput, PartReplacementUncheckedCreateWithoutNewPartInput> | PartReplacementCreateWithoutNewPartInput[] | PartReplacementUncheckedCreateWithoutNewPartInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutNewPartInput | PartReplacementCreateOrConnectWithoutNewPartInput[]
    upsert?: PartReplacementUpsertWithWhereUniqueWithoutNewPartInput | PartReplacementUpsertWithWhereUniqueWithoutNewPartInput[]
    createMany?: PartReplacementCreateManyNewPartInputEnvelope
    set?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    disconnect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    delete?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    update?: PartReplacementUpdateWithWhereUniqueWithoutNewPartInput | PartReplacementUpdateWithWhereUniqueWithoutNewPartInput[]
    updateMany?: PartReplacementUpdateManyWithWhereWithoutNewPartInput | PartReplacementUpdateManyWithWhereWithoutNewPartInput[]
    deleteMany?: PartReplacementScalarWhereInput | PartReplacementScalarWhereInput[]
  }

  export type PartReplacementUpdateManyWithoutOldPartNestedInput = {
    create?: XOR<PartReplacementCreateWithoutOldPartInput, PartReplacementUncheckedCreateWithoutOldPartInput> | PartReplacementCreateWithoutOldPartInput[] | PartReplacementUncheckedCreateWithoutOldPartInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutOldPartInput | PartReplacementCreateOrConnectWithoutOldPartInput[]
    upsert?: PartReplacementUpsertWithWhereUniqueWithoutOldPartInput | PartReplacementUpsertWithWhereUniqueWithoutOldPartInput[]
    createMany?: PartReplacementCreateManyOldPartInputEnvelope
    set?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    disconnect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    delete?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    update?: PartReplacementUpdateWithWhereUniqueWithoutOldPartInput | PartReplacementUpdateWithWhereUniqueWithoutOldPartInput[]
    updateMany?: PartReplacementUpdateManyWithWhereWithoutOldPartInput | PartReplacementUpdateManyWithWhereWithoutOldPartInput[]
    deleteMany?: PartReplacementScalarWhereInput | PartReplacementScalarWhereInput[]
  }

  export type NewPartRegistrationUpdateManyWithoutPartNestedInput = {
    create?: XOR<NewPartRegistrationCreateWithoutPartInput, NewPartRegistrationUncheckedCreateWithoutPartInput> | NewPartRegistrationCreateWithoutPartInput[] | NewPartRegistrationUncheckedCreateWithoutPartInput[]
    connectOrCreate?: NewPartRegistrationCreateOrConnectWithoutPartInput | NewPartRegistrationCreateOrConnectWithoutPartInput[]
    upsert?: NewPartRegistrationUpsertWithWhereUniqueWithoutPartInput | NewPartRegistrationUpsertWithWhereUniqueWithoutPartInput[]
    createMany?: NewPartRegistrationCreateManyPartInputEnvelope
    set?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    disconnect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    delete?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    connect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    update?: NewPartRegistrationUpdateWithWhereUniqueWithoutPartInput | NewPartRegistrationUpdateWithWhereUniqueWithoutPartInput[]
    updateMany?: NewPartRegistrationUpdateManyWithWhereWithoutPartInput | NewPartRegistrationUpdateManyWithWhereWithoutPartInput[]
    deleteMany?: NewPartRegistrationScalarWhereInput | NewPartRegistrationScalarWhereInput[]
  }

  export type AssetComponentUpdateManyWithoutSourcePartNestedInput = {
    create?: XOR<AssetComponentCreateWithoutSourcePartInput, AssetComponentUncheckedCreateWithoutSourcePartInput> | AssetComponentCreateWithoutSourcePartInput[] | AssetComponentUncheckedCreateWithoutSourcePartInput[]
    connectOrCreate?: AssetComponentCreateOrConnectWithoutSourcePartInput | AssetComponentCreateOrConnectWithoutSourcePartInput[]
    upsert?: AssetComponentUpsertWithWhereUniqueWithoutSourcePartInput | AssetComponentUpsertWithWhereUniqueWithoutSourcePartInput[]
    createMany?: AssetComponentCreateManySourcePartInputEnvelope
    set?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    disconnect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    delete?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    connect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    update?: AssetComponentUpdateWithWhereUniqueWithoutSourcePartInput | AssetComponentUpdateWithWhereUniqueWithoutSourcePartInput[]
    updateMany?: AssetComponentUpdateManyWithWhereWithoutSourcePartInput | AssetComponentUpdateManyWithWhereWithoutSourcePartInput[]
    deleteMany?: AssetComponentScalarWhereInput | AssetComponentScalarWhereInput[]
  }

  export type ProcurementUncheckedUpdateManyWithoutPartNestedInput = {
    create?: XOR<ProcurementCreateWithoutPartInput, ProcurementUncheckedCreateWithoutPartInput> | ProcurementCreateWithoutPartInput[] | ProcurementUncheckedCreateWithoutPartInput[]
    connectOrCreate?: ProcurementCreateOrConnectWithoutPartInput | ProcurementCreateOrConnectWithoutPartInput[]
    upsert?: ProcurementUpsertWithWhereUniqueWithoutPartInput | ProcurementUpsertWithWhereUniqueWithoutPartInput[]
    createMany?: ProcurementCreateManyPartInputEnvelope
    set?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    disconnect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    delete?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    connect?: ProcurementWhereUniqueInput | ProcurementWhereUniqueInput[]
    update?: ProcurementUpdateWithWhereUniqueWithoutPartInput | ProcurementUpdateWithWhereUniqueWithoutPartInput[]
    updateMany?: ProcurementUpdateManyWithWhereWithoutPartInput | ProcurementUpdateManyWithWhereWithoutPartInput[]
    deleteMany?: ProcurementScalarWhereInput | ProcurementScalarWhereInput[]
  }

  export type PartUsageUncheckedUpdateManyWithoutPartNestedInput = {
    create?: XOR<PartUsageCreateWithoutPartInput, PartUsageUncheckedCreateWithoutPartInput> | PartUsageCreateWithoutPartInput[] | PartUsageUncheckedCreateWithoutPartInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutPartInput | PartUsageCreateOrConnectWithoutPartInput[]
    upsert?: PartUsageUpsertWithWhereUniqueWithoutPartInput | PartUsageUpsertWithWhereUniqueWithoutPartInput[]
    createMany?: PartUsageCreateManyPartInputEnvelope
    set?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    disconnect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    delete?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    update?: PartUsageUpdateWithWhereUniqueWithoutPartInput | PartUsageUpdateWithWhereUniqueWithoutPartInput[]
    updateMany?: PartUsageUpdateManyWithWhereWithoutPartInput | PartUsageUpdateManyWithWhereWithoutPartInput[]
    deleteMany?: PartUsageScalarWhereInput | PartUsageScalarWhereInput[]
  }

  export type PartReplacementUncheckedUpdateManyWithoutNewPartNestedInput = {
    create?: XOR<PartReplacementCreateWithoutNewPartInput, PartReplacementUncheckedCreateWithoutNewPartInput> | PartReplacementCreateWithoutNewPartInput[] | PartReplacementUncheckedCreateWithoutNewPartInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutNewPartInput | PartReplacementCreateOrConnectWithoutNewPartInput[]
    upsert?: PartReplacementUpsertWithWhereUniqueWithoutNewPartInput | PartReplacementUpsertWithWhereUniqueWithoutNewPartInput[]
    createMany?: PartReplacementCreateManyNewPartInputEnvelope
    set?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    disconnect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    delete?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    update?: PartReplacementUpdateWithWhereUniqueWithoutNewPartInput | PartReplacementUpdateWithWhereUniqueWithoutNewPartInput[]
    updateMany?: PartReplacementUpdateManyWithWhereWithoutNewPartInput | PartReplacementUpdateManyWithWhereWithoutNewPartInput[]
    deleteMany?: PartReplacementScalarWhereInput | PartReplacementScalarWhereInput[]
  }

  export type PartReplacementUncheckedUpdateManyWithoutOldPartNestedInput = {
    create?: XOR<PartReplacementCreateWithoutOldPartInput, PartReplacementUncheckedCreateWithoutOldPartInput> | PartReplacementCreateWithoutOldPartInput[] | PartReplacementUncheckedCreateWithoutOldPartInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutOldPartInput | PartReplacementCreateOrConnectWithoutOldPartInput[]
    upsert?: PartReplacementUpsertWithWhereUniqueWithoutOldPartInput | PartReplacementUpsertWithWhereUniqueWithoutOldPartInput[]
    createMany?: PartReplacementCreateManyOldPartInputEnvelope
    set?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    disconnect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    delete?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    update?: PartReplacementUpdateWithWhereUniqueWithoutOldPartInput | PartReplacementUpdateWithWhereUniqueWithoutOldPartInput[]
    updateMany?: PartReplacementUpdateManyWithWhereWithoutOldPartInput | PartReplacementUpdateManyWithWhereWithoutOldPartInput[]
    deleteMany?: PartReplacementScalarWhereInput | PartReplacementScalarWhereInput[]
  }

  export type NewPartRegistrationUncheckedUpdateManyWithoutPartNestedInput = {
    create?: XOR<NewPartRegistrationCreateWithoutPartInput, NewPartRegistrationUncheckedCreateWithoutPartInput> | NewPartRegistrationCreateWithoutPartInput[] | NewPartRegistrationUncheckedCreateWithoutPartInput[]
    connectOrCreate?: NewPartRegistrationCreateOrConnectWithoutPartInput | NewPartRegistrationCreateOrConnectWithoutPartInput[]
    upsert?: NewPartRegistrationUpsertWithWhereUniqueWithoutPartInput | NewPartRegistrationUpsertWithWhereUniqueWithoutPartInput[]
    createMany?: NewPartRegistrationCreateManyPartInputEnvelope
    set?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    disconnect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    delete?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    connect?: NewPartRegistrationWhereUniqueInput | NewPartRegistrationWhereUniqueInput[]
    update?: NewPartRegistrationUpdateWithWhereUniqueWithoutPartInput | NewPartRegistrationUpdateWithWhereUniqueWithoutPartInput[]
    updateMany?: NewPartRegistrationUpdateManyWithWhereWithoutPartInput | NewPartRegistrationUpdateManyWithWhereWithoutPartInput[]
    deleteMany?: NewPartRegistrationScalarWhereInput | NewPartRegistrationScalarWhereInput[]
  }

  export type AssetComponentUncheckedUpdateManyWithoutSourcePartNestedInput = {
    create?: XOR<AssetComponentCreateWithoutSourcePartInput, AssetComponentUncheckedCreateWithoutSourcePartInput> | AssetComponentCreateWithoutSourcePartInput[] | AssetComponentUncheckedCreateWithoutSourcePartInput[]
    connectOrCreate?: AssetComponentCreateOrConnectWithoutSourcePartInput | AssetComponentCreateOrConnectWithoutSourcePartInput[]
    upsert?: AssetComponentUpsertWithWhereUniqueWithoutSourcePartInput | AssetComponentUpsertWithWhereUniqueWithoutSourcePartInput[]
    createMany?: AssetComponentCreateManySourcePartInputEnvelope
    set?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    disconnect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    delete?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    connect?: AssetComponentWhereUniqueInput | AssetComponentWhereUniqueInput[]
    update?: AssetComponentUpdateWithWhereUniqueWithoutSourcePartInput | AssetComponentUpdateWithWhereUniqueWithoutSourcePartInput[]
    updateMany?: AssetComponentUpdateManyWithWhereWithoutSourcePartInput | AssetComponentUpdateManyWithWhereWithoutSourcePartInput[]
    deleteMany?: AssetComponentScalarWhereInput | AssetComponentScalarWhereInput[]
  }

  export type SparePartCreateNestedOneWithoutProcurementsInput = {
    create?: XOR<SparePartCreateWithoutProcurementsInput, SparePartUncheckedCreateWithoutProcurementsInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutProcurementsInput
    connect?: SparePartWhereUniqueInput
  }

  export type VendorCreateNestedOneWithoutProcurementsInput = {
    create?: XOR<VendorCreateWithoutProcurementsInput, VendorUncheckedCreateWithoutProcurementsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutProcurementsInput
    connect?: VendorWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProcurementsOrderedInput = {
    create?: XOR<UserCreateWithoutProcurementsOrderedInput, UserUncheckedCreateWithoutProcurementsOrderedInput>
    connectOrCreate?: UserCreateOrConnectWithoutProcurementsOrderedInput
    connect?: UserWhereUniqueInput
  }

  export type EnumProcurementStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProcurementStatus
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SparePartUpdateOneRequiredWithoutProcurementsNestedInput = {
    create?: XOR<SparePartCreateWithoutProcurementsInput, SparePartUncheckedCreateWithoutProcurementsInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutProcurementsInput
    upsert?: SparePartUpsertWithoutProcurementsInput
    connect?: SparePartWhereUniqueInput
    update?: XOR<XOR<SparePartUpdateToOneWithWhereWithoutProcurementsInput, SparePartUpdateWithoutProcurementsInput>, SparePartUncheckedUpdateWithoutProcurementsInput>
  }

  export type VendorUpdateOneWithoutProcurementsNestedInput = {
    create?: XOR<VendorCreateWithoutProcurementsInput, VendorUncheckedCreateWithoutProcurementsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutProcurementsInput
    upsert?: VendorUpsertWithoutProcurementsInput
    disconnect?: VendorWhereInput | boolean
    delete?: VendorWhereInput | boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutProcurementsInput, VendorUpdateWithoutProcurementsInput>, VendorUncheckedUpdateWithoutProcurementsInput>
  }

  export type UserUpdateOneRequiredWithoutProcurementsOrderedNestedInput = {
    create?: XOR<UserCreateWithoutProcurementsOrderedInput, UserUncheckedCreateWithoutProcurementsOrderedInput>
    connectOrCreate?: UserCreateOrConnectWithoutProcurementsOrderedInput
    upsert?: UserUpsertWithoutProcurementsOrderedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProcurementsOrderedInput, UserUpdateWithoutProcurementsOrderedInput>, UserUncheckedUpdateWithoutProcurementsOrderedInput>
  }

  export type SparePartCreateNestedOneWithoutUsagesInput = {
    create?: XOR<SparePartCreateWithoutUsagesInput, SparePartUncheckedCreateWithoutUsagesInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutUsagesInput
    connect?: SparePartWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutPartUsagesInput = {
    create?: XOR<AssetCreateWithoutPartUsagesInput, AssetUncheckedCreateWithoutPartUsagesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutPartUsagesInput
    connect?: AssetWhereUniqueInput
  }

  export type AssetComponentCreateNestedOneWithoutUsagesInput = {
    create?: XOR<AssetComponentCreateWithoutUsagesInput, AssetComponentUncheckedCreateWithoutUsagesInput>
    connectOrCreate?: AssetComponentCreateOrConnectWithoutUsagesInput
    connect?: AssetComponentWhereUniqueInput
  }

  export type MaintenanceRecordCreateNestedOneWithoutPartUsagesInput = {
    create?: XOR<MaintenanceRecordCreateWithoutPartUsagesInput, MaintenanceRecordUncheckedCreateWithoutPartUsagesInput>
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutPartUsagesInput
    connect?: MaintenanceRecordWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPartUsagesInput = {
    create?: XOR<UserCreateWithoutPartUsagesInput, UserUncheckedCreateWithoutPartUsagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPartUsagesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumPartUsageTypeFieldUpdateOperationsInput = {
    set?: $Enums.PartUsageType
  }

  export type SparePartUpdateOneRequiredWithoutUsagesNestedInput = {
    create?: XOR<SparePartCreateWithoutUsagesInput, SparePartUncheckedCreateWithoutUsagesInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutUsagesInput
    upsert?: SparePartUpsertWithoutUsagesInput
    connect?: SparePartWhereUniqueInput
    update?: XOR<XOR<SparePartUpdateToOneWithWhereWithoutUsagesInput, SparePartUpdateWithoutUsagesInput>, SparePartUncheckedUpdateWithoutUsagesInput>
  }

  export type AssetUpdateOneWithoutPartUsagesNestedInput = {
    create?: XOR<AssetCreateWithoutPartUsagesInput, AssetUncheckedCreateWithoutPartUsagesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutPartUsagesInput
    upsert?: AssetUpsertWithoutPartUsagesInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutPartUsagesInput, AssetUpdateWithoutPartUsagesInput>, AssetUncheckedUpdateWithoutPartUsagesInput>
  }

  export type AssetComponentUpdateOneWithoutUsagesNestedInput = {
    create?: XOR<AssetComponentCreateWithoutUsagesInput, AssetComponentUncheckedCreateWithoutUsagesInput>
    connectOrCreate?: AssetComponentCreateOrConnectWithoutUsagesInput
    upsert?: AssetComponentUpsertWithoutUsagesInput
    disconnect?: AssetComponentWhereInput | boolean
    delete?: AssetComponentWhereInput | boolean
    connect?: AssetComponentWhereUniqueInput
    update?: XOR<XOR<AssetComponentUpdateToOneWithWhereWithoutUsagesInput, AssetComponentUpdateWithoutUsagesInput>, AssetComponentUncheckedUpdateWithoutUsagesInput>
  }

  export type MaintenanceRecordUpdateOneWithoutPartUsagesNestedInput = {
    create?: XOR<MaintenanceRecordCreateWithoutPartUsagesInput, MaintenanceRecordUncheckedCreateWithoutPartUsagesInput>
    connectOrCreate?: MaintenanceRecordCreateOrConnectWithoutPartUsagesInput
    upsert?: MaintenanceRecordUpsertWithoutPartUsagesInput
    disconnect?: MaintenanceRecordWhereInput | boolean
    delete?: MaintenanceRecordWhereInput | boolean
    connect?: MaintenanceRecordWhereUniqueInput
    update?: XOR<XOR<MaintenanceRecordUpdateToOneWithWhereWithoutPartUsagesInput, MaintenanceRecordUpdateWithoutPartUsagesInput>, MaintenanceRecordUncheckedUpdateWithoutPartUsagesInput>
  }

  export type UserUpdateOneRequiredWithoutPartUsagesNestedInput = {
    create?: XOR<UserCreateWithoutPartUsagesInput, UserUncheckedCreateWithoutPartUsagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPartUsagesInput
    upsert?: UserUpsertWithoutPartUsagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPartUsagesInput, UserUpdateWithoutPartUsagesInput>, UserUncheckedUpdateWithoutPartUsagesInput>
  }

  export type SparePartCreateNestedOneWithoutOldReplacementsInput = {
    create?: XOR<SparePartCreateWithoutOldReplacementsInput, SparePartUncheckedCreateWithoutOldReplacementsInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutOldReplacementsInput
    connect?: SparePartWhereUniqueInput
  }

  export type AssetComponentCreateNestedOneWithoutReplacementsInput = {
    create?: XOR<AssetComponentCreateWithoutReplacementsInput, AssetComponentUncheckedCreateWithoutReplacementsInput>
    connectOrCreate?: AssetComponentCreateOrConnectWithoutReplacementsInput
    connect?: AssetComponentWhereUniqueInput
  }

  export type SparePartCreateNestedOneWithoutReplacementsInput = {
    create?: XOR<SparePartCreateWithoutReplacementsInput, SparePartUncheckedCreateWithoutReplacementsInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutReplacementsInput
    connect?: SparePartWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutPartReplacementsInput = {
    create?: XOR<AssetCreateWithoutPartReplacementsInput, AssetUncheckedCreateWithoutPartReplacementsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutPartReplacementsInput
    connect?: AssetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReplacementsPerformedInput = {
    create?: XOR<UserCreateWithoutReplacementsPerformedInput, UserUncheckedCreateWithoutReplacementsPerformedInput>
    connectOrCreate?: UserCreateOrConnectWithoutReplacementsPerformedInput
    connect?: UserWhereUniqueInput
  }

  export type EnumReplacementStatusFieldUpdateOperationsInput = {
    set?: $Enums.ReplacementStatus
  }

  export type SparePartUpdateOneWithoutOldReplacementsNestedInput = {
    create?: XOR<SparePartCreateWithoutOldReplacementsInput, SparePartUncheckedCreateWithoutOldReplacementsInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutOldReplacementsInput
    upsert?: SparePartUpsertWithoutOldReplacementsInput
    disconnect?: SparePartWhereInput | boolean
    delete?: SparePartWhereInput | boolean
    connect?: SparePartWhereUniqueInput
    update?: XOR<XOR<SparePartUpdateToOneWithWhereWithoutOldReplacementsInput, SparePartUpdateWithoutOldReplacementsInput>, SparePartUncheckedUpdateWithoutOldReplacementsInput>
  }

  export type AssetComponentUpdateOneWithoutReplacementsNestedInput = {
    create?: XOR<AssetComponentCreateWithoutReplacementsInput, AssetComponentUncheckedCreateWithoutReplacementsInput>
    connectOrCreate?: AssetComponentCreateOrConnectWithoutReplacementsInput
    upsert?: AssetComponentUpsertWithoutReplacementsInput
    disconnect?: AssetComponentWhereInput | boolean
    delete?: AssetComponentWhereInput | boolean
    connect?: AssetComponentWhereUniqueInput
    update?: XOR<XOR<AssetComponentUpdateToOneWithWhereWithoutReplacementsInput, AssetComponentUpdateWithoutReplacementsInput>, AssetComponentUncheckedUpdateWithoutReplacementsInput>
  }

  export type SparePartUpdateOneRequiredWithoutReplacementsNestedInput = {
    create?: XOR<SparePartCreateWithoutReplacementsInput, SparePartUncheckedCreateWithoutReplacementsInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutReplacementsInput
    upsert?: SparePartUpsertWithoutReplacementsInput
    connect?: SparePartWhereUniqueInput
    update?: XOR<XOR<SparePartUpdateToOneWithWhereWithoutReplacementsInput, SparePartUpdateWithoutReplacementsInput>, SparePartUncheckedUpdateWithoutReplacementsInput>
  }

  export type AssetUpdateOneRequiredWithoutPartReplacementsNestedInput = {
    create?: XOR<AssetCreateWithoutPartReplacementsInput, AssetUncheckedCreateWithoutPartReplacementsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutPartReplacementsInput
    upsert?: AssetUpsertWithoutPartReplacementsInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutPartReplacementsInput, AssetUpdateWithoutPartReplacementsInput>, AssetUncheckedUpdateWithoutPartReplacementsInput>
  }

  export type UserUpdateOneWithoutReplacementsPerformedNestedInput = {
    create?: XOR<UserCreateWithoutReplacementsPerformedInput, UserUncheckedCreateWithoutReplacementsPerformedInput>
    connectOrCreate?: UserCreateOrConnectWithoutReplacementsPerformedInput
    upsert?: UserUpsertWithoutReplacementsPerformedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReplacementsPerformedInput, UserUpdateWithoutReplacementsPerformedInput>, UserUncheckedUpdateWithoutReplacementsPerformedInput>
  }

  export type SparePartCreateNestedOneWithoutRegistrationsInput = {
    create?: XOR<SparePartCreateWithoutRegistrationsInput, SparePartUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutRegistrationsInput
    connect?: SparePartWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutPartRegistrationsInput = {
    create?: XOR<AssetCreateWithoutPartRegistrationsInput, AssetUncheckedCreateWithoutPartRegistrationsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutPartRegistrationsInput
    connect?: AssetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPartRegistrationsInput = {
    create?: XOR<UserCreateWithoutPartRegistrationsInput, UserUncheckedCreateWithoutPartRegistrationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPartRegistrationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRegistrationStatusFieldUpdateOperationsInput = {
    set?: $Enums.RegistrationStatus
  }

  export type SparePartUpdateOneRequiredWithoutRegistrationsNestedInput = {
    create?: XOR<SparePartCreateWithoutRegistrationsInput, SparePartUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutRegistrationsInput
    upsert?: SparePartUpsertWithoutRegistrationsInput
    connect?: SparePartWhereUniqueInput
    update?: XOR<XOR<SparePartUpdateToOneWithWhereWithoutRegistrationsInput, SparePartUpdateWithoutRegistrationsInput>, SparePartUncheckedUpdateWithoutRegistrationsInput>
  }

  export type AssetUpdateOneWithoutPartRegistrationsNestedInput = {
    create?: XOR<AssetCreateWithoutPartRegistrationsInput, AssetUncheckedCreateWithoutPartRegistrationsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutPartRegistrationsInput
    upsert?: AssetUpsertWithoutPartRegistrationsInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutPartRegistrationsInput, AssetUpdateWithoutPartRegistrationsInput>, AssetUncheckedUpdateWithoutPartRegistrationsInput>
  }

  export type UserUpdateOneRequiredWithoutPartRegistrationsNestedInput = {
    create?: XOR<UserCreateWithoutPartRegistrationsInput, UserUncheckedCreateWithoutPartRegistrationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPartRegistrationsInput
    upsert?: UserUpsertWithoutPartRegistrationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPartRegistrationsInput, UserUpdateWithoutPartRegistrationsInput>, UserUncheckedUpdateWithoutPartRegistrationsInput>
  }

  export type AssetCreateNestedOneWithoutComponentsInput = {
    create?: XOR<AssetCreateWithoutComponentsInput, AssetUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutComponentsInput
    connect?: AssetWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutParentComponentsInput = {
    create?: XOR<AssetCreateWithoutParentComponentsInput, AssetUncheckedCreateWithoutParentComponentsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutParentComponentsInput
    connect?: AssetWhereUniqueInput
  }

  export type SparePartCreateNestedOneWithoutSourceComponentsInput = {
    create?: XOR<SparePartCreateWithoutSourceComponentsInput, SparePartUncheckedCreateWithoutSourceComponentsInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutSourceComponentsInput
    connect?: SparePartWhereUniqueInput
  }

  export type PartUsageCreateNestedManyWithoutComponentInput = {
    create?: XOR<PartUsageCreateWithoutComponentInput, PartUsageUncheckedCreateWithoutComponentInput> | PartUsageCreateWithoutComponentInput[] | PartUsageUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutComponentInput | PartUsageCreateOrConnectWithoutComponentInput[]
    createMany?: PartUsageCreateManyComponentInputEnvelope
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
  }

  export type PartReplacementCreateNestedManyWithoutOldComponentInput = {
    create?: XOR<PartReplacementCreateWithoutOldComponentInput, PartReplacementUncheckedCreateWithoutOldComponentInput> | PartReplacementCreateWithoutOldComponentInput[] | PartReplacementUncheckedCreateWithoutOldComponentInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutOldComponentInput | PartReplacementCreateOrConnectWithoutOldComponentInput[]
    createMany?: PartReplacementCreateManyOldComponentInputEnvelope
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
  }

  export type ComponentTransferCreateNestedManyWithoutComponentInput = {
    create?: XOR<ComponentTransferCreateWithoutComponentInput, ComponentTransferUncheckedCreateWithoutComponentInput> | ComponentTransferCreateWithoutComponentInput[] | ComponentTransferUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutComponentInput | ComponentTransferCreateOrConnectWithoutComponentInput[]
    createMany?: ComponentTransferCreateManyComponentInputEnvelope
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
  }

  export type ComponentMaintenanceCreateNestedManyWithoutComponentInput = {
    create?: XOR<ComponentMaintenanceCreateWithoutComponentInput, ComponentMaintenanceUncheckedCreateWithoutComponentInput> | ComponentMaintenanceCreateWithoutComponentInput[] | ComponentMaintenanceUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentMaintenanceCreateOrConnectWithoutComponentInput | ComponentMaintenanceCreateOrConnectWithoutComponentInput[]
    createMany?: ComponentMaintenanceCreateManyComponentInputEnvelope
    connect?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
  }

  export type PartUsageUncheckedCreateNestedManyWithoutComponentInput = {
    create?: XOR<PartUsageCreateWithoutComponentInput, PartUsageUncheckedCreateWithoutComponentInput> | PartUsageCreateWithoutComponentInput[] | PartUsageUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutComponentInput | PartUsageCreateOrConnectWithoutComponentInput[]
    createMany?: PartUsageCreateManyComponentInputEnvelope
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
  }

  export type PartReplacementUncheckedCreateNestedManyWithoutOldComponentInput = {
    create?: XOR<PartReplacementCreateWithoutOldComponentInput, PartReplacementUncheckedCreateWithoutOldComponentInput> | PartReplacementCreateWithoutOldComponentInput[] | PartReplacementUncheckedCreateWithoutOldComponentInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutOldComponentInput | PartReplacementCreateOrConnectWithoutOldComponentInput[]
    createMany?: PartReplacementCreateManyOldComponentInputEnvelope
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
  }

  export type ComponentTransferUncheckedCreateNestedManyWithoutComponentInput = {
    create?: XOR<ComponentTransferCreateWithoutComponentInput, ComponentTransferUncheckedCreateWithoutComponentInput> | ComponentTransferCreateWithoutComponentInput[] | ComponentTransferUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutComponentInput | ComponentTransferCreateOrConnectWithoutComponentInput[]
    createMany?: ComponentTransferCreateManyComponentInputEnvelope
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
  }

  export type ComponentMaintenanceUncheckedCreateNestedManyWithoutComponentInput = {
    create?: XOR<ComponentMaintenanceCreateWithoutComponentInput, ComponentMaintenanceUncheckedCreateWithoutComponentInput> | ComponentMaintenanceCreateWithoutComponentInput[] | ComponentMaintenanceUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentMaintenanceCreateOrConnectWithoutComponentInput | ComponentMaintenanceCreateOrConnectWithoutComponentInput[]
    createMany?: ComponentMaintenanceCreateManyComponentInputEnvelope
    connect?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
  }

  export type EnumComponentStatusFieldUpdateOperationsInput = {
    set?: $Enums.ComponentStatus
  }

  export type AssetUpdateOneRequiredWithoutComponentsNestedInput = {
    create?: XOR<AssetCreateWithoutComponentsInput, AssetUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutComponentsInput
    upsert?: AssetUpsertWithoutComponentsInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutComponentsInput, AssetUpdateWithoutComponentsInput>, AssetUncheckedUpdateWithoutComponentsInput>
  }

  export type AssetUpdateOneWithoutParentComponentsNestedInput = {
    create?: XOR<AssetCreateWithoutParentComponentsInput, AssetUncheckedCreateWithoutParentComponentsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutParentComponentsInput
    upsert?: AssetUpsertWithoutParentComponentsInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutParentComponentsInput, AssetUpdateWithoutParentComponentsInput>, AssetUncheckedUpdateWithoutParentComponentsInput>
  }

  export type SparePartUpdateOneWithoutSourceComponentsNestedInput = {
    create?: XOR<SparePartCreateWithoutSourceComponentsInput, SparePartUncheckedCreateWithoutSourceComponentsInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutSourceComponentsInput
    upsert?: SparePartUpsertWithoutSourceComponentsInput
    disconnect?: SparePartWhereInput | boolean
    delete?: SparePartWhereInput | boolean
    connect?: SparePartWhereUniqueInput
    update?: XOR<XOR<SparePartUpdateToOneWithWhereWithoutSourceComponentsInput, SparePartUpdateWithoutSourceComponentsInput>, SparePartUncheckedUpdateWithoutSourceComponentsInput>
  }

  export type PartUsageUpdateManyWithoutComponentNestedInput = {
    create?: XOR<PartUsageCreateWithoutComponentInput, PartUsageUncheckedCreateWithoutComponentInput> | PartUsageCreateWithoutComponentInput[] | PartUsageUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutComponentInput | PartUsageCreateOrConnectWithoutComponentInput[]
    upsert?: PartUsageUpsertWithWhereUniqueWithoutComponentInput | PartUsageUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: PartUsageCreateManyComponentInputEnvelope
    set?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    disconnect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    delete?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    update?: PartUsageUpdateWithWhereUniqueWithoutComponentInput | PartUsageUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: PartUsageUpdateManyWithWhereWithoutComponentInput | PartUsageUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: PartUsageScalarWhereInput | PartUsageScalarWhereInput[]
  }

  export type PartReplacementUpdateManyWithoutOldComponentNestedInput = {
    create?: XOR<PartReplacementCreateWithoutOldComponentInput, PartReplacementUncheckedCreateWithoutOldComponentInput> | PartReplacementCreateWithoutOldComponentInput[] | PartReplacementUncheckedCreateWithoutOldComponentInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutOldComponentInput | PartReplacementCreateOrConnectWithoutOldComponentInput[]
    upsert?: PartReplacementUpsertWithWhereUniqueWithoutOldComponentInput | PartReplacementUpsertWithWhereUniqueWithoutOldComponentInput[]
    createMany?: PartReplacementCreateManyOldComponentInputEnvelope
    set?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    disconnect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    delete?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    update?: PartReplacementUpdateWithWhereUniqueWithoutOldComponentInput | PartReplacementUpdateWithWhereUniqueWithoutOldComponentInput[]
    updateMany?: PartReplacementUpdateManyWithWhereWithoutOldComponentInput | PartReplacementUpdateManyWithWhereWithoutOldComponentInput[]
    deleteMany?: PartReplacementScalarWhereInput | PartReplacementScalarWhereInput[]
  }

  export type ComponentTransferUpdateManyWithoutComponentNestedInput = {
    create?: XOR<ComponentTransferCreateWithoutComponentInput, ComponentTransferUncheckedCreateWithoutComponentInput> | ComponentTransferCreateWithoutComponentInput[] | ComponentTransferUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutComponentInput | ComponentTransferCreateOrConnectWithoutComponentInput[]
    upsert?: ComponentTransferUpsertWithWhereUniqueWithoutComponentInput | ComponentTransferUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: ComponentTransferCreateManyComponentInputEnvelope
    set?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    disconnect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    delete?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    update?: ComponentTransferUpdateWithWhereUniqueWithoutComponentInput | ComponentTransferUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: ComponentTransferUpdateManyWithWhereWithoutComponentInput | ComponentTransferUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: ComponentTransferScalarWhereInput | ComponentTransferScalarWhereInput[]
  }

  export type ComponentMaintenanceUpdateManyWithoutComponentNestedInput = {
    create?: XOR<ComponentMaintenanceCreateWithoutComponentInput, ComponentMaintenanceUncheckedCreateWithoutComponentInput> | ComponentMaintenanceCreateWithoutComponentInput[] | ComponentMaintenanceUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentMaintenanceCreateOrConnectWithoutComponentInput | ComponentMaintenanceCreateOrConnectWithoutComponentInput[]
    upsert?: ComponentMaintenanceUpsertWithWhereUniqueWithoutComponentInput | ComponentMaintenanceUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: ComponentMaintenanceCreateManyComponentInputEnvelope
    set?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    disconnect?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    delete?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    connect?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    update?: ComponentMaintenanceUpdateWithWhereUniqueWithoutComponentInput | ComponentMaintenanceUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: ComponentMaintenanceUpdateManyWithWhereWithoutComponentInput | ComponentMaintenanceUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: ComponentMaintenanceScalarWhereInput | ComponentMaintenanceScalarWhereInput[]
  }

  export type PartUsageUncheckedUpdateManyWithoutComponentNestedInput = {
    create?: XOR<PartUsageCreateWithoutComponentInput, PartUsageUncheckedCreateWithoutComponentInput> | PartUsageCreateWithoutComponentInput[] | PartUsageUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: PartUsageCreateOrConnectWithoutComponentInput | PartUsageCreateOrConnectWithoutComponentInput[]
    upsert?: PartUsageUpsertWithWhereUniqueWithoutComponentInput | PartUsageUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: PartUsageCreateManyComponentInputEnvelope
    set?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    disconnect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    delete?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    connect?: PartUsageWhereUniqueInput | PartUsageWhereUniqueInput[]
    update?: PartUsageUpdateWithWhereUniqueWithoutComponentInput | PartUsageUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: PartUsageUpdateManyWithWhereWithoutComponentInput | PartUsageUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: PartUsageScalarWhereInput | PartUsageScalarWhereInput[]
  }

  export type PartReplacementUncheckedUpdateManyWithoutOldComponentNestedInput = {
    create?: XOR<PartReplacementCreateWithoutOldComponentInput, PartReplacementUncheckedCreateWithoutOldComponentInput> | PartReplacementCreateWithoutOldComponentInput[] | PartReplacementUncheckedCreateWithoutOldComponentInput[]
    connectOrCreate?: PartReplacementCreateOrConnectWithoutOldComponentInput | PartReplacementCreateOrConnectWithoutOldComponentInput[]
    upsert?: PartReplacementUpsertWithWhereUniqueWithoutOldComponentInput | PartReplacementUpsertWithWhereUniqueWithoutOldComponentInput[]
    createMany?: PartReplacementCreateManyOldComponentInputEnvelope
    set?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    disconnect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    delete?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    connect?: PartReplacementWhereUniqueInput | PartReplacementWhereUniqueInput[]
    update?: PartReplacementUpdateWithWhereUniqueWithoutOldComponentInput | PartReplacementUpdateWithWhereUniqueWithoutOldComponentInput[]
    updateMany?: PartReplacementUpdateManyWithWhereWithoutOldComponentInput | PartReplacementUpdateManyWithWhereWithoutOldComponentInput[]
    deleteMany?: PartReplacementScalarWhereInput | PartReplacementScalarWhereInput[]
  }

  export type ComponentTransferUncheckedUpdateManyWithoutComponentNestedInput = {
    create?: XOR<ComponentTransferCreateWithoutComponentInput, ComponentTransferUncheckedCreateWithoutComponentInput> | ComponentTransferCreateWithoutComponentInput[] | ComponentTransferUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentTransferCreateOrConnectWithoutComponentInput | ComponentTransferCreateOrConnectWithoutComponentInput[]
    upsert?: ComponentTransferUpsertWithWhereUniqueWithoutComponentInput | ComponentTransferUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: ComponentTransferCreateManyComponentInputEnvelope
    set?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    disconnect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    delete?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    connect?: ComponentTransferWhereUniqueInput | ComponentTransferWhereUniqueInput[]
    update?: ComponentTransferUpdateWithWhereUniqueWithoutComponentInput | ComponentTransferUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: ComponentTransferUpdateManyWithWhereWithoutComponentInput | ComponentTransferUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: ComponentTransferScalarWhereInput | ComponentTransferScalarWhereInput[]
  }

  export type ComponentMaintenanceUncheckedUpdateManyWithoutComponentNestedInput = {
    create?: XOR<ComponentMaintenanceCreateWithoutComponentInput, ComponentMaintenanceUncheckedCreateWithoutComponentInput> | ComponentMaintenanceCreateWithoutComponentInput[] | ComponentMaintenanceUncheckedCreateWithoutComponentInput[]
    connectOrCreate?: ComponentMaintenanceCreateOrConnectWithoutComponentInput | ComponentMaintenanceCreateOrConnectWithoutComponentInput[]
    upsert?: ComponentMaintenanceUpsertWithWhereUniqueWithoutComponentInput | ComponentMaintenanceUpsertWithWhereUniqueWithoutComponentInput[]
    createMany?: ComponentMaintenanceCreateManyComponentInputEnvelope
    set?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    disconnect?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    delete?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    connect?: ComponentMaintenanceWhereUniqueInput | ComponentMaintenanceWhereUniqueInput[]
    update?: ComponentMaintenanceUpdateWithWhereUniqueWithoutComponentInput | ComponentMaintenanceUpdateWithWhereUniqueWithoutComponentInput[]
    updateMany?: ComponentMaintenanceUpdateManyWithWhereWithoutComponentInput | ComponentMaintenanceUpdateManyWithWhereWithoutComponentInput[]
    deleteMany?: ComponentMaintenanceScalarWhereInput | ComponentMaintenanceScalarWhereInput[]
  }

  export type AssetComponentCreateNestedOneWithoutTransfersInput = {
    create?: XOR<AssetComponentCreateWithoutTransfersInput, AssetComponentUncheckedCreateWithoutTransfersInput>
    connectOrCreate?: AssetComponentCreateOrConnectWithoutTransfersInput
    connect?: AssetComponentWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutTransfersFromInput = {
    create?: XOR<AssetCreateWithoutTransfersFromInput, AssetUncheckedCreateWithoutTransfersFromInput>
    connectOrCreate?: AssetCreateOrConnectWithoutTransfersFromInput
    connect?: AssetWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutTransfersToInput = {
    create?: XOR<AssetCreateWithoutTransfersToInput, AssetUncheckedCreateWithoutTransfersToInput>
    connectOrCreate?: AssetCreateOrConnectWithoutTransfersToInput
    connect?: AssetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutComponentTransfersInput = {
    create?: XOR<UserCreateWithoutComponentTransfersInput, UserUncheckedCreateWithoutComponentTransfersInput>
    connectOrCreate?: UserCreateOrConnectWithoutComponentTransfersInput
    connect?: UserWhereUniqueInput
  }

  export type AssetComponentUpdateOneRequiredWithoutTransfersNestedInput = {
    create?: XOR<AssetComponentCreateWithoutTransfersInput, AssetComponentUncheckedCreateWithoutTransfersInput>
    connectOrCreate?: AssetComponentCreateOrConnectWithoutTransfersInput
    upsert?: AssetComponentUpsertWithoutTransfersInput
    connect?: AssetComponentWhereUniqueInput
    update?: XOR<XOR<AssetComponentUpdateToOneWithWhereWithoutTransfersInput, AssetComponentUpdateWithoutTransfersInput>, AssetComponentUncheckedUpdateWithoutTransfersInput>
  }

  export type AssetUpdateOneRequiredWithoutTransfersFromNestedInput = {
    create?: XOR<AssetCreateWithoutTransfersFromInput, AssetUncheckedCreateWithoutTransfersFromInput>
    connectOrCreate?: AssetCreateOrConnectWithoutTransfersFromInput
    upsert?: AssetUpsertWithoutTransfersFromInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutTransfersFromInput, AssetUpdateWithoutTransfersFromInput>, AssetUncheckedUpdateWithoutTransfersFromInput>
  }

  export type AssetUpdateOneRequiredWithoutTransfersToNestedInput = {
    create?: XOR<AssetCreateWithoutTransfersToInput, AssetUncheckedCreateWithoutTransfersToInput>
    connectOrCreate?: AssetCreateOrConnectWithoutTransfersToInput
    upsert?: AssetUpsertWithoutTransfersToInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutTransfersToInput, AssetUpdateWithoutTransfersToInput>, AssetUncheckedUpdateWithoutTransfersToInput>
  }

  export type UserUpdateOneRequiredWithoutComponentTransfersNestedInput = {
    create?: XOR<UserCreateWithoutComponentTransfersInput, UserUncheckedCreateWithoutComponentTransfersInput>
    connectOrCreate?: UserCreateOrConnectWithoutComponentTransfersInput
    upsert?: UserUpsertWithoutComponentTransfersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutComponentTransfersInput, UserUpdateWithoutComponentTransfersInput>, UserUncheckedUpdateWithoutComponentTransfersInput>
  }

  export type AssetComponentCreateNestedOneWithoutMaintenanceRecordsInput = {
    create?: XOR<AssetComponentCreateWithoutMaintenanceRecordsInput, AssetComponentUncheckedCreateWithoutMaintenanceRecordsInput>
    connectOrCreate?: AssetComponentCreateOrConnectWithoutMaintenanceRecordsInput
    connect?: AssetComponentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutComponentMaintenanceInput = {
    create?: XOR<UserCreateWithoutComponentMaintenanceInput, UserUncheckedCreateWithoutComponentMaintenanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutComponentMaintenanceInput
    connect?: UserWhereUniqueInput
  }

  export type AssetComponentUpdateOneRequiredWithoutMaintenanceRecordsNestedInput = {
    create?: XOR<AssetComponentCreateWithoutMaintenanceRecordsInput, AssetComponentUncheckedCreateWithoutMaintenanceRecordsInput>
    connectOrCreate?: AssetComponentCreateOrConnectWithoutMaintenanceRecordsInput
    upsert?: AssetComponentUpsertWithoutMaintenanceRecordsInput
    connect?: AssetComponentWhereUniqueInput
    update?: XOR<XOR<AssetComponentUpdateToOneWithWhereWithoutMaintenanceRecordsInput, AssetComponentUpdateWithoutMaintenanceRecordsInput>, AssetComponentUncheckedUpdateWithoutMaintenanceRecordsInput>
  }

  export type UserUpdateOneRequiredWithoutComponentMaintenanceNestedInput = {
    create?: XOR<UserCreateWithoutComponentMaintenanceInput, UserUncheckedCreateWithoutComponentMaintenanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutComponentMaintenanceInput
    upsert?: UserUpsertWithoutComponentMaintenanceInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutComponentMaintenanceInput, UserUpdateWithoutComponentMaintenanceInput>, UserUncheckedUpdateWithoutComponentMaintenanceInput>
  }

  export type AssetCreateNestedOneWithoutInventoriesInput = {
    create?: XOR<AssetCreateWithoutInventoriesInput, AssetUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutInventoriesInput
    connect?: AssetWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutInventoriesInput = {
    create?: XOR<DepartmentCreateWithoutInventoriesInput, DepartmentUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutInventoriesInput
    connect?: DepartmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCustodiedInventoriesInput = {
    create?: XOR<UserCreateWithoutCustodiedInventoriesInput, UserUncheckedCreateWithoutCustodiedInventoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustodiedInventoriesInput
    connect?: UserWhereUniqueInput
  }

  export type InventoryLoanCreateNestedManyWithoutInventoryInput = {
    create?: XOR<InventoryLoanCreateWithoutInventoryInput, InventoryLoanUncheckedCreateWithoutInventoryInput> | InventoryLoanCreateWithoutInventoryInput[] | InventoryLoanUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutInventoryInput | InventoryLoanCreateOrConnectWithoutInventoryInput[]
    createMany?: InventoryLoanCreateManyInventoryInputEnvelope
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
  }

  export type InventoryLoanUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<InventoryLoanCreateWithoutInventoryInput, InventoryLoanUncheckedCreateWithoutInventoryInput> | InventoryLoanCreateWithoutInventoryInput[] | InventoryLoanUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutInventoryInput | InventoryLoanCreateOrConnectWithoutInventoryInput[]
    createMany?: InventoryLoanCreateManyInventoryInputEnvelope
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
  }

  export type AssetUpdateOneRequiredWithoutInventoriesNestedInput = {
    create?: XOR<AssetCreateWithoutInventoriesInput, AssetUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutInventoriesInput
    upsert?: AssetUpsertWithoutInventoriesInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutInventoriesInput, AssetUpdateWithoutInventoriesInput>, AssetUncheckedUpdateWithoutInventoriesInput>
  }

  export type DepartmentUpdateOneRequiredWithoutInventoriesNestedInput = {
    create?: XOR<DepartmentCreateWithoutInventoriesInput, DepartmentUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutInventoriesInput
    upsert?: DepartmentUpsertWithoutInventoriesInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutInventoriesInput, DepartmentUpdateWithoutInventoriesInput>, DepartmentUncheckedUpdateWithoutInventoriesInput>
  }

  export type UserUpdateOneWithoutCustodiedInventoriesNestedInput = {
    create?: XOR<UserCreateWithoutCustodiedInventoriesInput, UserUncheckedCreateWithoutCustodiedInventoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustodiedInventoriesInput
    upsert?: UserUpsertWithoutCustodiedInventoriesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCustodiedInventoriesInput, UserUpdateWithoutCustodiedInventoriesInput>, UserUncheckedUpdateWithoutCustodiedInventoriesInput>
  }

  export type InventoryLoanUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<InventoryLoanCreateWithoutInventoryInput, InventoryLoanUncheckedCreateWithoutInventoryInput> | InventoryLoanCreateWithoutInventoryInput[] | InventoryLoanUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutInventoryInput | InventoryLoanCreateOrConnectWithoutInventoryInput[]
    upsert?: InventoryLoanUpsertWithWhereUniqueWithoutInventoryInput | InventoryLoanUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: InventoryLoanCreateManyInventoryInputEnvelope
    set?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    disconnect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    delete?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    update?: InventoryLoanUpdateWithWhereUniqueWithoutInventoryInput | InventoryLoanUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: InventoryLoanUpdateManyWithWhereWithoutInventoryInput | InventoryLoanUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: InventoryLoanScalarWhereInput | InventoryLoanScalarWhereInput[]
  }

  export type InventoryLoanUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<InventoryLoanCreateWithoutInventoryInput, InventoryLoanUncheckedCreateWithoutInventoryInput> | InventoryLoanCreateWithoutInventoryInput[] | InventoryLoanUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryLoanCreateOrConnectWithoutInventoryInput | InventoryLoanCreateOrConnectWithoutInventoryInput[]
    upsert?: InventoryLoanUpsertWithWhereUniqueWithoutInventoryInput | InventoryLoanUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: InventoryLoanCreateManyInventoryInputEnvelope
    set?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    disconnect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    delete?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    connect?: InventoryLoanWhereUniqueInput | InventoryLoanWhereUniqueInput[]
    update?: InventoryLoanUpdateWithWhereUniqueWithoutInventoryInput | InventoryLoanUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: InventoryLoanUpdateManyWithWhereWithoutInventoryInput | InventoryLoanUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: InventoryLoanScalarWhereInput | InventoryLoanScalarWhereInput[]
  }

  export type InventoryCreateNestedOneWithoutLoansInput = {
    create?: XOR<InventoryCreateWithoutLoansInput, InventoryUncheckedCreateWithoutLoansInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutLoansInput
    connect?: InventoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBorrowedLoansInput = {
    create?: XOR<UserCreateWithoutBorrowedLoansInput, UserUncheckedCreateWithoutBorrowedLoansInput>
    connectOrCreate?: UserCreateOrConnectWithoutBorrowedLoansInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovedLoansInput = {
    create?: XOR<UserCreateWithoutApprovedLoansInput, UserUncheckedCreateWithoutApprovedLoansInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedLoansInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutResponsibleLoansInput = {
    create?: XOR<UserCreateWithoutResponsibleLoansInput, UserUncheckedCreateWithoutResponsibleLoansInput>
    connectOrCreate?: UserCreateOrConnectWithoutResponsibleLoansInput
    connect?: UserWhereUniqueInput
  }

  export type InventoryUpdateOneRequiredWithoutLoansNestedInput = {
    create?: XOR<InventoryCreateWithoutLoansInput, InventoryUncheckedCreateWithoutLoansInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutLoansInput
    upsert?: InventoryUpsertWithoutLoansInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutLoansInput, InventoryUpdateWithoutLoansInput>, InventoryUncheckedUpdateWithoutLoansInput>
  }

  export type UserUpdateOneRequiredWithoutBorrowedLoansNestedInput = {
    create?: XOR<UserCreateWithoutBorrowedLoansInput, UserUncheckedCreateWithoutBorrowedLoansInput>
    connectOrCreate?: UserCreateOrConnectWithoutBorrowedLoansInput
    upsert?: UserUpsertWithoutBorrowedLoansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBorrowedLoansInput, UserUpdateWithoutBorrowedLoansInput>, UserUncheckedUpdateWithoutBorrowedLoansInput>
  }

  export type UserUpdateOneWithoutApprovedLoansNestedInput = {
    create?: XOR<UserCreateWithoutApprovedLoansInput, UserUncheckedCreateWithoutApprovedLoansInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedLoansInput
    upsert?: UserUpsertWithoutApprovedLoansInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovedLoansInput, UserUpdateWithoutApprovedLoansInput>, UserUncheckedUpdateWithoutApprovedLoansInput>
  }

  export type UserUpdateOneRequiredWithoutResponsibleLoansNestedInput = {
    create?: XOR<UserCreateWithoutResponsibleLoansInput, UserUncheckedCreateWithoutResponsibleLoansInput>
    connectOrCreate?: UserCreateOrConnectWithoutResponsibleLoansInput
    upsert?: UserUpsertWithoutResponsibleLoansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResponsibleLoansInput, UserUpdateWithoutResponsibleLoansInput>, UserUncheckedUpdateWithoutResponsibleLoansInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumAssetStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetStatusFilter<$PrismaModel> | $Enums.AssetStatus
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumAssetStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssetStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetStatusFilter<$PrismaModel>
    _max?: NestedEnumAssetStatusFilter<$PrismaModel>
  }

  export type NestedEnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type NestedEnumMaintenanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceStatusFilter<$PrismaModel> | $Enums.MaintenanceStatus
  }

  export type NestedEnumMaintenanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumAuditStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditStatus | EnumAuditStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditStatusFilter<$PrismaModel> | $Enums.AuditStatus
  }

  export type NestedEnumAuditStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditStatus | EnumAuditStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditStatusWithAggregatesFilter<$PrismaModel> | $Enums.AuditStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditStatusFilter<$PrismaModel>
    _max?: NestedEnumAuditStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumSparePartCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.SparePartCategory | EnumSparePartCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.SparePartCategory[] | ListEnumSparePartCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.SparePartCategory[] | ListEnumSparePartCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumSparePartCategoryFilter<$PrismaModel> | $Enums.SparePartCategory
  }

  export type NestedEnumSparePartTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SparePartType | EnumSparePartTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SparePartType[] | ListEnumSparePartTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SparePartType[] | ListEnumSparePartTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSparePartTypeFilter<$PrismaModel> | $Enums.SparePartType
  }

  export type NestedEnumSparePartStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SparePartStatus | EnumSparePartStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SparePartStatus[] | ListEnumSparePartStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SparePartStatus[] | ListEnumSparePartStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSparePartStatusFilter<$PrismaModel> | $Enums.SparePartStatus
  }

  export type NestedEnumSparePartCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SparePartCategory | EnumSparePartCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.SparePartCategory[] | ListEnumSparePartCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.SparePartCategory[] | ListEnumSparePartCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumSparePartCategoryWithAggregatesFilter<$PrismaModel> | $Enums.SparePartCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSparePartCategoryFilter<$PrismaModel>
    _max?: NestedEnumSparePartCategoryFilter<$PrismaModel>
  }

  export type NestedEnumSparePartTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SparePartType | EnumSparePartTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SparePartType[] | ListEnumSparePartTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SparePartType[] | ListEnumSparePartTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSparePartTypeWithAggregatesFilter<$PrismaModel> | $Enums.SparePartType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSparePartTypeFilter<$PrismaModel>
    _max?: NestedEnumSparePartTypeFilter<$PrismaModel>
  }

  export type NestedEnumSparePartStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SparePartStatus | EnumSparePartStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SparePartStatus[] | ListEnumSparePartStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SparePartStatus[] | ListEnumSparePartStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSparePartStatusWithAggregatesFilter<$PrismaModel> | $Enums.SparePartStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSparePartStatusFilter<$PrismaModel>
    _max?: NestedEnumSparePartStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumProcurementStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcurementStatus | EnumProcurementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProcurementStatus[] | ListEnumProcurementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcurementStatus[] | ListEnumProcurementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProcurementStatusFilter<$PrismaModel> | $Enums.ProcurementStatus
  }

  export type NestedEnumProcurementStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcurementStatus | EnumProcurementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProcurementStatus[] | ListEnumProcurementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcurementStatus[] | ListEnumProcurementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProcurementStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProcurementStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProcurementStatusFilter<$PrismaModel>
    _max?: NestedEnumProcurementStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPartUsageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PartUsageType | EnumPartUsageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PartUsageType[] | ListEnumPartUsageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PartUsageType[] | ListEnumPartUsageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPartUsageTypeFilter<$PrismaModel> | $Enums.PartUsageType
  }

  export type NestedEnumPartUsageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PartUsageType | EnumPartUsageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PartUsageType[] | ListEnumPartUsageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PartUsageType[] | ListEnumPartUsageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPartUsageTypeWithAggregatesFilter<$PrismaModel> | $Enums.PartUsageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPartUsageTypeFilter<$PrismaModel>
    _max?: NestedEnumPartUsageTypeFilter<$PrismaModel>
  }

  export type NestedEnumReplacementStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReplacementStatus | EnumReplacementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReplacementStatus[] | ListEnumReplacementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReplacementStatus[] | ListEnumReplacementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReplacementStatusFilter<$PrismaModel> | $Enums.ReplacementStatus
  }

  export type NestedEnumReplacementStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReplacementStatus | EnumReplacementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReplacementStatus[] | ListEnumReplacementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReplacementStatus[] | ListEnumReplacementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReplacementStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReplacementStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReplacementStatusFilter<$PrismaModel>
    _max?: NestedEnumReplacementStatusFilter<$PrismaModel>
  }

  export type NestedEnumRegistrationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RegistrationStatus | EnumRegistrationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRegistrationStatusFilter<$PrismaModel> | $Enums.RegistrationStatus
  }

  export type NestedEnumRegistrationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RegistrationStatus | EnumRegistrationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RegistrationStatus[] | ListEnumRegistrationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRegistrationStatusWithAggregatesFilter<$PrismaModel> | $Enums.RegistrationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRegistrationStatusFilter<$PrismaModel>
    _max?: NestedEnumRegistrationStatusFilter<$PrismaModel>
  }

  export type NestedEnumComponentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComponentStatus | EnumComponentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComponentStatusFilter<$PrismaModel> | $Enums.ComponentStatus
  }

  export type NestedEnumComponentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComponentStatus | EnumComponentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComponentStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComponentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComponentStatusFilter<$PrismaModel>
    _max?: NestedEnumComponentStatusFilter<$PrismaModel>
  }

  export type DepartmentCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    manager?: UserCreateNestedOneWithoutManagedDepartmentsInput
    assets?: AssetCreateNestedManyWithoutDepartmentInput
    assetRequests?: AssetRequestCreateNestedManyWithoutDepartmentInput
    inventories?: InventoryCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    managerId?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutDepartmentInput
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutDepartmentInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutUsersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
  }

  export type AssetRequestCreateWithoutRequesterInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutAssetRequestsInput
    asset?: AssetCreateNestedOneWithoutAssetRequestsInput
    approvedBy?: UserCreateNestedOneWithoutApprovedRequestsInput
  }

  export type AssetRequestUncheckedCreateWithoutRequesterInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    departmentId: string
    assetId?: string | null
    approvedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetRequestCreateOrConnectWithoutRequesterInput = {
    where: AssetRequestWhereUniqueInput
    create: XOR<AssetRequestCreateWithoutRequesterInput, AssetRequestUncheckedCreateWithoutRequesterInput>
  }

  export type AssetRequestCreateManyRequesterInputEnvelope = {
    data: AssetRequestCreateManyRequesterInput | AssetRequestCreateManyRequesterInput[]
    skipDuplicates?: boolean
  }

  export type AssetRequestCreateWithoutApprovedByInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutAssetRequestsInput
    department: DepartmentCreateNestedOneWithoutAssetRequestsInput
    asset?: AssetCreateNestedOneWithoutAssetRequestsInput
  }

  export type AssetRequestUncheckedCreateWithoutApprovedByInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    requesterId: string
    departmentId: string
    assetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetRequestCreateOrConnectWithoutApprovedByInput = {
    where: AssetRequestWhereUniqueInput
    create: XOR<AssetRequestCreateWithoutApprovedByInput, AssetRequestUncheckedCreateWithoutApprovedByInput>
  }

  export type AssetRequestCreateManyApprovedByInputEnvelope = {
    data: AssetRequestCreateManyApprovedByInput | AssetRequestCreateManyApprovedByInput[]
    skipDuplicates?: boolean
  }

  export type AssetCreateWithoutAssignedToInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutAssignedToInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutAssignedToInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutAssignedToInput, AssetUncheckedCreateWithoutAssignedToInput>
  }

  export type AssetCreateManyAssignedToInputEnvelope = {
    data: AssetCreateManyAssignedToInput | AssetCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceRecordCreateWithoutTechnicianInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutMaintenanceRecordsInput
    vendor?: VendorCreateNestedOneWithoutMaintenanceRecordsInput
    partUsages?: PartUsageCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceRecordUncheckedCreateWithoutTechnicianInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    assetId: string
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceRecordCreateOrConnectWithoutTechnicianInput = {
    where: MaintenanceRecordWhereUniqueInput
    create: XOR<MaintenanceRecordCreateWithoutTechnicianInput, MaintenanceRecordUncheckedCreateWithoutTechnicianInput>
  }

  export type MaintenanceRecordCreateManyTechnicianInputEnvelope = {
    data: MaintenanceRecordCreateManyTechnicianInput | MaintenanceRecordCreateManyTechnicianInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutManagerInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutDepartmentInput
    assets?: AssetCreateNestedManyWithoutDepartmentInput
    assetRequests?: AssetRequestCreateNestedManyWithoutDepartmentInput
    inventories?: InventoryCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutManagerInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    assets?: AssetUncheckedCreateNestedManyWithoutDepartmentInput
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutDepartmentInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutManagerInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutManagerInput, DepartmentUncheckedCreateWithoutManagerInput>
  }

  export type DepartmentCreateManyManagerInputEnvelope = {
    data: DepartmentCreateManyManagerInput | DepartmentCreateManyManagerInput[]
    skipDuplicates?: boolean
  }

  export type AuditRecordCreateWithoutAuditorInput = {
    id?: string
    auditType: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.AuditStatus
    findings?: string | null
    recommendations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset?: AssetCreateNestedOneWithoutAuditRecordsInput
  }

  export type AuditRecordUncheckedCreateWithoutAuditorInput = {
    id?: string
    auditType: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.AuditStatus
    findings?: string | null
    recommendations?: string | null
    assetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditRecordCreateOrConnectWithoutAuditorInput = {
    where: AuditRecordWhereUniqueInput
    create: XOR<AuditRecordCreateWithoutAuditorInput, AuditRecordUncheckedCreateWithoutAuditorInput>
  }

  export type AuditRecordCreateManyAuditorInputEnvelope = {
    data: AuditRecordCreateManyAuditorInput | AuditRecordCreateManyAuditorInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProcurementCreateWithoutOrderedByInput = {
    id?: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.ProcurementStatus
    orderedDate?: Date | string
    expectedDate?: Date | string | null
    receivedDate?: Date | string | null
    receivedQuantity?: number | null
    invoiceNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    part: SparePartCreateNestedOneWithoutProcurementsInput
    vendor?: VendorCreateNestedOneWithoutProcurementsInput
  }

  export type ProcurementUncheckedCreateWithoutOrderedByInput = {
    id?: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.ProcurementStatus
    orderedDate?: Date | string
    expectedDate?: Date | string | null
    receivedDate?: Date | string | null
    receivedQuantity?: number | null
    invoiceNumber?: string | null
    notes?: string | null
    partId: string
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProcurementCreateOrConnectWithoutOrderedByInput = {
    where: ProcurementWhereUniqueInput
    create: XOR<ProcurementCreateWithoutOrderedByInput, ProcurementUncheckedCreateWithoutOrderedByInput>
  }

  export type ProcurementCreateManyOrderedByInputEnvelope = {
    data: ProcurementCreateManyOrderedByInput | ProcurementCreateManyOrderedByInput[]
    skipDuplicates?: boolean
  }

  export type PartUsageCreateWithoutUsedByInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    part: SparePartCreateNestedOneWithoutUsagesInput
    asset?: AssetCreateNestedOneWithoutPartUsagesInput
    component?: AssetComponentCreateNestedOneWithoutUsagesInput
    maintenance?: MaintenanceRecordCreateNestedOneWithoutPartUsagesInput
  }

  export type PartUsageUncheckedCreateWithoutUsedByInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    partId: string
    assetId?: string | null
    componentId?: string | null
    maintenanceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartUsageCreateOrConnectWithoutUsedByInput = {
    where: PartUsageWhereUniqueInput
    create: XOR<PartUsageCreateWithoutUsedByInput, PartUsageUncheckedCreateWithoutUsedByInput>
  }

  export type PartUsageCreateManyUsedByInputEnvelope = {
    data: PartUsageCreateManyUsedByInput | PartUsageCreateManyUsedByInput[]
    skipDuplicates?: boolean
  }

  export type PartReplacementCreateWithoutPerformedByInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    oldPart?: SparePartCreateNestedOneWithoutOldReplacementsInput
    oldComponent?: AssetComponentCreateNestedOneWithoutReplacementsInput
    newPart: SparePartCreateNestedOneWithoutReplacementsInput
    asset: AssetCreateNestedOneWithoutPartReplacementsInput
  }

  export type PartReplacementUncheckedCreateWithoutPerformedByInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    oldPartId?: string | null
    oldComponentId?: string | null
    newPartId: string
    assetId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartReplacementCreateOrConnectWithoutPerformedByInput = {
    where: PartReplacementWhereUniqueInput
    create: XOR<PartReplacementCreateWithoutPerformedByInput, PartReplacementUncheckedCreateWithoutPerformedByInput>
  }

  export type PartReplacementCreateManyPerformedByInputEnvelope = {
    data: PartReplacementCreateManyPerformedByInput | PartReplacementCreateManyPerformedByInput[]
    skipDuplicates?: boolean
  }

  export type NewPartRegistrationCreateWithoutRegisteredByInput = {
    id?: string
    registrationNumber: string
    serialNumber?: string | null
    assetTag?: string | null
    status?: $Enums.RegistrationStatus
    registeredDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    part: SparePartCreateNestedOneWithoutRegistrationsInput
    asset?: AssetCreateNestedOneWithoutPartRegistrationsInput
  }

  export type NewPartRegistrationUncheckedCreateWithoutRegisteredByInput = {
    id?: string
    registrationNumber: string
    serialNumber?: string | null
    assetTag?: string | null
    status?: $Enums.RegistrationStatus
    registeredDate?: Date | string | null
    notes?: string | null
    partId: string
    assetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewPartRegistrationCreateOrConnectWithoutRegisteredByInput = {
    where: NewPartRegistrationWhereUniqueInput
    create: XOR<NewPartRegistrationCreateWithoutRegisteredByInput, NewPartRegistrationUncheckedCreateWithoutRegisteredByInput>
  }

  export type NewPartRegistrationCreateManyRegisteredByInputEnvelope = {
    data: NewPartRegistrationCreateManyRegisteredByInput | NewPartRegistrationCreateManyRegisteredByInput[]
    skipDuplicates?: boolean
  }

  export type ComponentTransferCreateWithoutTransferredByInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    component: AssetComponentCreateNestedOneWithoutTransfersInput
    fromAsset: AssetCreateNestedOneWithoutTransfersFromInput
    toAsset: AssetCreateNestedOneWithoutTransfersToInput
  }

  export type ComponentTransferUncheckedCreateWithoutTransferredByInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    componentId: string
    fromAssetId: string
    toAssetId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentTransferCreateOrConnectWithoutTransferredByInput = {
    where: ComponentTransferWhereUniqueInput
    create: XOR<ComponentTransferCreateWithoutTransferredByInput, ComponentTransferUncheckedCreateWithoutTransferredByInput>
  }

  export type ComponentTransferCreateManyTransferredByInputEnvelope = {
    data: ComponentTransferCreateManyTransferredByInput | ComponentTransferCreateManyTransferredByInput[]
    skipDuplicates?: boolean
  }

  export type ComponentMaintenanceCreateWithoutPerformedByInput = {
    id?: string
    description: string
    maintenanceType: string
    maintenanceDate?: Date | string
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    component: AssetComponentCreateNestedOneWithoutMaintenanceRecordsInput
  }

  export type ComponentMaintenanceUncheckedCreateWithoutPerformedByInput = {
    id?: string
    description: string
    maintenanceType: string
    maintenanceDate?: Date | string
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    componentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentMaintenanceCreateOrConnectWithoutPerformedByInput = {
    where: ComponentMaintenanceWhereUniqueInput
    create: XOR<ComponentMaintenanceCreateWithoutPerformedByInput, ComponentMaintenanceUncheckedCreateWithoutPerformedByInput>
  }

  export type ComponentMaintenanceCreateManyPerformedByInputEnvelope = {
    data: ComponentMaintenanceCreateManyPerformedByInput | ComponentMaintenanceCreateManyPerformedByInput[]
    skipDuplicates?: boolean
  }

  export type InventoryCreateWithoutCustodianInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutInventoriesInput
    department: DepartmentCreateNestedOneWithoutInventoriesInput
    loans?: InventoryLoanCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutCustodianInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    assetId: string
    departmentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    loans?: InventoryLoanUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutCustodianInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutCustodianInput, InventoryUncheckedCreateWithoutCustodianInput>
  }

  export type InventoryCreateManyCustodianInputEnvelope = {
    data: InventoryCreateManyCustodianInput | InventoryCreateManyCustodianInput[]
    skipDuplicates?: boolean
  }

  export type InventoryLoanCreateWithoutBorrowerInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory: InventoryCreateNestedOneWithoutLoansInput
    approvedBy?: UserCreateNestedOneWithoutApprovedLoansInput
    responsible: UserCreateNestedOneWithoutResponsibleLoansInput
  }

  export type InventoryLoanUncheckedCreateWithoutBorrowerInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    inventoryId: string
    approvedById?: string | null
    responsibleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryLoanCreateOrConnectWithoutBorrowerInput = {
    where: InventoryLoanWhereUniqueInput
    create: XOR<InventoryLoanCreateWithoutBorrowerInput, InventoryLoanUncheckedCreateWithoutBorrowerInput>
  }

  export type InventoryLoanCreateManyBorrowerInputEnvelope = {
    data: InventoryLoanCreateManyBorrowerInput | InventoryLoanCreateManyBorrowerInput[]
    skipDuplicates?: boolean
  }

  export type InventoryLoanCreateWithoutApprovedByInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory: InventoryCreateNestedOneWithoutLoansInput
    borrower: UserCreateNestedOneWithoutBorrowedLoansInput
    responsible: UserCreateNestedOneWithoutResponsibleLoansInput
  }

  export type InventoryLoanUncheckedCreateWithoutApprovedByInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    inventoryId: string
    borrowerId: string
    responsibleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryLoanCreateOrConnectWithoutApprovedByInput = {
    where: InventoryLoanWhereUniqueInput
    create: XOR<InventoryLoanCreateWithoutApprovedByInput, InventoryLoanUncheckedCreateWithoutApprovedByInput>
  }

  export type InventoryLoanCreateManyApprovedByInputEnvelope = {
    data: InventoryLoanCreateManyApprovedByInput | InventoryLoanCreateManyApprovedByInput[]
    skipDuplicates?: boolean
  }

  export type InventoryLoanCreateWithoutResponsibleInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inventory: InventoryCreateNestedOneWithoutLoansInput
    borrower: UserCreateNestedOneWithoutBorrowedLoansInput
    approvedBy?: UserCreateNestedOneWithoutApprovedLoansInput
  }

  export type InventoryLoanUncheckedCreateWithoutResponsibleInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    inventoryId: string
    borrowerId: string
    approvedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryLoanCreateOrConnectWithoutResponsibleInput = {
    where: InventoryLoanWhereUniqueInput
    create: XOR<InventoryLoanCreateWithoutResponsibleInput, InventoryLoanUncheckedCreateWithoutResponsibleInput>
  }

  export type InventoryLoanCreateManyResponsibleInputEnvelope = {
    data: InventoryLoanCreateManyResponsibleInput | InventoryLoanCreateManyResponsibleInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentUpsertWithoutUsersInput = {
    update: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutUsersInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manager?: UserUpdateOneWithoutManagedDepartmentsNestedInput
    assets?: AssetUpdateManyWithoutDepartmentNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutDepartmentNestedInput
    inventories?: InventoryUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutDepartmentNestedInput
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutDepartmentNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type AssetRequestUpsertWithWhereUniqueWithoutRequesterInput = {
    where: AssetRequestWhereUniqueInput
    update: XOR<AssetRequestUpdateWithoutRequesterInput, AssetRequestUncheckedUpdateWithoutRequesterInput>
    create: XOR<AssetRequestCreateWithoutRequesterInput, AssetRequestUncheckedCreateWithoutRequesterInput>
  }

  export type AssetRequestUpdateWithWhereUniqueWithoutRequesterInput = {
    where: AssetRequestWhereUniqueInput
    data: XOR<AssetRequestUpdateWithoutRequesterInput, AssetRequestUncheckedUpdateWithoutRequesterInput>
  }

  export type AssetRequestUpdateManyWithWhereWithoutRequesterInput = {
    where: AssetRequestScalarWhereInput
    data: XOR<AssetRequestUpdateManyMutationInput, AssetRequestUncheckedUpdateManyWithoutRequesterInput>
  }

  export type AssetRequestScalarWhereInput = {
    AND?: AssetRequestScalarWhereInput | AssetRequestScalarWhereInput[]
    OR?: AssetRequestScalarWhereInput[]
    NOT?: AssetRequestScalarWhereInput | AssetRequestScalarWhereInput[]
    id?: StringFilter<"AssetRequest"> | string
    requestNumber?: StringFilter<"AssetRequest"> | string
    description?: StringFilter<"AssetRequest"> | string
    justification?: StringFilter<"AssetRequest"> | string
    priority?: StringFilter<"AssetRequest"> | string
    status?: EnumRequestStatusFilter<"AssetRequest"> | $Enums.RequestStatus
    requestedDate?: DateTimeFilter<"AssetRequest"> | Date | string
    approvedDate?: DateTimeNullableFilter<"AssetRequest"> | Date | string | null
    allocatedDate?: DateTimeNullableFilter<"AssetRequest"> | Date | string | null
    rejectionReason?: StringNullableFilter<"AssetRequest"> | string | null
    notes?: StringNullableFilter<"AssetRequest"> | string | null
    requesterId?: StringFilter<"AssetRequest"> | string
    departmentId?: StringFilter<"AssetRequest"> | string
    assetId?: StringNullableFilter<"AssetRequest"> | string | null
    approvedById?: StringNullableFilter<"AssetRequest"> | string | null
    createdAt?: DateTimeFilter<"AssetRequest"> | Date | string
    updatedAt?: DateTimeFilter<"AssetRequest"> | Date | string
  }

  export type AssetRequestUpsertWithWhereUniqueWithoutApprovedByInput = {
    where: AssetRequestWhereUniqueInput
    update: XOR<AssetRequestUpdateWithoutApprovedByInput, AssetRequestUncheckedUpdateWithoutApprovedByInput>
    create: XOR<AssetRequestCreateWithoutApprovedByInput, AssetRequestUncheckedCreateWithoutApprovedByInput>
  }

  export type AssetRequestUpdateWithWhereUniqueWithoutApprovedByInput = {
    where: AssetRequestWhereUniqueInput
    data: XOR<AssetRequestUpdateWithoutApprovedByInput, AssetRequestUncheckedUpdateWithoutApprovedByInput>
  }

  export type AssetRequestUpdateManyWithWhereWithoutApprovedByInput = {
    where: AssetRequestScalarWhereInput
    data: XOR<AssetRequestUpdateManyMutationInput, AssetRequestUncheckedUpdateManyWithoutApprovedByInput>
  }

  export type AssetUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutAssignedToInput, AssetUncheckedUpdateWithoutAssignedToInput>
    create: XOR<AssetCreateWithoutAssignedToInput, AssetUncheckedCreateWithoutAssignedToInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutAssignedToInput, AssetUncheckedUpdateWithoutAssignedToInput>
  }

  export type AssetUpdateManyWithWhereWithoutAssignedToInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type AssetScalarWhereInput = {
    AND?: AssetScalarWhereInput | AssetScalarWhereInput[]
    OR?: AssetScalarWhereInput[]
    NOT?: AssetScalarWhereInput | AssetScalarWhereInput[]
    id?: StringFilter<"Asset"> | string
    assetTag?: StringFilter<"Asset"> | string
    name?: StringFilter<"Asset"> | string
    description?: StringNullableFilter<"Asset"> | string | null
    serialNumber?: StringNullableFilter<"Asset"> | string | null
    model?: StringNullableFilter<"Asset"> | string | null
    brand?: StringNullableFilter<"Asset"> | string | null
    purchaseDate?: DateTimeNullableFilter<"Asset"> | Date | string | null
    purchasePrice?: DecimalNullableFilter<"Asset"> | Decimal | DecimalJsLike | number | string | null
    currentValue?: DecimalNullableFilter<"Asset"> | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: DateTimeNullableFilter<"Asset"> | Date | string | null
    status?: EnumAssetStatusFilter<"Asset"> | $Enums.AssetStatus
    condition?: StringNullableFilter<"Asset"> | string | null
    notes?: StringNullableFilter<"Asset"> | string | null
    isActive?: BoolFilter<"Asset"> | boolean
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    categoryId?: StringFilter<"Asset"> | string
    vendorId?: StringNullableFilter<"Asset"> | string | null
    locationId?: StringNullableFilter<"Asset"> | string | null
    departmentId?: StringNullableFilter<"Asset"> | string | null
    assignedToId?: StringNullableFilter<"Asset"> | string | null
  }

  export type MaintenanceRecordUpsertWithWhereUniqueWithoutTechnicianInput = {
    where: MaintenanceRecordWhereUniqueInput
    update: XOR<MaintenanceRecordUpdateWithoutTechnicianInput, MaintenanceRecordUncheckedUpdateWithoutTechnicianInput>
    create: XOR<MaintenanceRecordCreateWithoutTechnicianInput, MaintenanceRecordUncheckedCreateWithoutTechnicianInput>
  }

  export type MaintenanceRecordUpdateWithWhereUniqueWithoutTechnicianInput = {
    where: MaintenanceRecordWhereUniqueInput
    data: XOR<MaintenanceRecordUpdateWithoutTechnicianInput, MaintenanceRecordUncheckedUpdateWithoutTechnicianInput>
  }

  export type MaintenanceRecordUpdateManyWithWhereWithoutTechnicianInput = {
    where: MaintenanceRecordScalarWhereInput
    data: XOR<MaintenanceRecordUpdateManyMutationInput, MaintenanceRecordUncheckedUpdateManyWithoutTechnicianInput>
  }

  export type MaintenanceRecordScalarWhereInput = {
    AND?: MaintenanceRecordScalarWhereInput | MaintenanceRecordScalarWhereInput[]
    OR?: MaintenanceRecordScalarWhereInput[]
    NOT?: MaintenanceRecordScalarWhereInput | MaintenanceRecordScalarWhereInput[]
    id?: StringFilter<"MaintenanceRecord"> | string
    maintenanceType?: StringFilter<"MaintenanceRecord"> | string
    description?: StringFilter<"MaintenanceRecord"> | string
    scheduledDate?: DateTimeFilter<"MaintenanceRecord"> | Date | string
    completedDate?: DateTimeNullableFilter<"MaintenanceRecord"> | Date | string | null
    status?: EnumMaintenanceStatusFilter<"MaintenanceRecord"> | $Enums.MaintenanceStatus
    cost?: DecimalNullableFilter<"MaintenanceRecord"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"MaintenanceRecord"> | string | null
    assetId?: StringFilter<"MaintenanceRecord"> | string
    technicianId?: StringNullableFilter<"MaintenanceRecord"> | string | null
    vendorId?: StringNullableFilter<"MaintenanceRecord"> | string | null
    createdAt?: DateTimeFilter<"MaintenanceRecord"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceRecord"> | Date | string
  }

  export type DepartmentUpsertWithWhereUniqueWithoutManagerInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutManagerInput, DepartmentUncheckedUpdateWithoutManagerInput>
    create: XOR<DepartmentCreateWithoutManagerInput, DepartmentUncheckedCreateWithoutManagerInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutManagerInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutManagerInput, DepartmentUncheckedUpdateWithoutManagerInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutManagerInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutManagerInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    code?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    managerId?: StringNullableFilter<"Department"> | string | null
    budgetLimit?: DecimalNullableFilter<"Department"> | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFilter<"Department"> | boolean
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
  }

  export type AuditRecordUpsertWithWhereUniqueWithoutAuditorInput = {
    where: AuditRecordWhereUniqueInput
    update: XOR<AuditRecordUpdateWithoutAuditorInput, AuditRecordUncheckedUpdateWithoutAuditorInput>
    create: XOR<AuditRecordCreateWithoutAuditorInput, AuditRecordUncheckedCreateWithoutAuditorInput>
  }

  export type AuditRecordUpdateWithWhereUniqueWithoutAuditorInput = {
    where: AuditRecordWhereUniqueInput
    data: XOR<AuditRecordUpdateWithoutAuditorInput, AuditRecordUncheckedUpdateWithoutAuditorInput>
  }

  export type AuditRecordUpdateManyWithWhereWithoutAuditorInput = {
    where: AuditRecordScalarWhereInput
    data: XOR<AuditRecordUpdateManyMutationInput, AuditRecordUncheckedUpdateManyWithoutAuditorInput>
  }

  export type AuditRecordScalarWhereInput = {
    AND?: AuditRecordScalarWhereInput | AuditRecordScalarWhereInput[]
    OR?: AuditRecordScalarWhereInput[]
    NOT?: AuditRecordScalarWhereInput | AuditRecordScalarWhereInput[]
    id?: StringFilter<"AuditRecord"> | string
    auditType?: StringFilter<"AuditRecord"> | string
    scheduledDate?: DateTimeFilter<"AuditRecord"> | Date | string
    completedDate?: DateTimeNullableFilter<"AuditRecord"> | Date | string | null
    status?: EnumAuditStatusFilter<"AuditRecord"> | $Enums.AuditStatus
    findings?: StringNullableFilter<"AuditRecord"> | string | null
    recommendations?: StringNullableFilter<"AuditRecord"> | string | null
    assetId?: StringNullableFilter<"AuditRecord"> | string | null
    auditorId?: StringFilter<"AuditRecord"> | string
    createdAt?: DateTimeFilter<"AuditRecord"> | Date | string
    updatedAt?: DateTimeFilter<"AuditRecord"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type ProcurementUpsertWithWhereUniqueWithoutOrderedByInput = {
    where: ProcurementWhereUniqueInput
    update: XOR<ProcurementUpdateWithoutOrderedByInput, ProcurementUncheckedUpdateWithoutOrderedByInput>
    create: XOR<ProcurementCreateWithoutOrderedByInput, ProcurementUncheckedCreateWithoutOrderedByInput>
  }

  export type ProcurementUpdateWithWhereUniqueWithoutOrderedByInput = {
    where: ProcurementWhereUniqueInput
    data: XOR<ProcurementUpdateWithoutOrderedByInput, ProcurementUncheckedUpdateWithoutOrderedByInput>
  }

  export type ProcurementUpdateManyWithWhereWithoutOrderedByInput = {
    where: ProcurementScalarWhereInput
    data: XOR<ProcurementUpdateManyMutationInput, ProcurementUncheckedUpdateManyWithoutOrderedByInput>
  }

  export type ProcurementScalarWhereInput = {
    AND?: ProcurementScalarWhereInput | ProcurementScalarWhereInput[]
    OR?: ProcurementScalarWhereInput[]
    NOT?: ProcurementScalarWhereInput | ProcurementScalarWhereInput[]
    id?: StringFilter<"Procurement"> | string
    procurementNumber?: StringFilter<"Procurement"> | string
    quantity?: IntFilter<"Procurement"> | number
    unitPrice?: DecimalFilter<"Procurement"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFilter<"Procurement"> | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFilter<"Procurement"> | $Enums.ProcurementStatus
    orderedDate?: DateTimeFilter<"Procurement"> | Date | string
    expectedDate?: DateTimeNullableFilter<"Procurement"> | Date | string | null
    receivedDate?: DateTimeNullableFilter<"Procurement"> | Date | string | null
    receivedQuantity?: IntNullableFilter<"Procurement"> | number | null
    invoiceNumber?: StringNullableFilter<"Procurement"> | string | null
    notes?: StringNullableFilter<"Procurement"> | string | null
    partId?: StringFilter<"Procurement"> | string
    vendorId?: StringNullableFilter<"Procurement"> | string | null
    orderedById?: StringFilter<"Procurement"> | string
    createdAt?: DateTimeFilter<"Procurement"> | Date | string
    updatedAt?: DateTimeFilter<"Procurement"> | Date | string
  }

  export type PartUsageUpsertWithWhereUniqueWithoutUsedByInput = {
    where: PartUsageWhereUniqueInput
    update: XOR<PartUsageUpdateWithoutUsedByInput, PartUsageUncheckedUpdateWithoutUsedByInput>
    create: XOR<PartUsageCreateWithoutUsedByInput, PartUsageUncheckedCreateWithoutUsedByInput>
  }

  export type PartUsageUpdateWithWhereUniqueWithoutUsedByInput = {
    where: PartUsageWhereUniqueInput
    data: XOR<PartUsageUpdateWithoutUsedByInput, PartUsageUncheckedUpdateWithoutUsedByInput>
  }

  export type PartUsageUpdateManyWithWhereWithoutUsedByInput = {
    where: PartUsageScalarWhereInput
    data: XOR<PartUsageUpdateManyMutationInput, PartUsageUncheckedUpdateManyWithoutUsedByInput>
  }

  export type PartUsageScalarWhereInput = {
    AND?: PartUsageScalarWhereInput | PartUsageScalarWhereInput[]
    OR?: PartUsageScalarWhereInput[]
    NOT?: PartUsageScalarWhereInput | PartUsageScalarWhereInput[]
    id?: StringFilter<"PartUsage"> | string
    quantity?: IntFilter<"PartUsage"> | number
    usageType?: EnumPartUsageTypeFilter<"PartUsage"> | $Enums.PartUsageType
    usageDate?: DateTimeFilter<"PartUsage"> | Date | string
    notes?: StringNullableFilter<"PartUsage"> | string | null
    partId?: StringFilter<"PartUsage"> | string
    assetId?: StringNullableFilter<"PartUsage"> | string | null
    componentId?: StringNullableFilter<"PartUsage"> | string | null
    maintenanceId?: StringNullableFilter<"PartUsage"> | string | null
    usedById?: StringFilter<"PartUsage"> | string
    createdAt?: DateTimeFilter<"PartUsage"> | Date | string
    updatedAt?: DateTimeFilter<"PartUsage"> | Date | string
  }

  export type PartReplacementUpsertWithWhereUniqueWithoutPerformedByInput = {
    where: PartReplacementWhereUniqueInput
    update: XOR<PartReplacementUpdateWithoutPerformedByInput, PartReplacementUncheckedUpdateWithoutPerformedByInput>
    create: XOR<PartReplacementCreateWithoutPerformedByInput, PartReplacementUncheckedCreateWithoutPerformedByInput>
  }

  export type PartReplacementUpdateWithWhereUniqueWithoutPerformedByInput = {
    where: PartReplacementWhereUniqueInput
    data: XOR<PartReplacementUpdateWithoutPerformedByInput, PartReplacementUncheckedUpdateWithoutPerformedByInput>
  }

  export type PartReplacementUpdateManyWithWhereWithoutPerformedByInput = {
    where: PartReplacementScalarWhereInput
    data: XOR<PartReplacementUpdateManyMutationInput, PartReplacementUncheckedUpdateManyWithoutPerformedByInput>
  }

  export type PartReplacementScalarWhereInput = {
    AND?: PartReplacementScalarWhereInput | PartReplacementScalarWhereInput[]
    OR?: PartReplacementScalarWhereInput[]
    NOT?: PartReplacementScalarWhereInput | PartReplacementScalarWhereInput[]
    id?: StringFilter<"PartReplacement"> | string
    replacementNumber?: StringFilter<"PartReplacement"> | string
    reason?: StringFilter<"PartReplacement"> | string
    status?: EnumReplacementStatusFilter<"PartReplacement"> | $Enums.ReplacementStatus
    plannedDate?: DateTimeNullableFilter<"PartReplacement"> | Date | string | null
    completedDate?: DateTimeNullableFilter<"PartReplacement"> | Date | string | null
    cost?: DecimalNullableFilter<"PartReplacement"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"PartReplacement"> | string | null
    oldPartId?: StringNullableFilter<"PartReplacement"> | string | null
    oldComponentId?: StringNullableFilter<"PartReplacement"> | string | null
    newPartId?: StringFilter<"PartReplacement"> | string
    assetId?: StringFilter<"PartReplacement"> | string
    performedById?: StringNullableFilter<"PartReplacement"> | string | null
    createdAt?: DateTimeFilter<"PartReplacement"> | Date | string
    updatedAt?: DateTimeFilter<"PartReplacement"> | Date | string
  }

  export type NewPartRegistrationUpsertWithWhereUniqueWithoutRegisteredByInput = {
    where: NewPartRegistrationWhereUniqueInput
    update: XOR<NewPartRegistrationUpdateWithoutRegisteredByInput, NewPartRegistrationUncheckedUpdateWithoutRegisteredByInput>
    create: XOR<NewPartRegistrationCreateWithoutRegisteredByInput, NewPartRegistrationUncheckedCreateWithoutRegisteredByInput>
  }

  export type NewPartRegistrationUpdateWithWhereUniqueWithoutRegisteredByInput = {
    where: NewPartRegistrationWhereUniqueInput
    data: XOR<NewPartRegistrationUpdateWithoutRegisteredByInput, NewPartRegistrationUncheckedUpdateWithoutRegisteredByInput>
  }

  export type NewPartRegistrationUpdateManyWithWhereWithoutRegisteredByInput = {
    where: NewPartRegistrationScalarWhereInput
    data: XOR<NewPartRegistrationUpdateManyMutationInput, NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByInput>
  }

  export type NewPartRegistrationScalarWhereInput = {
    AND?: NewPartRegistrationScalarWhereInput | NewPartRegistrationScalarWhereInput[]
    OR?: NewPartRegistrationScalarWhereInput[]
    NOT?: NewPartRegistrationScalarWhereInput | NewPartRegistrationScalarWhereInput[]
    id?: StringFilter<"NewPartRegistration"> | string
    registrationNumber?: StringFilter<"NewPartRegistration"> | string
    serialNumber?: StringNullableFilter<"NewPartRegistration"> | string | null
    assetTag?: StringNullableFilter<"NewPartRegistration"> | string | null
    status?: EnumRegistrationStatusFilter<"NewPartRegistration"> | $Enums.RegistrationStatus
    registeredDate?: DateTimeNullableFilter<"NewPartRegistration"> | Date | string | null
    notes?: StringNullableFilter<"NewPartRegistration"> | string | null
    partId?: StringFilter<"NewPartRegistration"> | string
    assetId?: StringNullableFilter<"NewPartRegistration"> | string | null
    registeredById?: StringFilter<"NewPartRegistration"> | string
    createdAt?: DateTimeFilter<"NewPartRegistration"> | Date | string
    updatedAt?: DateTimeFilter<"NewPartRegistration"> | Date | string
  }

  export type ComponentTransferUpsertWithWhereUniqueWithoutTransferredByInput = {
    where: ComponentTransferWhereUniqueInput
    update: XOR<ComponentTransferUpdateWithoutTransferredByInput, ComponentTransferUncheckedUpdateWithoutTransferredByInput>
    create: XOR<ComponentTransferCreateWithoutTransferredByInput, ComponentTransferUncheckedCreateWithoutTransferredByInput>
  }

  export type ComponentTransferUpdateWithWhereUniqueWithoutTransferredByInput = {
    where: ComponentTransferWhereUniqueInput
    data: XOR<ComponentTransferUpdateWithoutTransferredByInput, ComponentTransferUncheckedUpdateWithoutTransferredByInput>
  }

  export type ComponentTransferUpdateManyWithWhereWithoutTransferredByInput = {
    where: ComponentTransferScalarWhereInput
    data: XOR<ComponentTransferUpdateManyMutationInput, ComponentTransferUncheckedUpdateManyWithoutTransferredByInput>
  }

  export type ComponentTransferScalarWhereInput = {
    AND?: ComponentTransferScalarWhereInput | ComponentTransferScalarWhereInput[]
    OR?: ComponentTransferScalarWhereInput[]
    NOT?: ComponentTransferScalarWhereInput | ComponentTransferScalarWhereInput[]
    id?: StringFilter<"ComponentTransfer"> | string
    transferNumber?: StringFilter<"ComponentTransfer"> | string
    reason?: StringFilter<"ComponentTransfer"> | string
    transferDate?: DateTimeFilter<"ComponentTransfer"> | Date | string
    notes?: StringNullableFilter<"ComponentTransfer"> | string | null
    componentId?: StringFilter<"ComponentTransfer"> | string
    fromAssetId?: StringFilter<"ComponentTransfer"> | string
    toAssetId?: StringFilter<"ComponentTransfer"> | string
    transferredById?: StringFilter<"ComponentTransfer"> | string
    createdAt?: DateTimeFilter<"ComponentTransfer"> | Date | string
    updatedAt?: DateTimeFilter<"ComponentTransfer"> | Date | string
  }

  export type ComponentMaintenanceUpsertWithWhereUniqueWithoutPerformedByInput = {
    where: ComponentMaintenanceWhereUniqueInput
    update: XOR<ComponentMaintenanceUpdateWithoutPerformedByInput, ComponentMaintenanceUncheckedUpdateWithoutPerformedByInput>
    create: XOR<ComponentMaintenanceCreateWithoutPerformedByInput, ComponentMaintenanceUncheckedCreateWithoutPerformedByInput>
  }

  export type ComponentMaintenanceUpdateWithWhereUniqueWithoutPerformedByInput = {
    where: ComponentMaintenanceWhereUniqueInput
    data: XOR<ComponentMaintenanceUpdateWithoutPerformedByInput, ComponentMaintenanceUncheckedUpdateWithoutPerformedByInput>
  }

  export type ComponentMaintenanceUpdateManyWithWhereWithoutPerformedByInput = {
    where: ComponentMaintenanceScalarWhereInput
    data: XOR<ComponentMaintenanceUpdateManyMutationInput, ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByInput>
  }

  export type ComponentMaintenanceScalarWhereInput = {
    AND?: ComponentMaintenanceScalarWhereInput | ComponentMaintenanceScalarWhereInput[]
    OR?: ComponentMaintenanceScalarWhereInput[]
    NOT?: ComponentMaintenanceScalarWhereInput | ComponentMaintenanceScalarWhereInput[]
    id?: StringFilter<"ComponentMaintenance"> | string
    description?: StringFilter<"ComponentMaintenance"> | string
    maintenanceType?: StringFilter<"ComponentMaintenance"> | string
    maintenanceDate?: DateTimeFilter<"ComponentMaintenance"> | Date | string
    cost?: DecimalNullableFilter<"ComponentMaintenance"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"ComponentMaintenance"> | string | null
    componentId?: StringFilter<"ComponentMaintenance"> | string
    performedById?: StringFilter<"ComponentMaintenance"> | string
    createdAt?: DateTimeFilter<"ComponentMaintenance"> | Date | string
    updatedAt?: DateTimeFilter<"ComponentMaintenance"> | Date | string
  }

  export type InventoryUpsertWithWhereUniqueWithoutCustodianInput = {
    where: InventoryWhereUniqueInput
    update: XOR<InventoryUpdateWithoutCustodianInput, InventoryUncheckedUpdateWithoutCustodianInput>
    create: XOR<InventoryCreateWithoutCustodianInput, InventoryUncheckedCreateWithoutCustodianInput>
  }

  export type InventoryUpdateWithWhereUniqueWithoutCustodianInput = {
    where: InventoryWhereUniqueInput
    data: XOR<InventoryUpdateWithoutCustodianInput, InventoryUncheckedUpdateWithoutCustodianInput>
  }

  export type InventoryUpdateManyWithWhereWithoutCustodianInput = {
    where: InventoryScalarWhereInput
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyWithoutCustodianInput>
  }

  export type InventoryScalarWhereInput = {
    AND?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
    OR?: InventoryScalarWhereInput[]
    NOT?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
    id?: StringFilter<"Inventory"> | string
    inventoryTag?: StringFilter<"Inventory"> | string
    quantity?: IntFilter<"Inventory"> | number
    availableQty?: IntFilter<"Inventory"> | number
    condition?: StringFilter<"Inventory"> | string
    status?: StringFilter<"Inventory"> | string
    location?: StringNullableFilter<"Inventory"> | string | null
    notes?: StringNullableFilter<"Inventory"> | string | null
    minStockLevel?: IntNullableFilter<"Inventory"> | number | null
    assetId?: StringFilter<"Inventory"> | string
    departmentId?: StringFilter<"Inventory"> | string
    custodianId?: StringNullableFilter<"Inventory"> | string | null
    createdAt?: DateTimeFilter<"Inventory"> | Date | string
    updatedAt?: DateTimeFilter<"Inventory"> | Date | string
  }

  export type InventoryLoanUpsertWithWhereUniqueWithoutBorrowerInput = {
    where: InventoryLoanWhereUniqueInput
    update: XOR<InventoryLoanUpdateWithoutBorrowerInput, InventoryLoanUncheckedUpdateWithoutBorrowerInput>
    create: XOR<InventoryLoanCreateWithoutBorrowerInput, InventoryLoanUncheckedCreateWithoutBorrowerInput>
  }

  export type InventoryLoanUpdateWithWhereUniqueWithoutBorrowerInput = {
    where: InventoryLoanWhereUniqueInput
    data: XOR<InventoryLoanUpdateWithoutBorrowerInput, InventoryLoanUncheckedUpdateWithoutBorrowerInput>
  }

  export type InventoryLoanUpdateManyWithWhereWithoutBorrowerInput = {
    where: InventoryLoanScalarWhereInput
    data: XOR<InventoryLoanUpdateManyMutationInput, InventoryLoanUncheckedUpdateManyWithoutBorrowerInput>
  }

  export type InventoryLoanScalarWhereInput = {
    AND?: InventoryLoanScalarWhereInput | InventoryLoanScalarWhereInput[]
    OR?: InventoryLoanScalarWhereInput[]
    NOT?: InventoryLoanScalarWhereInput | InventoryLoanScalarWhereInput[]
    id?: StringFilter<"InventoryLoan"> | string
    loanNumber?: StringFilter<"InventoryLoan"> | string
    purpose?: StringFilter<"InventoryLoan"> | string
    quantity?: IntFilter<"InventoryLoan"> | number
    loanDate?: DateTimeFilter<"InventoryLoan"> | Date | string
    expectedReturnDate?: DateTimeFilter<"InventoryLoan"> | Date | string
    actualReturnDate?: DateTimeNullableFilter<"InventoryLoan"> | Date | string | null
    status?: StringFilter<"InventoryLoan"> | string
    condition?: StringNullableFilter<"InventoryLoan"> | string | null
    notes?: StringNullableFilter<"InventoryLoan"> | string | null
    approvalNotes?: StringNullableFilter<"InventoryLoan"> | string | null
    inventoryId?: StringFilter<"InventoryLoan"> | string
    borrowerId?: StringFilter<"InventoryLoan"> | string
    approvedById?: StringNullableFilter<"InventoryLoan"> | string | null
    responsibleId?: StringFilter<"InventoryLoan"> | string
    createdAt?: DateTimeFilter<"InventoryLoan"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryLoan"> | Date | string
  }

  export type InventoryLoanUpsertWithWhereUniqueWithoutApprovedByInput = {
    where: InventoryLoanWhereUniqueInput
    update: XOR<InventoryLoanUpdateWithoutApprovedByInput, InventoryLoanUncheckedUpdateWithoutApprovedByInput>
    create: XOR<InventoryLoanCreateWithoutApprovedByInput, InventoryLoanUncheckedCreateWithoutApprovedByInput>
  }

  export type InventoryLoanUpdateWithWhereUniqueWithoutApprovedByInput = {
    where: InventoryLoanWhereUniqueInput
    data: XOR<InventoryLoanUpdateWithoutApprovedByInput, InventoryLoanUncheckedUpdateWithoutApprovedByInput>
  }

  export type InventoryLoanUpdateManyWithWhereWithoutApprovedByInput = {
    where: InventoryLoanScalarWhereInput
    data: XOR<InventoryLoanUpdateManyMutationInput, InventoryLoanUncheckedUpdateManyWithoutApprovedByInput>
  }

  export type InventoryLoanUpsertWithWhereUniqueWithoutResponsibleInput = {
    where: InventoryLoanWhereUniqueInput
    update: XOR<InventoryLoanUpdateWithoutResponsibleInput, InventoryLoanUncheckedUpdateWithoutResponsibleInput>
    create: XOR<InventoryLoanCreateWithoutResponsibleInput, InventoryLoanUncheckedCreateWithoutResponsibleInput>
  }

  export type InventoryLoanUpdateWithWhereUniqueWithoutResponsibleInput = {
    where: InventoryLoanWhereUniqueInput
    data: XOR<InventoryLoanUpdateWithoutResponsibleInput, InventoryLoanUncheckedUpdateWithoutResponsibleInput>
  }

  export type InventoryLoanUpdateManyWithWhereWithoutResponsibleInput = {
    where: InventoryLoanScalarWhereInput
    data: XOR<InventoryLoanUpdateManyMutationInput, InventoryLoanUncheckedUpdateManyWithoutResponsibleInput>
  }

  export type UserCreateWithoutManagedDepartmentsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutManagedDepartmentsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutManagedDepartmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutManagedDepartmentsInput, UserUncheckedCreateWithoutManagedDepartmentsInput>
  }

  export type UserCreateWithoutDepartmentInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutDepartmentInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserCreateManyDepartmentInputEnvelope = {
    data: UserCreateManyDepartmentInput | UserCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type AssetCreateWithoutDepartmentInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutDepartmentInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutDepartmentInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutDepartmentInput, AssetUncheckedCreateWithoutDepartmentInput>
  }

  export type AssetCreateManyDepartmentInputEnvelope = {
    data: AssetCreateManyDepartmentInput | AssetCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type AssetRequestCreateWithoutDepartmentInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutAssetRequestsInput
    asset?: AssetCreateNestedOneWithoutAssetRequestsInput
    approvedBy?: UserCreateNestedOneWithoutApprovedRequestsInput
  }

  export type AssetRequestUncheckedCreateWithoutDepartmentInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    requesterId: string
    assetId?: string | null
    approvedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetRequestCreateOrConnectWithoutDepartmentInput = {
    where: AssetRequestWhereUniqueInput
    create: XOR<AssetRequestCreateWithoutDepartmentInput, AssetRequestUncheckedCreateWithoutDepartmentInput>
  }

  export type AssetRequestCreateManyDepartmentInputEnvelope = {
    data: AssetRequestCreateManyDepartmentInput | AssetRequestCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type InventoryCreateWithoutDepartmentInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutInventoriesInput
    custodian?: UserCreateNestedOneWithoutCustodiedInventoriesInput
    loans?: InventoryLoanCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutDepartmentInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    assetId: string
    custodianId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loans?: InventoryLoanUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutDepartmentInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutDepartmentInput, InventoryUncheckedCreateWithoutDepartmentInput>
  }

  export type InventoryCreateManyDepartmentInputEnvelope = {
    data: InventoryCreateManyDepartmentInput | InventoryCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutManagedDepartmentsInput = {
    update: XOR<UserUpdateWithoutManagedDepartmentsInput, UserUncheckedUpdateWithoutManagedDepartmentsInput>
    create: XOR<UserCreateWithoutManagedDepartmentsInput, UserUncheckedCreateWithoutManagedDepartmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutManagedDepartmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutManagedDepartmentsInput, UserUncheckedUpdateWithoutManagedDepartmentsInput>
  }

  export type UserUpdateWithoutManagedDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutManagedDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
  }

  export type UserUpdateManyWithWhereWithoutDepartmentInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    departmentId?: StringNullableFilter<"User"> | string | null
  }

  export type AssetUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutDepartmentInput, AssetUncheckedUpdateWithoutDepartmentInput>
    create: XOR<AssetCreateWithoutDepartmentInput, AssetUncheckedCreateWithoutDepartmentInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutDepartmentInput, AssetUncheckedUpdateWithoutDepartmentInput>
  }

  export type AssetUpdateManyWithWhereWithoutDepartmentInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type AssetRequestUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: AssetRequestWhereUniqueInput
    update: XOR<AssetRequestUpdateWithoutDepartmentInput, AssetRequestUncheckedUpdateWithoutDepartmentInput>
    create: XOR<AssetRequestCreateWithoutDepartmentInput, AssetRequestUncheckedCreateWithoutDepartmentInput>
  }

  export type AssetRequestUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: AssetRequestWhereUniqueInput
    data: XOR<AssetRequestUpdateWithoutDepartmentInput, AssetRequestUncheckedUpdateWithoutDepartmentInput>
  }

  export type AssetRequestUpdateManyWithWhereWithoutDepartmentInput = {
    where: AssetRequestScalarWhereInput
    data: XOR<AssetRequestUpdateManyMutationInput, AssetRequestUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type InventoryUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: InventoryWhereUniqueInput
    update: XOR<InventoryUpdateWithoutDepartmentInput, InventoryUncheckedUpdateWithoutDepartmentInput>
    create: XOR<InventoryCreateWithoutDepartmentInput, InventoryUncheckedCreateWithoutDepartmentInput>
  }

  export type InventoryUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: InventoryWhereUniqueInput
    data: XOR<InventoryUpdateWithoutDepartmentInput, InventoryUncheckedUpdateWithoutDepartmentInput>
  }

  export type InventoryUpdateManyWithWhereWithoutDepartmentInput = {
    where: InventoryScalarWhereInput
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type AssetCreateWithoutLocationInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutLocationInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutLocationInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutLocationInput, AssetUncheckedCreateWithoutLocationInput>
  }

  export type AssetCreateManyLocationInputEnvelope = {
    data: AssetCreateManyLocationInput | AssetCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type AssetUpsertWithWhereUniqueWithoutLocationInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutLocationInput, AssetUncheckedUpdateWithoutLocationInput>
    create: XOR<AssetCreateWithoutLocationInput, AssetUncheckedCreateWithoutLocationInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutLocationInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutLocationInput, AssetUncheckedUpdateWithoutLocationInput>
  }

  export type AssetUpdateManyWithWhereWithoutLocationInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutLocationInput>
  }

  export type CategoryCreateWithoutChildrenInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    assets?: AssetCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutChildrenInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
  }

  export type CategoryCreateWithoutParentInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryCreateNestedManyWithoutParentInput
    assets?: AssetCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    assets?: AssetUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutParentInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryCreateManyParentInputEnvelope = {
    data: CategoryCreateManyParentInput | CategoryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type AssetCreateWithoutCategoryInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutCategoryInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutCategoryInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutCategoryInput, AssetUncheckedCreateWithoutCategoryInput>
  }

  export type AssetCreateManyCategoryInputEnvelope = {
    data: AssetCreateManyCategoryInput | AssetCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutChildrenInput = {
    update: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutChildrenInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    assets?: AssetUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParentInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    code?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    parentId?: StringNullableFilter<"Category"> | string | null
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
  }

  export type AssetUpsertWithWhereUniqueWithoutCategoryInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutCategoryInput, AssetUncheckedUpdateWithoutCategoryInput>
    create: XOR<AssetCreateWithoutCategoryInput, AssetUncheckedCreateWithoutCategoryInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutCategoryInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutCategoryInput, AssetUncheckedUpdateWithoutCategoryInput>
  }

  export type AssetUpdateManyWithWhereWithoutCategoryInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutCategoryInput>
  }

  export type AssetCreateWithoutVendorInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutVendorInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutVendorInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutVendorInput, AssetUncheckedCreateWithoutVendorInput>
  }

  export type AssetCreateManyVendorInputEnvelope = {
    data: AssetCreateManyVendorInput | AssetCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceContractCreateWithoutVendorInput = {
    id?: string
    contractNumber: string
    description: string
    startDate: Date | string
    endDate: Date | string
    cost: Decimal | DecimalJsLike | number | string
    terms?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceContractUncheckedCreateWithoutVendorInput = {
    id?: string
    contractNumber: string
    description: string
    startDate: Date | string
    endDate: Date | string
    cost: Decimal | DecimalJsLike | number | string
    terms?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceContractCreateOrConnectWithoutVendorInput = {
    where: MaintenanceContractWhereUniqueInput
    create: XOR<MaintenanceContractCreateWithoutVendorInput, MaintenanceContractUncheckedCreateWithoutVendorInput>
  }

  export type MaintenanceContractCreateManyVendorInputEnvelope = {
    data: MaintenanceContractCreateManyVendorInput | MaintenanceContractCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceRecordCreateWithoutVendorInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutMaintenanceRecordsInput
    technician?: UserCreateNestedOneWithoutMaintenanceRecordsInput
    partUsages?: PartUsageCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceRecordUncheckedCreateWithoutVendorInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    assetId: string
    technicianId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceRecordCreateOrConnectWithoutVendorInput = {
    where: MaintenanceRecordWhereUniqueInput
    create: XOR<MaintenanceRecordCreateWithoutVendorInput, MaintenanceRecordUncheckedCreateWithoutVendorInput>
  }

  export type MaintenanceRecordCreateManyVendorInputEnvelope = {
    data: MaintenanceRecordCreateManyVendorInput | MaintenanceRecordCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type SparePartCreateWithoutVendorInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    procurements?: ProcurementCreateNestedManyWithoutPartInput
    usages?: PartUsageCreateNestedManyWithoutPartInput
    replacements?: PartReplacementCreateNestedManyWithoutNewPartInput
    oldReplacements?: PartReplacementCreateNestedManyWithoutOldPartInput
    registrations?: NewPartRegistrationCreateNestedManyWithoutPartInput
    sourceComponents?: AssetComponentCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartUncheckedCreateWithoutVendorInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    procurements?: ProcurementUncheckedCreateNestedManyWithoutPartInput
    usages?: PartUsageUncheckedCreateNestedManyWithoutPartInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutNewPartInput
    oldReplacements?: PartReplacementUncheckedCreateNestedManyWithoutOldPartInput
    registrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutPartInput
    sourceComponents?: AssetComponentUncheckedCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartCreateOrConnectWithoutVendorInput = {
    where: SparePartWhereUniqueInput
    create: XOR<SparePartCreateWithoutVendorInput, SparePartUncheckedCreateWithoutVendorInput>
  }

  export type SparePartCreateManyVendorInputEnvelope = {
    data: SparePartCreateManyVendorInput | SparePartCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type ProcurementCreateWithoutVendorInput = {
    id?: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.ProcurementStatus
    orderedDate?: Date | string
    expectedDate?: Date | string | null
    receivedDate?: Date | string | null
    receivedQuantity?: number | null
    invoiceNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    part: SparePartCreateNestedOneWithoutProcurementsInput
    orderedBy: UserCreateNestedOneWithoutProcurementsOrderedInput
  }

  export type ProcurementUncheckedCreateWithoutVendorInput = {
    id?: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.ProcurementStatus
    orderedDate?: Date | string
    expectedDate?: Date | string | null
    receivedDate?: Date | string | null
    receivedQuantity?: number | null
    invoiceNumber?: string | null
    notes?: string | null
    partId: string
    orderedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProcurementCreateOrConnectWithoutVendorInput = {
    where: ProcurementWhereUniqueInput
    create: XOR<ProcurementCreateWithoutVendorInput, ProcurementUncheckedCreateWithoutVendorInput>
  }

  export type ProcurementCreateManyVendorInputEnvelope = {
    data: ProcurementCreateManyVendorInput | ProcurementCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type AssetUpsertWithWhereUniqueWithoutVendorInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutVendorInput, AssetUncheckedUpdateWithoutVendorInput>
    create: XOR<AssetCreateWithoutVendorInput, AssetUncheckedCreateWithoutVendorInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutVendorInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutVendorInput, AssetUncheckedUpdateWithoutVendorInput>
  }

  export type AssetUpdateManyWithWhereWithoutVendorInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutVendorInput>
  }

  export type MaintenanceContractUpsertWithWhereUniqueWithoutVendorInput = {
    where: MaintenanceContractWhereUniqueInput
    update: XOR<MaintenanceContractUpdateWithoutVendorInput, MaintenanceContractUncheckedUpdateWithoutVendorInput>
    create: XOR<MaintenanceContractCreateWithoutVendorInput, MaintenanceContractUncheckedCreateWithoutVendorInput>
  }

  export type MaintenanceContractUpdateWithWhereUniqueWithoutVendorInput = {
    where: MaintenanceContractWhereUniqueInput
    data: XOR<MaintenanceContractUpdateWithoutVendorInput, MaintenanceContractUncheckedUpdateWithoutVendorInput>
  }

  export type MaintenanceContractUpdateManyWithWhereWithoutVendorInput = {
    where: MaintenanceContractScalarWhereInput
    data: XOR<MaintenanceContractUpdateManyMutationInput, MaintenanceContractUncheckedUpdateManyWithoutVendorInput>
  }

  export type MaintenanceContractScalarWhereInput = {
    AND?: MaintenanceContractScalarWhereInput | MaintenanceContractScalarWhereInput[]
    OR?: MaintenanceContractScalarWhereInput[]
    NOT?: MaintenanceContractScalarWhereInput | MaintenanceContractScalarWhereInput[]
    id?: StringFilter<"MaintenanceContract"> | string
    contractNumber?: StringFilter<"MaintenanceContract"> | string
    description?: StringFilter<"MaintenanceContract"> | string
    startDate?: DateTimeFilter<"MaintenanceContract"> | Date | string
    endDate?: DateTimeFilter<"MaintenanceContract"> | Date | string
    cost?: DecimalFilter<"MaintenanceContract"> | Decimal | DecimalJsLike | number | string
    terms?: StringNullableFilter<"MaintenanceContract"> | string | null
    isActive?: BoolFilter<"MaintenanceContract"> | boolean
    vendorId?: StringFilter<"MaintenanceContract"> | string
    createdAt?: DateTimeFilter<"MaintenanceContract"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceContract"> | Date | string
  }

  export type MaintenanceRecordUpsertWithWhereUniqueWithoutVendorInput = {
    where: MaintenanceRecordWhereUniqueInput
    update: XOR<MaintenanceRecordUpdateWithoutVendorInput, MaintenanceRecordUncheckedUpdateWithoutVendorInput>
    create: XOR<MaintenanceRecordCreateWithoutVendorInput, MaintenanceRecordUncheckedCreateWithoutVendorInput>
  }

  export type MaintenanceRecordUpdateWithWhereUniqueWithoutVendorInput = {
    where: MaintenanceRecordWhereUniqueInput
    data: XOR<MaintenanceRecordUpdateWithoutVendorInput, MaintenanceRecordUncheckedUpdateWithoutVendorInput>
  }

  export type MaintenanceRecordUpdateManyWithWhereWithoutVendorInput = {
    where: MaintenanceRecordScalarWhereInput
    data: XOR<MaintenanceRecordUpdateManyMutationInput, MaintenanceRecordUncheckedUpdateManyWithoutVendorInput>
  }

  export type SparePartUpsertWithWhereUniqueWithoutVendorInput = {
    where: SparePartWhereUniqueInput
    update: XOR<SparePartUpdateWithoutVendorInput, SparePartUncheckedUpdateWithoutVendorInput>
    create: XOR<SparePartCreateWithoutVendorInput, SparePartUncheckedCreateWithoutVendorInput>
  }

  export type SparePartUpdateWithWhereUniqueWithoutVendorInput = {
    where: SparePartWhereUniqueInput
    data: XOR<SparePartUpdateWithoutVendorInput, SparePartUncheckedUpdateWithoutVendorInput>
  }

  export type SparePartUpdateManyWithWhereWithoutVendorInput = {
    where: SparePartScalarWhereInput
    data: XOR<SparePartUpdateManyMutationInput, SparePartUncheckedUpdateManyWithoutVendorInput>
  }

  export type SparePartScalarWhereInput = {
    AND?: SparePartScalarWhereInput | SparePartScalarWhereInput[]
    OR?: SparePartScalarWhereInput[]
    NOT?: SparePartScalarWhereInput | SparePartScalarWhereInput[]
    id?: StringFilter<"SparePart"> | string
    partNumber?: StringFilter<"SparePart"> | string
    name?: StringFilter<"SparePart"> | string
    description?: StringNullableFilter<"SparePart"> | string | null
    brand?: StringNullableFilter<"SparePart"> | string | null
    model?: StringNullableFilter<"SparePart"> | string | null
    category?: EnumSparePartCategoryFilter<"SparePart"> | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFilter<"SparePart"> | $Enums.SparePartType
    status?: EnumSparePartStatusFilter<"SparePart"> | $Enums.SparePartStatus
    unitPrice?: DecimalFilter<"SparePart"> | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFilter<"SparePart"> | number
    minStockLevel?: IntFilter<"SparePart"> | number
    maxStockLevel?: IntFilter<"SparePart"> | number
    reorderPoint?: IntFilter<"SparePart"> | number
    storageLocation?: StringNullableFilter<"SparePart"> | string | null
    specifications?: JsonNullableFilter<"SparePart">
    compatibleWith?: StringNullableListFilter<"SparePart">
    notes?: StringNullableFilter<"SparePart"> | string | null
    isActive?: BoolFilter<"SparePart"> | boolean
    vendorId?: StringNullableFilter<"SparePart"> | string | null
    createdAt?: DateTimeFilter<"SparePart"> | Date | string
    updatedAt?: DateTimeFilter<"SparePart"> | Date | string
  }

  export type ProcurementUpsertWithWhereUniqueWithoutVendorInput = {
    where: ProcurementWhereUniqueInput
    update: XOR<ProcurementUpdateWithoutVendorInput, ProcurementUncheckedUpdateWithoutVendorInput>
    create: XOR<ProcurementCreateWithoutVendorInput, ProcurementUncheckedCreateWithoutVendorInput>
  }

  export type ProcurementUpdateWithWhereUniqueWithoutVendorInput = {
    where: ProcurementWhereUniqueInput
    data: XOR<ProcurementUpdateWithoutVendorInput, ProcurementUncheckedUpdateWithoutVendorInput>
  }

  export type ProcurementUpdateManyWithWhereWithoutVendorInput = {
    where: ProcurementScalarWhereInput
    data: XOR<ProcurementUpdateManyMutationInput, ProcurementUncheckedUpdateManyWithoutVendorInput>
  }

  export type CategoryCreateWithoutAssetsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
  }

  export type CategoryUncheckedCreateWithoutAssetsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
  }

  export type CategoryCreateOrConnectWithoutAssetsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutAssetsInput, CategoryUncheckedCreateWithoutAssetsInput>
  }

  export type VendorCreateWithoutAssetsInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    maintenanceContracts?: MaintenanceContractCreateNestedManyWithoutVendorInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutVendorInput
    spareParts?: SparePartCreateNestedManyWithoutVendorInput
    procurements?: ProcurementCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutAssetsInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    maintenanceContracts?: MaintenanceContractUncheckedCreateNestedManyWithoutVendorInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutVendorInput
    spareParts?: SparePartUncheckedCreateNestedManyWithoutVendorInput
    procurements?: ProcurementUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutAssetsInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutAssetsInput, VendorUncheckedCreateWithoutAssetsInput>
  }

  export type LocationCreateWithoutAssetsInput = {
    id?: string
    name: string
    building?: string | null
    floor?: string | null
    room?: string | null
    address?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUncheckedCreateWithoutAssetsInput = {
    id?: string
    name: string
    building?: string | null
    floor?: string | null
    room?: string | null
    address?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationCreateOrConnectWithoutAssetsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutAssetsInput, LocationUncheckedCreateWithoutAssetsInput>
  }

  export type DepartmentCreateWithoutAssetsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    manager?: UserCreateNestedOneWithoutManagedDepartmentsInput
    users?: UserCreateNestedManyWithoutDepartmentInput
    assetRequests?: AssetRequestCreateNestedManyWithoutDepartmentInput
    inventories?: InventoryCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutAssetsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    managerId?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutDepartmentInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutAssetsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutAssetsInput, DepartmentUncheckedCreateWithoutAssetsInput>
  }

  export type UserCreateWithoutAssignedAssetsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutAssignedAssetsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutAssignedAssetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedAssetsInput, UserUncheckedCreateWithoutAssignedAssetsInput>
  }

  export type AssetRequestCreateWithoutAssetInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutAssetRequestsInput
    department: DepartmentCreateNestedOneWithoutAssetRequestsInput
    approvedBy?: UserCreateNestedOneWithoutApprovedRequestsInput
  }

  export type AssetRequestUncheckedCreateWithoutAssetInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    requesterId: string
    departmentId: string
    approvedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetRequestCreateOrConnectWithoutAssetInput = {
    where: AssetRequestWhereUniqueInput
    create: XOR<AssetRequestCreateWithoutAssetInput, AssetRequestUncheckedCreateWithoutAssetInput>
  }

  export type AssetRequestCreateManyAssetInputEnvelope = {
    data: AssetRequestCreateManyAssetInput | AssetRequestCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceRecordCreateWithoutAssetInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    technician?: UserCreateNestedOneWithoutMaintenanceRecordsInput
    vendor?: VendorCreateNestedOneWithoutMaintenanceRecordsInput
    partUsages?: PartUsageCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceRecordUncheckedCreateWithoutAssetInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    technicianId?: string | null
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutMaintenanceInput
  }

  export type MaintenanceRecordCreateOrConnectWithoutAssetInput = {
    where: MaintenanceRecordWhereUniqueInput
    create: XOR<MaintenanceRecordCreateWithoutAssetInput, MaintenanceRecordUncheckedCreateWithoutAssetInput>
  }

  export type MaintenanceRecordCreateManyAssetInputEnvelope = {
    data: MaintenanceRecordCreateManyAssetInput | MaintenanceRecordCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type AuditRecordCreateWithoutAssetInput = {
    id?: string
    auditType: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.AuditStatus
    findings?: string | null
    recommendations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auditor: UserCreateNestedOneWithoutAuditRecordsInput
  }

  export type AuditRecordUncheckedCreateWithoutAssetInput = {
    id?: string
    auditType: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.AuditStatus
    findings?: string | null
    recommendations?: string | null
    auditorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditRecordCreateOrConnectWithoutAssetInput = {
    where: AuditRecordWhereUniqueInput
    create: XOR<AuditRecordCreateWithoutAssetInput, AuditRecordUncheckedCreateWithoutAssetInput>
  }

  export type AuditRecordCreateManyAssetInputEnvelope = {
    data: AuditRecordCreateManyAssetInput | AuditRecordCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type DisposalRecordCreateWithoutAssetInput = {
    id?: string
    disposalType: string
    disposalDate: Date | string
    disposalValue?: Decimal | DecimalJsLike | number | string | null
    reason: string
    approvalReference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DisposalRecordUncheckedCreateWithoutAssetInput = {
    id?: string
    disposalType: string
    disposalDate: Date | string
    disposalValue?: Decimal | DecimalJsLike | number | string | null
    reason: string
    approvalReference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DisposalRecordCreateOrConnectWithoutAssetInput = {
    where: DisposalRecordWhereUniqueInput
    create: XOR<DisposalRecordCreateWithoutAssetInput, DisposalRecordUncheckedCreateWithoutAssetInput>
  }

  export type PartUsageCreateWithoutAssetInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    part: SparePartCreateNestedOneWithoutUsagesInput
    component?: AssetComponentCreateNestedOneWithoutUsagesInput
    maintenance?: MaintenanceRecordCreateNestedOneWithoutPartUsagesInput
    usedBy: UserCreateNestedOneWithoutPartUsagesInput
  }

  export type PartUsageUncheckedCreateWithoutAssetInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    partId: string
    componentId?: string | null
    maintenanceId?: string | null
    usedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartUsageCreateOrConnectWithoutAssetInput = {
    where: PartUsageWhereUniqueInput
    create: XOR<PartUsageCreateWithoutAssetInput, PartUsageUncheckedCreateWithoutAssetInput>
  }

  export type PartUsageCreateManyAssetInputEnvelope = {
    data: PartUsageCreateManyAssetInput | PartUsageCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type PartReplacementCreateWithoutAssetInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    oldPart?: SparePartCreateNestedOneWithoutOldReplacementsInput
    oldComponent?: AssetComponentCreateNestedOneWithoutReplacementsInput
    newPart: SparePartCreateNestedOneWithoutReplacementsInput
    performedBy?: UserCreateNestedOneWithoutReplacementsPerformedInput
  }

  export type PartReplacementUncheckedCreateWithoutAssetInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    oldPartId?: string | null
    oldComponentId?: string | null
    newPartId: string
    performedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartReplacementCreateOrConnectWithoutAssetInput = {
    where: PartReplacementWhereUniqueInput
    create: XOR<PartReplacementCreateWithoutAssetInput, PartReplacementUncheckedCreateWithoutAssetInput>
  }

  export type PartReplacementCreateManyAssetInputEnvelope = {
    data: PartReplacementCreateManyAssetInput | PartReplacementCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type NewPartRegistrationCreateWithoutAssetInput = {
    id?: string
    registrationNumber: string
    serialNumber?: string | null
    assetTag?: string | null
    status?: $Enums.RegistrationStatus
    registeredDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    part: SparePartCreateNestedOneWithoutRegistrationsInput
    registeredBy: UserCreateNestedOneWithoutPartRegistrationsInput
  }

  export type NewPartRegistrationUncheckedCreateWithoutAssetInput = {
    id?: string
    registrationNumber: string
    serialNumber?: string | null
    assetTag?: string | null
    status?: $Enums.RegistrationStatus
    registeredDate?: Date | string | null
    notes?: string | null
    partId: string
    registeredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewPartRegistrationCreateOrConnectWithoutAssetInput = {
    where: NewPartRegistrationWhereUniqueInput
    create: XOR<NewPartRegistrationCreateWithoutAssetInput, NewPartRegistrationUncheckedCreateWithoutAssetInput>
  }

  export type NewPartRegistrationCreateManyAssetInputEnvelope = {
    data: NewPartRegistrationCreateManyAssetInput | NewPartRegistrationCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type AssetComponentCreateWithoutAssetInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parentAsset?: AssetCreateNestedOneWithoutParentComponentsInput
    sourcePart?: SparePartCreateNestedOneWithoutSourceComponentsInput
    usages?: PartUsageCreateNestedManyWithoutComponentInput
    replacements?: PartReplacementCreateNestedManyWithoutOldComponentInput
    transfers?: ComponentTransferCreateNestedManyWithoutComponentInput
    maintenanceRecords?: ComponentMaintenanceCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentUncheckedCreateWithoutAssetInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    parentAssetId?: string | null
    sourcePartId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: PartUsageUncheckedCreateNestedManyWithoutComponentInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutOldComponentInput
    transfers?: ComponentTransferUncheckedCreateNestedManyWithoutComponentInput
    maintenanceRecords?: ComponentMaintenanceUncheckedCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentCreateOrConnectWithoutAssetInput = {
    where: AssetComponentWhereUniqueInput
    create: XOR<AssetComponentCreateWithoutAssetInput, AssetComponentUncheckedCreateWithoutAssetInput>
  }

  export type AssetComponentCreateManyAssetInputEnvelope = {
    data: AssetComponentCreateManyAssetInput | AssetComponentCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type AssetComponentCreateWithoutParentAssetInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutComponentsInput
    sourcePart?: SparePartCreateNestedOneWithoutSourceComponentsInput
    usages?: PartUsageCreateNestedManyWithoutComponentInput
    replacements?: PartReplacementCreateNestedManyWithoutOldComponentInput
    transfers?: ComponentTransferCreateNestedManyWithoutComponentInput
    maintenanceRecords?: ComponentMaintenanceCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentUncheckedCreateWithoutParentAssetInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId: string
    sourcePartId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: PartUsageUncheckedCreateNestedManyWithoutComponentInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutOldComponentInput
    transfers?: ComponentTransferUncheckedCreateNestedManyWithoutComponentInput
    maintenanceRecords?: ComponentMaintenanceUncheckedCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentCreateOrConnectWithoutParentAssetInput = {
    where: AssetComponentWhereUniqueInput
    create: XOR<AssetComponentCreateWithoutParentAssetInput, AssetComponentUncheckedCreateWithoutParentAssetInput>
  }

  export type AssetComponentCreateManyParentAssetInputEnvelope = {
    data: AssetComponentCreateManyParentAssetInput | AssetComponentCreateManyParentAssetInput[]
    skipDuplicates?: boolean
  }

  export type ComponentTransferCreateWithoutFromAssetInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    component: AssetComponentCreateNestedOneWithoutTransfersInput
    toAsset: AssetCreateNestedOneWithoutTransfersToInput
    transferredBy: UserCreateNestedOneWithoutComponentTransfersInput
  }

  export type ComponentTransferUncheckedCreateWithoutFromAssetInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    componentId: string
    toAssetId: string
    transferredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentTransferCreateOrConnectWithoutFromAssetInput = {
    where: ComponentTransferWhereUniqueInput
    create: XOR<ComponentTransferCreateWithoutFromAssetInput, ComponentTransferUncheckedCreateWithoutFromAssetInput>
  }

  export type ComponentTransferCreateManyFromAssetInputEnvelope = {
    data: ComponentTransferCreateManyFromAssetInput | ComponentTransferCreateManyFromAssetInput[]
    skipDuplicates?: boolean
  }

  export type ComponentTransferCreateWithoutToAssetInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    component: AssetComponentCreateNestedOneWithoutTransfersInput
    fromAsset: AssetCreateNestedOneWithoutTransfersFromInput
    transferredBy: UserCreateNestedOneWithoutComponentTransfersInput
  }

  export type ComponentTransferUncheckedCreateWithoutToAssetInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    componentId: string
    fromAssetId: string
    transferredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentTransferCreateOrConnectWithoutToAssetInput = {
    where: ComponentTransferWhereUniqueInput
    create: XOR<ComponentTransferCreateWithoutToAssetInput, ComponentTransferUncheckedCreateWithoutToAssetInput>
  }

  export type ComponentTransferCreateManyToAssetInputEnvelope = {
    data: ComponentTransferCreateManyToAssetInput | ComponentTransferCreateManyToAssetInput[]
    skipDuplicates?: boolean
  }

  export type InventoryCreateWithoutAssetInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutInventoriesInput
    custodian?: UserCreateNestedOneWithoutCustodiedInventoriesInput
    loans?: InventoryLoanCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutAssetInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    departmentId: string
    custodianId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loans?: InventoryLoanUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutAssetInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutAssetInput, InventoryUncheckedCreateWithoutAssetInput>
  }

  export type InventoryCreateManyAssetInputEnvelope = {
    data: InventoryCreateManyAssetInput | InventoryCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutAssetsInput = {
    update: XOR<CategoryUpdateWithoutAssetsInput, CategoryUncheckedUpdateWithoutAssetsInput>
    create: XOR<CategoryCreateWithoutAssetsInput, CategoryUncheckedCreateWithoutAssetsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutAssetsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutAssetsInput, CategoryUncheckedUpdateWithoutAssetsInput>
  }

  export type CategoryUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
  }

  export type CategoryUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
  }

  export type VendorUpsertWithoutAssetsInput = {
    update: XOR<VendorUpdateWithoutAssetsInput, VendorUncheckedUpdateWithoutAssetsInput>
    create: XOR<VendorCreateWithoutAssetsInput, VendorUncheckedCreateWithoutAssetsInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutAssetsInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutAssetsInput, VendorUncheckedUpdateWithoutAssetsInput>
  }

  export type VendorUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maintenanceContracts?: MaintenanceContractUpdateManyWithoutVendorNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutVendorNestedInput
    spareParts?: SparePartUpdateManyWithoutVendorNestedInput
    procurements?: ProcurementUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maintenanceContracts?: MaintenanceContractUncheckedUpdateManyWithoutVendorNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutVendorNestedInput
    spareParts?: SparePartUncheckedUpdateManyWithoutVendorNestedInput
    procurements?: ProcurementUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type LocationUpsertWithoutAssetsInput = {
    update: XOR<LocationUpdateWithoutAssetsInput, LocationUncheckedUpdateWithoutAssetsInput>
    create: XOR<LocationCreateWithoutAssetsInput, LocationUncheckedCreateWithoutAssetsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutAssetsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutAssetsInput, LocationUncheckedUpdateWithoutAssetsInput>
  }

  export type LocationUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUpsertWithoutAssetsInput = {
    update: XOR<DepartmentUpdateWithoutAssetsInput, DepartmentUncheckedUpdateWithoutAssetsInput>
    create: XOR<DepartmentCreateWithoutAssetsInput, DepartmentUncheckedCreateWithoutAssetsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutAssetsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutAssetsInput, DepartmentUncheckedUpdateWithoutAssetsInput>
  }

  export type DepartmentUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manager?: UserUpdateOneWithoutManagedDepartmentsNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutDepartmentNestedInput
    inventories?: InventoryUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutDepartmentNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type UserUpsertWithoutAssignedAssetsInput = {
    update: XOR<UserUpdateWithoutAssignedAssetsInput, UserUncheckedUpdateWithoutAssignedAssetsInput>
    create: XOR<UserCreateWithoutAssignedAssetsInput, UserUncheckedCreateWithoutAssignedAssetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedAssetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedAssetsInput, UserUncheckedUpdateWithoutAssignedAssetsInput>
  }

  export type UserUpdateWithoutAssignedAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type AssetRequestUpsertWithWhereUniqueWithoutAssetInput = {
    where: AssetRequestWhereUniqueInput
    update: XOR<AssetRequestUpdateWithoutAssetInput, AssetRequestUncheckedUpdateWithoutAssetInput>
    create: XOR<AssetRequestCreateWithoutAssetInput, AssetRequestUncheckedCreateWithoutAssetInput>
  }

  export type AssetRequestUpdateWithWhereUniqueWithoutAssetInput = {
    where: AssetRequestWhereUniqueInput
    data: XOR<AssetRequestUpdateWithoutAssetInput, AssetRequestUncheckedUpdateWithoutAssetInput>
  }

  export type AssetRequestUpdateManyWithWhereWithoutAssetInput = {
    where: AssetRequestScalarWhereInput
    data: XOR<AssetRequestUpdateManyMutationInput, AssetRequestUncheckedUpdateManyWithoutAssetInput>
  }

  export type MaintenanceRecordUpsertWithWhereUniqueWithoutAssetInput = {
    where: MaintenanceRecordWhereUniqueInput
    update: XOR<MaintenanceRecordUpdateWithoutAssetInput, MaintenanceRecordUncheckedUpdateWithoutAssetInput>
    create: XOR<MaintenanceRecordCreateWithoutAssetInput, MaintenanceRecordUncheckedCreateWithoutAssetInput>
  }

  export type MaintenanceRecordUpdateWithWhereUniqueWithoutAssetInput = {
    where: MaintenanceRecordWhereUniqueInput
    data: XOR<MaintenanceRecordUpdateWithoutAssetInput, MaintenanceRecordUncheckedUpdateWithoutAssetInput>
  }

  export type MaintenanceRecordUpdateManyWithWhereWithoutAssetInput = {
    where: MaintenanceRecordScalarWhereInput
    data: XOR<MaintenanceRecordUpdateManyMutationInput, MaintenanceRecordUncheckedUpdateManyWithoutAssetInput>
  }

  export type AuditRecordUpsertWithWhereUniqueWithoutAssetInput = {
    where: AuditRecordWhereUniqueInput
    update: XOR<AuditRecordUpdateWithoutAssetInput, AuditRecordUncheckedUpdateWithoutAssetInput>
    create: XOR<AuditRecordCreateWithoutAssetInput, AuditRecordUncheckedCreateWithoutAssetInput>
  }

  export type AuditRecordUpdateWithWhereUniqueWithoutAssetInput = {
    where: AuditRecordWhereUniqueInput
    data: XOR<AuditRecordUpdateWithoutAssetInput, AuditRecordUncheckedUpdateWithoutAssetInput>
  }

  export type AuditRecordUpdateManyWithWhereWithoutAssetInput = {
    where: AuditRecordScalarWhereInput
    data: XOR<AuditRecordUpdateManyMutationInput, AuditRecordUncheckedUpdateManyWithoutAssetInput>
  }

  export type DisposalRecordUpsertWithoutAssetInput = {
    update: XOR<DisposalRecordUpdateWithoutAssetInput, DisposalRecordUncheckedUpdateWithoutAssetInput>
    create: XOR<DisposalRecordCreateWithoutAssetInput, DisposalRecordUncheckedCreateWithoutAssetInput>
    where?: DisposalRecordWhereInput
  }

  export type DisposalRecordUpdateToOneWithWhereWithoutAssetInput = {
    where?: DisposalRecordWhereInput
    data: XOR<DisposalRecordUpdateWithoutAssetInput, DisposalRecordUncheckedUpdateWithoutAssetInput>
  }

  export type DisposalRecordUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    disposalType?: StringFieldUpdateOperationsInput | string
    disposalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    disposalValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reason?: StringFieldUpdateOperationsInput | string
    approvalReference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DisposalRecordUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    disposalType?: StringFieldUpdateOperationsInput | string
    disposalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    disposalValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reason?: StringFieldUpdateOperationsInput | string
    approvalReference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageUpsertWithWhereUniqueWithoutAssetInput = {
    where: PartUsageWhereUniqueInput
    update: XOR<PartUsageUpdateWithoutAssetInput, PartUsageUncheckedUpdateWithoutAssetInput>
    create: XOR<PartUsageCreateWithoutAssetInput, PartUsageUncheckedCreateWithoutAssetInput>
  }

  export type PartUsageUpdateWithWhereUniqueWithoutAssetInput = {
    where: PartUsageWhereUniqueInput
    data: XOR<PartUsageUpdateWithoutAssetInput, PartUsageUncheckedUpdateWithoutAssetInput>
  }

  export type PartUsageUpdateManyWithWhereWithoutAssetInput = {
    where: PartUsageScalarWhereInput
    data: XOR<PartUsageUpdateManyMutationInput, PartUsageUncheckedUpdateManyWithoutAssetInput>
  }

  export type PartReplacementUpsertWithWhereUniqueWithoutAssetInput = {
    where: PartReplacementWhereUniqueInput
    update: XOR<PartReplacementUpdateWithoutAssetInput, PartReplacementUncheckedUpdateWithoutAssetInput>
    create: XOR<PartReplacementCreateWithoutAssetInput, PartReplacementUncheckedCreateWithoutAssetInput>
  }

  export type PartReplacementUpdateWithWhereUniqueWithoutAssetInput = {
    where: PartReplacementWhereUniqueInput
    data: XOR<PartReplacementUpdateWithoutAssetInput, PartReplacementUncheckedUpdateWithoutAssetInput>
  }

  export type PartReplacementUpdateManyWithWhereWithoutAssetInput = {
    where: PartReplacementScalarWhereInput
    data: XOR<PartReplacementUpdateManyMutationInput, PartReplacementUncheckedUpdateManyWithoutAssetInput>
  }

  export type NewPartRegistrationUpsertWithWhereUniqueWithoutAssetInput = {
    where: NewPartRegistrationWhereUniqueInput
    update: XOR<NewPartRegistrationUpdateWithoutAssetInput, NewPartRegistrationUncheckedUpdateWithoutAssetInput>
    create: XOR<NewPartRegistrationCreateWithoutAssetInput, NewPartRegistrationUncheckedCreateWithoutAssetInput>
  }

  export type NewPartRegistrationUpdateWithWhereUniqueWithoutAssetInput = {
    where: NewPartRegistrationWhereUniqueInput
    data: XOR<NewPartRegistrationUpdateWithoutAssetInput, NewPartRegistrationUncheckedUpdateWithoutAssetInput>
  }

  export type NewPartRegistrationUpdateManyWithWhereWithoutAssetInput = {
    where: NewPartRegistrationScalarWhereInput
    data: XOR<NewPartRegistrationUpdateManyMutationInput, NewPartRegistrationUncheckedUpdateManyWithoutAssetInput>
  }

  export type AssetComponentUpsertWithWhereUniqueWithoutAssetInput = {
    where: AssetComponentWhereUniqueInput
    update: XOR<AssetComponentUpdateWithoutAssetInput, AssetComponentUncheckedUpdateWithoutAssetInput>
    create: XOR<AssetComponentCreateWithoutAssetInput, AssetComponentUncheckedCreateWithoutAssetInput>
  }

  export type AssetComponentUpdateWithWhereUniqueWithoutAssetInput = {
    where: AssetComponentWhereUniqueInput
    data: XOR<AssetComponentUpdateWithoutAssetInput, AssetComponentUncheckedUpdateWithoutAssetInput>
  }

  export type AssetComponentUpdateManyWithWhereWithoutAssetInput = {
    where: AssetComponentScalarWhereInput
    data: XOR<AssetComponentUpdateManyMutationInput, AssetComponentUncheckedUpdateManyWithoutAssetInput>
  }

  export type AssetComponentScalarWhereInput = {
    AND?: AssetComponentScalarWhereInput | AssetComponentScalarWhereInput[]
    OR?: AssetComponentScalarWhereInput[]
    NOT?: AssetComponentScalarWhereInput | AssetComponentScalarWhereInput[]
    id?: StringFilter<"AssetComponent"> | string
    name?: StringFilter<"AssetComponent"> | string
    description?: StringNullableFilter<"AssetComponent"> | string | null
    partNumber?: StringNullableFilter<"AssetComponent"> | string | null
    serialNumber?: StringNullableFilter<"AssetComponent"> | string | null
    brand?: StringNullableFilter<"AssetComponent"> | string | null
    model?: StringNullableFilter<"AssetComponent"> | string | null
    status?: EnumComponentStatusFilter<"AssetComponent"> | $Enums.ComponentStatus
    purchaseDate?: DateTimeNullableFilter<"AssetComponent"> | Date | string | null
    purchasePrice?: DecimalNullableFilter<"AssetComponent"> | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: DateTimeNullableFilter<"AssetComponent"> | Date | string | null
    isReplaceable?: BoolFilter<"AssetComponent"> | boolean
    isTransferable?: BoolFilter<"AssetComponent"> | boolean
    notes?: StringNullableFilter<"AssetComponent"> | string | null
    specifications?: JsonNullableFilter<"AssetComponent">
    assetId?: StringFilter<"AssetComponent"> | string
    parentAssetId?: StringNullableFilter<"AssetComponent"> | string | null
    sourcePartId?: StringNullableFilter<"AssetComponent"> | string | null
    createdAt?: DateTimeFilter<"AssetComponent"> | Date | string
    updatedAt?: DateTimeFilter<"AssetComponent"> | Date | string
  }

  export type AssetComponentUpsertWithWhereUniqueWithoutParentAssetInput = {
    where: AssetComponentWhereUniqueInput
    update: XOR<AssetComponentUpdateWithoutParentAssetInput, AssetComponentUncheckedUpdateWithoutParentAssetInput>
    create: XOR<AssetComponentCreateWithoutParentAssetInput, AssetComponentUncheckedCreateWithoutParentAssetInput>
  }

  export type AssetComponentUpdateWithWhereUniqueWithoutParentAssetInput = {
    where: AssetComponentWhereUniqueInput
    data: XOR<AssetComponentUpdateWithoutParentAssetInput, AssetComponentUncheckedUpdateWithoutParentAssetInput>
  }

  export type AssetComponentUpdateManyWithWhereWithoutParentAssetInput = {
    where: AssetComponentScalarWhereInput
    data: XOR<AssetComponentUpdateManyMutationInput, AssetComponentUncheckedUpdateManyWithoutParentAssetInput>
  }

  export type ComponentTransferUpsertWithWhereUniqueWithoutFromAssetInput = {
    where: ComponentTransferWhereUniqueInput
    update: XOR<ComponentTransferUpdateWithoutFromAssetInput, ComponentTransferUncheckedUpdateWithoutFromAssetInput>
    create: XOR<ComponentTransferCreateWithoutFromAssetInput, ComponentTransferUncheckedCreateWithoutFromAssetInput>
  }

  export type ComponentTransferUpdateWithWhereUniqueWithoutFromAssetInput = {
    where: ComponentTransferWhereUniqueInput
    data: XOR<ComponentTransferUpdateWithoutFromAssetInput, ComponentTransferUncheckedUpdateWithoutFromAssetInput>
  }

  export type ComponentTransferUpdateManyWithWhereWithoutFromAssetInput = {
    where: ComponentTransferScalarWhereInput
    data: XOR<ComponentTransferUpdateManyMutationInput, ComponentTransferUncheckedUpdateManyWithoutFromAssetInput>
  }

  export type ComponentTransferUpsertWithWhereUniqueWithoutToAssetInput = {
    where: ComponentTransferWhereUniqueInput
    update: XOR<ComponentTransferUpdateWithoutToAssetInput, ComponentTransferUncheckedUpdateWithoutToAssetInput>
    create: XOR<ComponentTransferCreateWithoutToAssetInput, ComponentTransferUncheckedCreateWithoutToAssetInput>
  }

  export type ComponentTransferUpdateWithWhereUniqueWithoutToAssetInput = {
    where: ComponentTransferWhereUniqueInput
    data: XOR<ComponentTransferUpdateWithoutToAssetInput, ComponentTransferUncheckedUpdateWithoutToAssetInput>
  }

  export type ComponentTransferUpdateManyWithWhereWithoutToAssetInput = {
    where: ComponentTransferScalarWhereInput
    data: XOR<ComponentTransferUpdateManyMutationInput, ComponentTransferUncheckedUpdateManyWithoutToAssetInput>
  }

  export type InventoryUpsertWithWhereUniqueWithoutAssetInput = {
    where: InventoryWhereUniqueInput
    update: XOR<InventoryUpdateWithoutAssetInput, InventoryUncheckedUpdateWithoutAssetInput>
    create: XOR<InventoryCreateWithoutAssetInput, InventoryUncheckedCreateWithoutAssetInput>
  }

  export type InventoryUpdateWithWhereUniqueWithoutAssetInput = {
    where: InventoryWhereUniqueInput
    data: XOR<InventoryUpdateWithoutAssetInput, InventoryUncheckedUpdateWithoutAssetInput>
  }

  export type InventoryUpdateManyWithWhereWithoutAssetInput = {
    where: InventoryScalarWhereInput
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyWithoutAssetInput>
  }

  export type UserCreateWithoutAssetRequestsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutAssetRequestsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutAssetRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssetRequestsInput, UserUncheckedCreateWithoutAssetRequestsInput>
  }

  export type DepartmentCreateWithoutAssetRequestsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    manager?: UserCreateNestedOneWithoutManagedDepartmentsInput
    users?: UserCreateNestedManyWithoutDepartmentInput
    assets?: AssetCreateNestedManyWithoutDepartmentInput
    inventories?: InventoryCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutAssetRequestsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    managerId?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    assets?: AssetUncheckedCreateNestedManyWithoutDepartmentInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutAssetRequestsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutAssetRequestsInput, DepartmentUncheckedCreateWithoutAssetRequestsInput>
  }

  export type AssetCreateWithoutAssetRequestsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutAssetRequestsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutAssetRequestsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutAssetRequestsInput, AssetUncheckedCreateWithoutAssetRequestsInput>
  }

  export type UserCreateWithoutApprovedRequestsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutApprovedRequestsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutApprovedRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovedRequestsInput, UserUncheckedCreateWithoutApprovedRequestsInput>
  }

  export type UserUpsertWithoutAssetRequestsInput = {
    update: XOR<UserUpdateWithoutAssetRequestsInput, UserUncheckedUpdateWithoutAssetRequestsInput>
    create: XOR<UserCreateWithoutAssetRequestsInput, UserUncheckedCreateWithoutAssetRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssetRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssetRequestsInput, UserUncheckedUpdateWithoutAssetRequestsInput>
  }

  export type UserUpdateWithoutAssetRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutAssetRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type DepartmentUpsertWithoutAssetRequestsInput = {
    update: XOR<DepartmentUpdateWithoutAssetRequestsInput, DepartmentUncheckedUpdateWithoutAssetRequestsInput>
    create: XOR<DepartmentCreateWithoutAssetRequestsInput, DepartmentUncheckedCreateWithoutAssetRequestsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutAssetRequestsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutAssetRequestsInput, DepartmentUncheckedUpdateWithoutAssetRequestsInput>
  }

  export type DepartmentUpdateWithoutAssetRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manager?: UserUpdateOneWithoutManagedDepartmentsNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
    assets?: AssetUpdateManyWithoutDepartmentNestedInput
    inventories?: InventoryUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutAssetRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    assets?: AssetUncheckedUpdateManyWithoutDepartmentNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type AssetUpsertWithoutAssetRequestsInput = {
    update: XOR<AssetUpdateWithoutAssetRequestsInput, AssetUncheckedUpdateWithoutAssetRequestsInput>
    create: XOR<AssetCreateWithoutAssetRequestsInput, AssetUncheckedCreateWithoutAssetRequestsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutAssetRequestsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutAssetRequestsInput, AssetUncheckedUpdateWithoutAssetRequestsInput>
  }

  export type AssetUpdateWithoutAssetRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutAssetRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type UserUpsertWithoutApprovedRequestsInput = {
    update: XOR<UserUpdateWithoutApprovedRequestsInput, UserUncheckedUpdateWithoutApprovedRequestsInput>
    create: XOR<UserCreateWithoutApprovedRequestsInput, UserUncheckedCreateWithoutApprovedRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovedRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovedRequestsInput, UserUncheckedUpdateWithoutApprovedRequestsInput>
  }

  export type UserUpdateWithoutApprovedRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovedRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type AssetCreateWithoutMaintenanceRecordsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutMaintenanceRecordsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutMaintenanceRecordsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutMaintenanceRecordsInput, AssetUncheckedCreateWithoutMaintenanceRecordsInput>
  }

  export type UserCreateWithoutMaintenanceRecordsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutMaintenanceRecordsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutMaintenanceRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMaintenanceRecordsInput, UserUncheckedCreateWithoutMaintenanceRecordsInput>
  }

  export type VendorCreateWithoutMaintenanceRecordsInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutVendorInput
    maintenanceContracts?: MaintenanceContractCreateNestedManyWithoutVendorInput
    spareParts?: SparePartCreateNestedManyWithoutVendorInput
    procurements?: ProcurementCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutMaintenanceRecordsInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutVendorInput
    maintenanceContracts?: MaintenanceContractUncheckedCreateNestedManyWithoutVendorInput
    spareParts?: SparePartUncheckedCreateNestedManyWithoutVendorInput
    procurements?: ProcurementUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutMaintenanceRecordsInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutMaintenanceRecordsInput, VendorUncheckedCreateWithoutMaintenanceRecordsInput>
  }

  export type PartUsageCreateWithoutMaintenanceInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    part: SparePartCreateNestedOneWithoutUsagesInput
    asset?: AssetCreateNestedOneWithoutPartUsagesInput
    component?: AssetComponentCreateNestedOneWithoutUsagesInput
    usedBy: UserCreateNestedOneWithoutPartUsagesInput
  }

  export type PartUsageUncheckedCreateWithoutMaintenanceInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    partId: string
    assetId?: string | null
    componentId?: string | null
    usedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartUsageCreateOrConnectWithoutMaintenanceInput = {
    where: PartUsageWhereUniqueInput
    create: XOR<PartUsageCreateWithoutMaintenanceInput, PartUsageUncheckedCreateWithoutMaintenanceInput>
  }

  export type PartUsageCreateManyMaintenanceInputEnvelope = {
    data: PartUsageCreateManyMaintenanceInput | PartUsageCreateManyMaintenanceInput[]
    skipDuplicates?: boolean
  }

  export type AssetUpsertWithoutMaintenanceRecordsInput = {
    update: XOR<AssetUpdateWithoutMaintenanceRecordsInput, AssetUncheckedUpdateWithoutMaintenanceRecordsInput>
    create: XOR<AssetCreateWithoutMaintenanceRecordsInput, AssetUncheckedCreateWithoutMaintenanceRecordsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutMaintenanceRecordsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutMaintenanceRecordsInput, AssetUncheckedUpdateWithoutMaintenanceRecordsInput>
  }

  export type AssetUpdateWithoutMaintenanceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutMaintenanceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type UserUpsertWithoutMaintenanceRecordsInput = {
    update: XOR<UserUpdateWithoutMaintenanceRecordsInput, UserUncheckedUpdateWithoutMaintenanceRecordsInput>
    create: XOR<UserCreateWithoutMaintenanceRecordsInput, UserUncheckedCreateWithoutMaintenanceRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMaintenanceRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMaintenanceRecordsInput, UserUncheckedUpdateWithoutMaintenanceRecordsInput>
  }

  export type UserUpdateWithoutMaintenanceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutMaintenanceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type VendorUpsertWithoutMaintenanceRecordsInput = {
    update: XOR<VendorUpdateWithoutMaintenanceRecordsInput, VendorUncheckedUpdateWithoutMaintenanceRecordsInput>
    create: XOR<VendorCreateWithoutMaintenanceRecordsInput, VendorUncheckedCreateWithoutMaintenanceRecordsInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutMaintenanceRecordsInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutMaintenanceRecordsInput, VendorUncheckedUpdateWithoutMaintenanceRecordsInput>
  }

  export type VendorUpdateWithoutMaintenanceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutVendorNestedInput
    maintenanceContracts?: MaintenanceContractUpdateManyWithoutVendorNestedInput
    spareParts?: SparePartUpdateManyWithoutVendorNestedInput
    procurements?: ProcurementUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutMaintenanceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutVendorNestedInput
    maintenanceContracts?: MaintenanceContractUncheckedUpdateManyWithoutVendorNestedInput
    spareParts?: SparePartUncheckedUpdateManyWithoutVendorNestedInput
    procurements?: ProcurementUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type PartUsageUpsertWithWhereUniqueWithoutMaintenanceInput = {
    where: PartUsageWhereUniqueInput
    update: XOR<PartUsageUpdateWithoutMaintenanceInput, PartUsageUncheckedUpdateWithoutMaintenanceInput>
    create: XOR<PartUsageCreateWithoutMaintenanceInput, PartUsageUncheckedCreateWithoutMaintenanceInput>
  }

  export type PartUsageUpdateWithWhereUniqueWithoutMaintenanceInput = {
    where: PartUsageWhereUniqueInput
    data: XOR<PartUsageUpdateWithoutMaintenanceInput, PartUsageUncheckedUpdateWithoutMaintenanceInput>
  }

  export type PartUsageUpdateManyWithWhereWithoutMaintenanceInput = {
    where: PartUsageScalarWhereInput
    data: XOR<PartUsageUpdateManyMutationInput, PartUsageUncheckedUpdateManyWithoutMaintenanceInput>
  }

  export type VendorCreateWithoutMaintenanceContractsInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutVendorInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutVendorInput
    spareParts?: SparePartCreateNestedManyWithoutVendorInput
    procurements?: ProcurementCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutMaintenanceContractsInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutVendorInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutVendorInput
    spareParts?: SparePartUncheckedCreateNestedManyWithoutVendorInput
    procurements?: ProcurementUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutMaintenanceContractsInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutMaintenanceContractsInput, VendorUncheckedCreateWithoutMaintenanceContractsInput>
  }

  export type VendorUpsertWithoutMaintenanceContractsInput = {
    update: XOR<VendorUpdateWithoutMaintenanceContractsInput, VendorUncheckedUpdateWithoutMaintenanceContractsInput>
    create: XOR<VendorCreateWithoutMaintenanceContractsInput, VendorUncheckedCreateWithoutMaintenanceContractsInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutMaintenanceContractsInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutMaintenanceContractsInput, VendorUncheckedUpdateWithoutMaintenanceContractsInput>
  }

  export type VendorUpdateWithoutMaintenanceContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutVendorNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutVendorNestedInput
    spareParts?: SparePartUpdateManyWithoutVendorNestedInput
    procurements?: ProcurementUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutMaintenanceContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutVendorNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutVendorNestedInput
    spareParts?: SparePartUncheckedUpdateManyWithoutVendorNestedInput
    procurements?: ProcurementUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type AssetCreateWithoutAuditRecordsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutAuditRecordsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutAuditRecordsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutAuditRecordsInput, AssetUncheckedCreateWithoutAuditRecordsInput>
  }

  export type UserCreateWithoutAuditRecordsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutAuditRecordsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutAuditRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditRecordsInput, UserUncheckedCreateWithoutAuditRecordsInput>
  }

  export type AssetUpsertWithoutAuditRecordsInput = {
    update: XOR<AssetUpdateWithoutAuditRecordsInput, AssetUncheckedUpdateWithoutAuditRecordsInput>
    create: XOR<AssetCreateWithoutAuditRecordsInput, AssetUncheckedCreateWithoutAuditRecordsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutAuditRecordsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutAuditRecordsInput, AssetUncheckedUpdateWithoutAuditRecordsInput>
  }

  export type AssetUpdateWithoutAuditRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutAuditRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type UserUpsertWithoutAuditRecordsInput = {
    update: XOR<UserUpdateWithoutAuditRecordsInput, UserUncheckedUpdateWithoutAuditRecordsInput>
    create: XOR<UserCreateWithoutAuditRecordsInput, UserUncheckedCreateWithoutAuditRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditRecordsInput, UserUncheckedUpdateWithoutAuditRecordsInput>
  }

  export type UserUpdateWithoutAuditRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type AssetCreateWithoutDisposalRecordInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutDisposalRecordInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutDisposalRecordInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutDisposalRecordInput, AssetUncheckedCreateWithoutDisposalRecordInput>
  }

  export type AssetUpsertWithoutDisposalRecordInput = {
    update: XOR<AssetUpdateWithoutDisposalRecordInput, AssetUncheckedUpdateWithoutDisposalRecordInput>
    create: XOR<AssetCreateWithoutDisposalRecordInput, AssetUncheckedCreateWithoutDisposalRecordInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutDisposalRecordInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutDisposalRecordInput, AssetUncheckedUpdateWithoutDisposalRecordInput>
  }

  export type AssetUpdateWithoutDisposalRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutDisposalRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type VendorCreateWithoutSparePartsInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutVendorInput
    maintenanceContracts?: MaintenanceContractCreateNestedManyWithoutVendorInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutVendorInput
    procurements?: ProcurementCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutSparePartsInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutVendorInput
    maintenanceContracts?: MaintenanceContractUncheckedCreateNestedManyWithoutVendorInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutVendorInput
    procurements?: ProcurementUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutSparePartsInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutSparePartsInput, VendorUncheckedCreateWithoutSparePartsInput>
  }

  export type ProcurementCreateWithoutPartInput = {
    id?: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.ProcurementStatus
    orderedDate?: Date | string
    expectedDate?: Date | string | null
    receivedDate?: Date | string | null
    receivedQuantity?: number | null
    invoiceNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutProcurementsInput
    orderedBy: UserCreateNestedOneWithoutProcurementsOrderedInput
  }

  export type ProcurementUncheckedCreateWithoutPartInput = {
    id?: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.ProcurementStatus
    orderedDate?: Date | string
    expectedDate?: Date | string | null
    receivedDate?: Date | string | null
    receivedQuantity?: number | null
    invoiceNumber?: string | null
    notes?: string | null
    vendorId?: string | null
    orderedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProcurementCreateOrConnectWithoutPartInput = {
    where: ProcurementWhereUniqueInput
    create: XOR<ProcurementCreateWithoutPartInput, ProcurementUncheckedCreateWithoutPartInput>
  }

  export type ProcurementCreateManyPartInputEnvelope = {
    data: ProcurementCreateManyPartInput | ProcurementCreateManyPartInput[]
    skipDuplicates?: boolean
  }

  export type PartUsageCreateWithoutPartInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset?: AssetCreateNestedOneWithoutPartUsagesInput
    component?: AssetComponentCreateNestedOneWithoutUsagesInput
    maintenance?: MaintenanceRecordCreateNestedOneWithoutPartUsagesInput
    usedBy: UserCreateNestedOneWithoutPartUsagesInput
  }

  export type PartUsageUncheckedCreateWithoutPartInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    assetId?: string | null
    componentId?: string | null
    maintenanceId?: string | null
    usedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartUsageCreateOrConnectWithoutPartInput = {
    where: PartUsageWhereUniqueInput
    create: XOR<PartUsageCreateWithoutPartInput, PartUsageUncheckedCreateWithoutPartInput>
  }

  export type PartUsageCreateManyPartInputEnvelope = {
    data: PartUsageCreateManyPartInput | PartUsageCreateManyPartInput[]
    skipDuplicates?: boolean
  }

  export type PartReplacementCreateWithoutNewPartInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    oldPart?: SparePartCreateNestedOneWithoutOldReplacementsInput
    oldComponent?: AssetComponentCreateNestedOneWithoutReplacementsInput
    asset: AssetCreateNestedOneWithoutPartReplacementsInput
    performedBy?: UserCreateNestedOneWithoutReplacementsPerformedInput
  }

  export type PartReplacementUncheckedCreateWithoutNewPartInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    oldPartId?: string | null
    oldComponentId?: string | null
    assetId: string
    performedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartReplacementCreateOrConnectWithoutNewPartInput = {
    where: PartReplacementWhereUniqueInput
    create: XOR<PartReplacementCreateWithoutNewPartInput, PartReplacementUncheckedCreateWithoutNewPartInput>
  }

  export type PartReplacementCreateManyNewPartInputEnvelope = {
    data: PartReplacementCreateManyNewPartInput | PartReplacementCreateManyNewPartInput[]
    skipDuplicates?: boolean
  }

  export type PartReplacementCreateWithoutOldPartInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    oldComponent?: AssetComponentCreateNestedOneWithoutReplacementsInput
    newPart: SparePartCreateNestedOneWithoutReplacementsInput
    asset: AssetCreateNestedOneWithoutPartReplacementsInput
    performedBy?: UserCreateNestedOneWithoutReplacementsPerformedInput
  }

  export type PartReplacementUncheckedCreateWithoutOldPartInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    oldComponentId?: string | null
    newPartId: string
    assetId: string
    performedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartReplacementCreateOrConnectWithoutOldPartInput = {
    where: PartReplacementWhereUniqueInput
    create: XOR<PartReplacementCreateWithoutOldPartInput, PartReplacementUncheckedCreateWithoutOldPartInput>
  }

  export type PartReplacementCreateManyOldPartInputEnvelope = {
    data: PartReplacementCreateManyOldPartInput | PartReplacementCreateManyOldPartInput[]
    skipDuplicates?: boolean
  }

  export type NewPartRegistrationCreateWithoutPartInput = {
    id?: string
    registrationNumber: string
    serialNumber?: string | null
    assetTag?: string | null
    status?: $Enums.RegistrationStatus
    registeredDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset?: AssetCreateNestedOneWithoutPartRegistrationsInput
    registeredBy: UserCreateNestedOneWithoutPartRegistrationsInput
  }

  export type NewPartRegistrationUncheckedCreateWithoutPartInput = {
    id?: string
    registrationNumber: string
    serialNumber?: string | null
    assetTag?: string | null
    status?: $Enums.RegistrationStatus
    registeredDate?: Date | string | null
    notes?: string | null
    assetId?: string | null
    registeredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewPartRegistrationCreateOrConnectWithoutPartInput = {
    where: NewPartRegistrationWhereUniqueInput
    create: XOR<NewPartRegistrationCreateWithoutPartInput, NewPartRegistrationUncheckedCreateWithoutPartInput>
  }

  export type NewPartRegistrationCreateManyPartInputEnvelope = {
    data: NewPartRegistrationCreateManyPartInput | NewPartRegistrationCreateManyPartInput[]
    skipDuplicates?: boolean
  }

  export type AssetComponentCreateWithoutSourcePartInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutComponentsInput
    parentAsset?: AssetCreateNestedOneWithoutParentComponentsInput
    usages?: PartUsageCreateNestedManyWithoutComponentInput
    replacements?: PartReplacementCreateNestedManyWithoutOldComponentInput
    transfers?: ComponentTransferCreateNestedManyWithoutComponentInput
    maintenanceRecords?: ComponentMaintenanceCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentUncheckedCreateWithoutSourcePartInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId: string
    parentAssetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: PartUsageUncheckedCreateNestedManyWithoutComponentInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutOldComponentInput
    transfers?: ComponentTransferUncheckedCreateNestedManyWithoutComponentInput
    maintenanceRecords?: ComponentMaintenanceUncheckedCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentCreateOrConnectWithoutSourcePartInput = {
    where: AssetComponentWhereUniqueInput
    create: XOR<AssetComponentCreateWithoutSourcePartInput, AssetComponentUncheckedCreateWithoutSourcePartInput>
  }

  export type AssetComponentCreateManySourcePartInputEnvelope = {
    data: AssetComponentCreateManySourcePartInput | AssetComponentCreateManySourcePartInput[]
    skipDuplicates?: boolean
  }

  export type VendorUpsertWithoutSparePartsInput = {
    update: XOR<VendorUpdateWithoutSparePartsInput, VendorUncheckedUpdateWithoutSparePartsInput>
    create: XOR<VendorCreateWithoutSparePartsInput, VendorUncheckedCreateWithoutSparePartsInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutSparePartsInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutSparePartsInput, VendorUncheckedUpdateWithoutSparePartsInput>
  }

  export type VendorUpdateWithoutSparePartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutVendorNestedInput
    maintenanceContracts?: MaintenanceContractUpdateManyWithoutVendorNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutVendorNestedInput
    procurements?: ProcurementUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutSparePartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutVendorNestedInput
    maintenanceContracts?: MaintenanceContractUncheckedUpdateManyWithoutVendorNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutVendorNestedInput
    procurements?: ProcurementUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type ProcurementUpsertWithWhereUniqueWithoutPartInput = {
    where: ProcurementWhereUniqueInput
    update: XOR<ProcurementUpdateWithoutPartInput, ProcurementUncheckedUpdateWithoutPartInput>
    create: XOR<ProcurementCreateWithoutPartInput, ProcurementUncheckedCreateWithoutPartInput>
  }

  export type ProcurementUpdateWithWhereUniqueWithoutPartInput = {
    where: ProcurementWhereUniqueInput
    data: XOR<ProcurementUpdateWithoutPartInput, ProcurementUncheckedUpdateWithoutPartInput>
  }

  export type ProcurementUpdateManyWithWhereWithoutPartInput = {
    where: ProcurementScalarWhereInput
    data: XOR<ProcurementUpdateManyMutationInput, ProcurementUncheckedUpdateManyWithoutPartInput>
  }

  export type PartUsageUpsertWithWhereUniqueWithoutPartInput = {
    where: PartUsageWhereUniqueInput
    update: XOR<PartUsageUpdateWithoutPartInput, PartUsageUncheckedUpdateWithoutPartInput>
    create: XOR<PartUsageCreateWithoutPartInput, PartUsageUncheckedCreateWithoutPartInput>
  }

  export type PartUsageUpdateWithWhereUniqueWithoutPartInput = {
    where: PartUsageWhereUniqueInput
    data: XOR<PartUsageUpdateWithoutPartInput, PartUsageUncheckedUpdateWithoutPartInput>
  }

  export type PartUsageUpdateManyWithWhereWithoutPartInput = {
    where: PartUsageScalarWhereInput
    data: XOR<PartUsageUpdateManyMutationInput, PartUsageUncheckedUpdateManyWithoutPartInput>
  }

  export type PartReplacementUpsertWithWhereUniqueWithoutNewPartInput = {
    where: PartReplacementWhereUniqueInput
    update: XOR<PartReplacementUpdateWithoutNewPartInput, PartReplacementUncheckedUpdateWithoutNewPartInput>
    create: XOR<PartReplacementCreateWithoutNewPartInput, PartReplacementUncheckedCreateWithoutNewPartInput>
  }

  export type PartReplacementUpdateWithWhereUniqueWithoutNewPartInput = {
    where: PartReplacementWhereUniqueInput
    data: XOR<PartReplacementUpdateWithoutNewPartInput, PartReplacementUncheckedUpdateWithoutNewPartInput>
  }

  export type PartReplacementUpdateManyWithWhereWithoutNewPartInput = {
    where: PartReplacementScalarWhereInput
    data: XOR<PartReplacementUpdateManyMutationInput, PartReplacementUncheckedUpdateManyWithoutNewPartInput>
  }

  export type PartReplacementUpsertWithWhereUniqueWithoutOldPartInput = {
    where: PartReplacementWhereUniqueInput
    update: XOR<PartReplacementUpdateWithoutOldPartInput, PartReplacementUncheckedUpdateWithoutOldPartInput>
    create: XOR<PartReplacementCreateWithoutOldPartInput, PartReplacementUncheckedCreateWithoutOldPartInput>
  }

  export type PartReplacementUpdateWithWhereUniqueWithoutOldPartInput = {
    where: PartReplacementWhereUniqueInput
    data: XOR<PartReplacementUpdateWithoutOldPartInput, PartReplacementUncheckedUpdateWithoutOldPartInput>
  }

  export type PartReplacementUpdateManyWithWhereWithoutOldPartInput = {
    where: PartReplacementScalarWhereInput
    data: XOR<PartReplacementUpdateManyMutationInput, PartReplacementUncheckedUpdateManyWithoutOldPartInput>
  }

  export type NewPartRegistrationUpsertWithWhereUniqueWithoutPartInput = {
    where: NewPartRegistrationWhereUniqueInput
    update: XOR<NewPartRegistrationUpdateWithoutPartInput, NewPartRegistrationUncheckedUpdateWithoutPartInput>
    create: XOR<NewPartRegistrationCreateWithoutPartInput, NewPartRegistrationUncheckedCreateWithoutPartInput>
  }

  export type NewPartRegistrationUpdateWithWhereUniqueWithoutPartInput = {
    where: NewPartRegistrationWhereUniqueInput
    data: XOR<NewPartRegistrationUpdateWithoutPartInput, NewPartRegistrationUncheckedUpdateWithoutPartInput>
  }

  export type NewPartRegistrationUpdateManyWithWhereWithoutPartInput = {
    where: NewPartRegistrationScalarWhereInput
    data: XOR<NewPartRegistrationUpdateManyMutationInput, NewPartRegistrationUncheckedUpdateManyWithoutPartInput>
  }

  export type AssetComponentUpsertWithWhereUniqueWithoutSourcePartInput = {
    where: AssetComponentWhereUniqueInput
    update: XOR<AssetComponentUpdateWithoutSourcePartInput, AssetComponentUncheckedUpdateWithoutSourcePartInput>
    create: XOR<AssetComponentCreateWithoutSourcePartInput, AssetComponentUncheckedCreateWithoutSourcePartInput>
  }

  export type AssetComponentUpdateWithWhereUniqueWithoutSourcePartInput = {
    where: AssetComponentWhereUniqueInput
    data: XOR<AssetComponentUpdateWithoutSourcePartInput, AssetComponentUncheckedUpdateWithoutSourcePartInput>
  }

  export type AssetComponentUpdateManyWithWhereWithoutSourcePartInput = {
    where: AssetComponentScalarWhereInput
    data: XOR<AssetComponentUpdateManyMutationInput, AssetComponentUncheckedUpdateManyWithoutSourcePartInput>
  }

  export type SparePartCreateWithoutProcurementsInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSparePartsInput
    usages?: PartUsageCreateNestedManyWithoutPartInput
    replacements?: PartReplacementCreateNestedManyWithoutNewPartInput
    oldReplacements?: PartReplacementCreateNestedManyWithoutOldPartInput
    registrations?: NewPartRegistrationCreateNestedManyWithoutPartInput
    sourceComponents?: AssetComponentCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartUncheckedCreateWithoutProcurementsInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: PartUsageUncheckedCreateNestedManyWithoutPartInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutNewPartInput
    oldReplacements?: PartReplacementUncheckedCreateNestedManyWithoutOldPartInput
    registrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutPartInput
    sourceComponents?: AssetComponentUncheckedCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartCreateOrConnectWithoutProcurementsInput = {
    where: SparePartWhereUniqueInput
    create: XOR<SparePartCreateWithoutProcurementsInput, SparePartUncheckedCreateWithoutProcurementsInput>
  }

  export type VendorCreateWithoutProcurementsInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutVendorInput
    maintenanceContracts?: MaintenanceContractCreateNestedManyWithoutVendorInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutVendorInput
    spareParts?: SparePartCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutProcurementsInput = {
    id?: string
    name: string
    code: string
    email?: string | null
    phone?: string | null
    address?: string | null
    contactPerson?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutVendorInput
    maintenanceContracts?: MaintenanceContractUncheckedCreateNestedManyWithoutVendorInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutVendorInput
    spareParts?: SparePartUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutProcurementsInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutProcurementsInput, VendorUncheckedCreateWithoutProcurementsInput>
  }

  export type UserCreateWithoutProcurementsOrderedInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutProcurementsOrderedInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutProcurementsOrderedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProcurementsOrderedInput, UserUncheckedCreateWithoutProcurementsOrderedInput>
  }

  export type SparePartUpsertWithoutProcurementsInput = {
    update: XOR<SparePartUpdateWithoutProcurementsInput, SparePartUncheckedUpdateWithoutProcurementsInput>
    create: XOR<SparePartCreateWithoutProcurementsInput, SparePartUncheckedCreateWithoutProcurementsInput>
    where?: SparePartWhereInput
  }

  export type SparePartUpdateToOneWithWhereWithoutProcurementsInput = {
    where?: SparePartWhereInput
    data: XOR<SparePartUpdateWithoutProcurementsInput, SparePartUncheckedUpdateWithoutProcurementsInput>
  }

  export type SparePartUpdateWithoutProcurementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSparePartsNestedInput
    usages?: PartUsageUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUpdateManyWithoutNewPartNestedInput
    oldReplacements?: PartReplacementUpdateManyWithoutOldPartNestedInput
    registrations?: NewPartRegistrationUpdateManyWithoutPartNestedInput
    sourceComponents?: AssetComponentUpdateManyWithoutSourcePartNestedInput
  }

  export type SparePartUncheckedUpdateWithoutProcurementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: PartUsageUncheckedUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutNewPartNestedInput
    oldReplacements?: PartReplacementUncheckedUpdateManyWithoutOldPartNestedInput
    registrations?: NewPartRegistrationUncheckedUpdateManyWithoutPartNestedInput
    sourceComponents?: AssetComponentUncheckedUpdateManyWithoutSourcePartNestedInput
  }

  export type VendorUpsertWithoutProcurementsInput = {
    update: XOR<VendorUpdateWithoutProcurementsInput, VendorUncheckedUpdateWithoutProcurementsInput>
    create: XOR<VendorCreateWithoutProcurementsInput, VendorUncheckedCreateWithoutProcurementsInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutProcurementsInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutProcurementsInput, VendorUncheckedUpdateWithoutProcurementsInput>
  }

  export type VendorUpdateWithoutProcurementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutVendorNestedInput
    maintenanceContracts?: MaintenanceContractUpdateManyWithoutVendorNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutVendorNestedInput
    spareParts?: SparePartUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutProcurementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutVendorNestedInput
    maintenanceContracts?: MaintenanceContractUncheckedUpdateManyWithoutVendorNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutVendorNestedInput
    spareParts?: SparePartUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type UserUpsertWithoutProcurementsOrderedInput = {
    update: XOR<UserUpdateWithoutProcurementsOrderedInput, UserUncheckedUpdateWithoutProcurementsOrderedInput>
    create: XOR<UserCreateWithoutProcurementsOrderedInput, UserUncheckedCreateWithoutProcurementsOrderedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProcurementsOrderedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProcurementsOrderedInput, UserUncheckedUpdateWithoutProcurementsOrderedInput>
  }

  export type UserUpdateWithoutProcurementsOrderedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutProcurementsOrderedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type SparePartCreateWithoutUsagesInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSparePartsInput
    procurements?: ProcurementCreateNestedManyWithoutPartInput
    replacements?: PartReplacementCreateNestedManyWithoutNewPartInput
    oldReplacements?: PartReplacementCreateNestedManyWithoutOldPartInput
    registrations?: NewPartRegistrationCreateNestedManyWithoutPartInput
    sourceComponents?: AssetComponentCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartUncheckedCreateWithoutUsagesInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    procurements?: ProcurementUncheckedCreateNestedManyWithoutPartInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutNewPartInput
    oldReplacements?: PartReplacementUncheckedCreateNestedManyWithoutOldPartInput
    registrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutPartInput
    sourceComponents?: AssetComponentUncheckedCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartCreateOrConnectWithoutUsagesInput = {
    where: SparePartWhereUniqueInput
    create: XOR<SparePartCreateWithoutUsagesInput, SparePartUncheckedCreateWithoutUsagesInput>
  }

  export type AssetCreateWithoutPartUsagesInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutPartUsagesInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutPartUsagesInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutPartUsagesInput, AssetUncheckedCreateWithoutPartUsagesInput>
  }

  export type AssetComponentCreateWithoutUsagesInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutComponentsInput
    parentAsset?: AssetCreateNestedOneWithoutParentComponentsInput
    sourcePart?: SparePartCreateNestedOneWithoutSourceComponentsInput
    replacements?: PartReplacementCreateNestedManyWithoutOldComponentInput
    transfers?: ComponentTransferCreateNestedManyWithoutComponentInput
    maintenanceRecords?: ComponentMaintenanceCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentUncheckedCreateWithoutUsagesInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId: string
    parentAssetId?: string | null
    sourcePartId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutOldComponentInput
    transfers?: ComponentTransferUncheckedCreateNestedManyWithoutComponentInput
    maintenanceRecords?: ComponentMaintenanceUncheckedCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentCreateOrConnectWithoutUsagesInput = {
    where: AssetComponentWhereUniqueInput
    create: XOR<AssetComponentCreateWithoutUsagesInput, AssetComponentUncheckedCreateWithoutUsagesInput>
  }

  export type MaintenanceRecordCreateWithoutPartUsagesInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutMaintenanceRecordsInput
    technician?: UserCreateNestedOneWithoutMaintenanceRecordsInput
    vendor?: VendorCreateNestedOneWithoutMaintenanceRecordsInput
  }

  export type MaintenanceRecordUncheckedCreateWithoutPartUsagesInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    assetId: string
    technicianId?: string | null
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceRecordCreateOrConnectWithoutPartUsagesInput = {
    where: MaintenanceRecordWhereUniqueInput
    create: XOR<MaintenanceRecordCreateWithoutPartUsagesInput, MaintenanceRecordUncheckedCreateWithoutPartUsagesInput>
  }

  export type UserCreateWithoutPartUsagesInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutPartUsagesInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutPartUsagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPartUsagesInput, UserUncheckedCreateWithoutPartUsagesInput>
  }

  export type SparePartUpsertWithoutUsagesInput = {
    update: XOR<SparePartUpdateWithoutUsagesInput, SparePartUncheckedUpdateWithoutUsagesInput>
    create: XOR<SparePartCreateWithoutUsagesInput, SparePartUncheckedCreateWithoutUsagesInput>
    where?: SparePartWhereInput
  }

  export type SparePartUpdateToOneWithWhereWithoutUsagesInput = {
    where?: SparePartWhereInput
    data: XOR<SparePartUpdateWithoutUsagesInput, SparePartUncheckedUpdateWithoutUsagesInput>
  }

  export type SparePartUpdateWithoutUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSparePartsNestedInput
    procurements?: ProcurementUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUpdateManyWithoutNewPartNestedInput
    oldReplacements?: PartReplacementUpdateManyWithoutOldPartNestedInput
    registrations?: NewPartRegistrationUpdateManyWithoutPartNestedInput
    sourceComponents?: AssetComponentUpdateManyWithoutSourcePartNestedInput
  }

  export type SparePartUncheckedUpdateWithoutUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    procurements?: ProcurementUncheckedUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutNewPartNestedInput
    oldReplacements?: PartReplacementUncheckedUpdateManyWithoutOldPartNestedInput
    registrations?: NewPartRegistrationUncheckedUpdateManyWithoutPartNestedInput
    sourceComponents?: AssetComponentUncheckedUpdateManyWithoutSourcePartNestedInput
  }

  export type AssetUpsertWithoutPartUsagesInput = {
    update: XOR<AssetUpdateWithoutPartUsagesInput, AssetUncheckedUpdateWithoutPartUsagesInput>
    create: XOR<AssetCreateWithoutPartUsagesInput, AssetUncheckedCreateWithoutPartUsagesInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutPartUsagesInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutPartUsagesInput, AssetUncheckedUpdateWithoutPartUsagesInput>
  }

  export type AssetUpdateWithoutPartUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutPartUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetComponentUpsertWithoutUsagesInput = {
    update: XOR<AssetComponentUpdateWithoutUsagesInput, AssetComponentUncheckedUpdateWithoutUsagesInput>
    create: XOR<AssetComponentCreateWithoutUsagesInput, AssetComponentUncheckedCreateWithoutUsagesInput>
    where?: AssetComponentWhereInput
  }

  export type AssetComponentUpdateToOneWithWhereWithoutUsagesInput = {
    where?: AssetComponentWhereInput
    data: XOR<AssetComponentUpdateWithoutUsagesInput, AssetComponentUncheckedUpdateWithoutUsagesInput>
  }

  export type AssetComponentUpdateWithoutUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutComponentsNestedInput
    parentAsset?: AssetUpdateOneWithoutParentComponentsNestedInput
    sourcePart?: SparePartUpdateOneWithoutSourceComponentsNestedInput
    replacements?: PartReplacementUpdateManyWithoutOldComponentNestedInput
    transfers?: ComponentTransferUpdateManyWithoutComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUpdateManyWithoutComponentNestedInput
  }

  export type AssetComponentUncheckedUpdateWithoutUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId?: StringFieldUpdateOperationsInput | string
    parentAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    sourcePartId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replacements?: PartReplacementUncheckedUpdateManyWithoutOldComponentNestedInput
    transfers?: ComponentTransferUncheckedUpdateManyWithoutComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type MaintenanceRecordUpsertWithoutPartUsagesInput = {
    update: XOR<MaintenanceRecordUpdateWithoutPartUsagesInput, MaintenanceRecordUncheckedUpdateWithoutPartUsagesInput>
    create: XOR<MaintenanceRecordCreateWithoutPartUsagesInput, MaintenanceRecordUncheckedCreateWithoutPartUsagesInput>
    where?: MaintenanceRecordWhereInput
  }

  export type MaintenanceRecordUpdateToOneWithWhereWithoutPartUsagesInput = {
    where?: MaintenanceRecordWhereInput
    data: XOR<MaintenanceRecordUpdateWithoutPartUsagesInput, MaintenanceRecordUncheckedUpdateWithoutPartUsagesInput>
  }

  export type MaintenanceRecordUpdateWithoutPartUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutMaintenanceRecordsNestedInput
    technician?: UserUpdateOneWithoutMaintenanceRecordsNestedInput
    vendor?: VendorUpdateOneWithoutMaintenanceRecordsNestedInput
  }

  export type MaintenanceRecordUncheckedUpdateWithoutPartUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: StringFieldUpdateOperationsInput | string
    technicianId?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutPartUsagesInput = {
    update: XOR<UserUpdateWithoutPartUsagesInput, UserUncheckedUpdateWithoutPartUsagesInput>
    create: XOR<UserCreateWithoutPartUsagesInput, UserUncheckedCreateWithoutPartUsagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPartUsagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPartUsagesInput, UserUncheckedUpdateWithoutPartUsagesInput>
  }

  export type UserUpdateWithoutPartUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutPartUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type SparePartCreateWithoutOldReplacementsInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSparePartsInput
    procurements?: ProcurementCreateNestedManyWithoutPartInput
    usages?: PartUsageCreateNestedManyWithoutPartInput
    replacements?: PartReplacementCreateNestedManyWithoutNewPartInput
    registrations?: NewPartRegistrationCreateNestedManyWithoutPartInput
    sourceComponents?: AssetComponentCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartUncheckedCreateWithoutOldReplacementsInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    procurements?: ProcurementUncheckedCreateNestedManyWithoutPartInput
    usages?: PartUsageUncheckedCreateNestedManyWithoutPartInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutNewPartInput
    registrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutPartInput
    sourceComponents?: AssetComponentUncheckedCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartCreateOrConnectWithoutOldReplacementsInput = {
    where: SparePartWhereUniqueInput
    create: XOR<SparePartCreateWithoutOldReplacementsInput, SparePartUncheckedCreateWithoutOldReplacementsInput>
  }

  export type AssetComponentCreateWithoutReplacementsInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutComponentsInput
    parentAsset?: AssetCreateNestedOneWithoutParentComponentsInput
    sourcePart?: SparePartCreateNestedOneWithoutSourceComponentsInput
    usages?: PartUsageCreateNestedManyWithoutComponentInput
    transfers?: ComponentTransferCreateNestedManyWithoutComponentInput
    maintenanceRecords?: ComponentMaintenanceCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentUncheckedCreateWithoutReplacementsInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId: string
    parentAssetId?: string | null
    sourcePartId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: PartUsageUncheckedCreateNestedManyWithoutComponentInput
    transfers?: ComponentTransferUncheckedCreateNestedManyWithoutComponentInput
    maintenanceRecords?: ComponentMaintenanceUncheckedCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentCreateOrConnectWithoutReplacementsInput = {
    where: AssetComponentWhereUniqueInput
    create: XOR<AssetComponentCreateWithoutReplacementsInput, AssetComponentUncheckedCreateWithoutReplacementsInput>
  }

  export type SparePartCreateWithoutReplacementsInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSparePartsInput
    procurements?: ProcurementCreateNestedManyWithoutPartInput
    usages?: PartUsageCreateNestedManyWithoutPartInput
    oldReplacements?: PartReplacementCreateNestedManyWithoutOldPartInput
    registrations?: NewPartRegistrationCreateNestedManyWithoutPartInput
    sourceComponents?: AssetComponentCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartUncheckedCreateWithoutReplacementsInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    procurements?: ProcurementUncheckedCreateNestedManyWithoutPartInput
    usages?: PartUsageUncheckedCreateNestedManyWithoutPartInput
    oldReplacements?: PartReplacementUncheckedCreateNestedManyWithoutOldPartInput
    registrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutPartInput
    sourceComponents?: AssetComponentUncheckedCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartCreateOrConnectWithoutReplacementsInput = {
    where: SparePartWhereUniqueInput
    create: XOR<SparePartCreateWithoutReplacementsInput, SparePartUncheckedCreateWithoutReplacementsInput>
  }

  export type AssetCreateWithoutPartReplacementsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutPartReplacementsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutPartReplacementsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutPartReplacementsInput, AssetUncheckedCreateWithoutPartReplacementsInput>
  }

  export type UserCreateWithoutReplacementsPerformedInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutReplacementsPerformedInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutReplacementsPerformedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReplacementsPerformedInput, UserUncheckedCreateWithoutReplacementsPerformedInput>
  }

  export type SparePartUpsertWithoutOldReplacementsInput = {
    update: XOR<SparePartUpdateWithoutOldReplacementsInput, SparePartUncheckedUpdateWithoutOldReplacementsInput>
    create: XOR<SparePartCreateWithoutOldReplacementsInput, SparePartUncheckedCreateWithoutOldReplacementsInput>
    where?: SparePartWhereInput
  }

  export type SparePartUpdateToOneWithWhereWithoutOldReplacementsInput = {
    where?: SparePartWhereInput
    data: XOR<SparePartUpdateWithoutOldReplacementsInput, SparePartUncheckedUpdateWithoutOldReplacementsInput>
  }

  export type SparePartUpdateWithoutOldReplacementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSparePartsNestedInput
    procurements?: ProcurementUpdateManyWithoutPartNestedInput
    usages?: PartUsageUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUpdateManyWithoutNewPartNestedInput
    registrations?: NewPartRegistrationUpdateManyWithoutPartNestedInput
    sourceComponents?: AssetComponentUpdateManyWithoutSourcePartNestedInput
  }

  export type SparePartUncheckedUpdateWithoutOldReplacementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    procurements?: ProcurementUncheckedUpdateManyWithoutPartNestedInput
    usages?: PartUsageUncheckedUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutNewPartNestedInput
    registrations?: NewPartRegistrationUncheckedUpdateManyWithoutPartNestedInput
    sourceComponents?: AssetComponentUncheckedUpdateManyWithoutSourcePartNestedInput
  }

  export type AssetComponentUpsertWithoutReplacementsInput = {
    update: XOR<AssetComponentUpdateWithoutReplacementsInput, AssetComponentUncheckedUpdateWithoutReplacementsInput>
    create: XOR<AssetComponentCreateWithoutReplacementsInput, AssetComponentUncheckedCreateWithoutReplacementsInput>
    where?: AssetComponentWhereInput
  }

  export type AssetComponentUpdateToOneWithWhereWithoutReplacementsInput = {
    where?: AssetComponentWhereInput
    data: XOR<AssetComponentUpdateWithoutReplacementsInput, AssetComponentUncheckedUpdateWithoutReplacementsInput>
  }

  export type AssetComponentUpdateWithoutReplacementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutComponentsNestedInput
    parentAsset?: AssetUpdateOneWithoutParentComponentsNestedInput
    sourcePart?: SparePartUpdateOneWithoutSourceComponentsNestedInput
    usages?: PartUsageUpdateManyWithoutComponentNestedInput
    transfers?: ComponentTransferUpdateManyWithoutComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUpdateManyWithoutComponentNestedInput
  }

  export type AssetComponentUncheckedUpdateWithoutReplacementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId?: StringFieldUpdateOperationsInput | string
    parentAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    sourcePartId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: PartUsageUncheckedUpdateManyWithoutComponentNestedInput
    transfers?: ComponentTransferUncheckedUpdateManyWithoutComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type SparePartUpsertWithoutReplacementsInput = {
    update: XOR<SparePartUpdateWithoutReplacementsInput, SparePartUncheckedUpdateWithoutReplacementsInput>
    create: XOR<SparePartCreateWithoutReplacementsInput, SparePartUncheckedCreateWithoutReplacementsInput>
    where?: SparePartWhereInput
  }

  export type SparePartUpdateToOneWithWhereWithoutReplacementsInput = {
    where?: SparePartWhereInput
    data: XOR<SparePartUpdateWithoutReplacementsInput, SparePartUncheckedUpdateWithoutReplacementsInput>
  }

  export type SparePartUpdateWithoutReplacementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSparePartsNestedInput
    procurements?: ProcurementUpdateManyWithoutPartNestedInput
    usages?: PartUsageUpdateManyWithoutPartNestedInput
    oldReplacements?: PartReplacementUpdateManyWithoutOldPartNestedInput
    registrations?: NewPartRegistrationUpdateManyWithoutPartNestedInput
    sourceComponents?: AssetComponentUpdateManyWithoutSourcePartNestedInput
  }

  export type SparePartUncheckedUpdateWithoutReplacementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    procurements?: ProcurementUncheckedUpdateManyWithoutPartNestedInput
    usages?: PartUsageUncheckedUpdateManyWithoutPartNestedInput
    oldReplacements?: PartReplacementUncheckedUpdateManyWithoutOldPartNestedInput
    registrations?: NewPartRegistrationUncheckedUpdateManyWithoutPartNestedInput
    sourceComponents?: AssetComponentUncheckedUpdateManyWithoutSourcePartNestedInput
  }

  export type AssetUpsertWithoutPartReplacementsInput = {
    update: XOR<AssetUpdateWithoutPartReplacementsInput, AssetUncheckedUpdateWithoutPartReplacementsInput>
    create: XOR<AssetCreateWithoutPartReplacementsInput, AssetUncheckedCreateWithoutPartReplacementsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutPartReplacementsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutPartReplacementsInput, AssetUncheckedUpdateWithoutPartReplacementsInput>
  }

  export type AssetUpdateWithoutPartReplacementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutPartReplacementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type UserUpsertWithoutReplacementsPerformedInput = {
    update: XOR<UserUpdateWithoutReplacementsPerformedInput, UserUncheckedUpdateWithoutReplacementsPerformedInput>
    create: XOR<UserCreateWithoutReplacementsPerformedInput, UserUncheckedCreateWithoutReplacementsPerformedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReplacementsPerformedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReplacementsPerformedInput, UserUncheckedUpdateWithoutReplacementsPerformedInput>
  }

  export type UserUpdateWithoutReplacementsPerformedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutReplacementsPerformedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type SparePartCreateWithoutRegistrationsInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSparePartsInput
    procurements?: ProcurementCreateNestedManyWithoutPartInput
    usages?: PartUsageCreateNestedManyWithoutPartInput
    replacements?: PartReplacementCreateNestedManyWithoutNewPartInput
    oldReplacements?: PartReplacementCreateNestedManyWithoutOldPartInput
    sourceComponents?: AssetComponentCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartUncheckedCreateWithoutRegistrationsInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    procurements?: ProcurementUncheckedCreateNestedManyWithoutPartInput
    usages?: PartUsageUncheckedCreateNestedManyWithoutPartInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutNewPartInput
    oldReplacements?: PartReplacementUncheckedCreateNestedManyWithoutOldPartInput
    sourceComponents?: AssetComponentUncheckedCreateNestedManyWithoutSourcePartInput
  }

  export type SparePartCreateOrConnectWithoutRegistrationsInput = {
    where: SparePartWhereUniqueInput
    create: XOR<SparePartCreateWithoutRegistrationsInput, SparePartUncheckedCreateWithoutRegistrationsInput>
  }

  export type AssetCreateWithoutPartRegistrationsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutPartRegistrationsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutPartRegistrationsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutPartRegistrationsInput, AssetUncheckedCreateWithoutPartRegistrationsInput>
  }

  export type UserCreateWithoutPartRegistrationsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutPartRegistrationsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutPartRegistrationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPartRegistrationsInput, UserUncheckedCreateWithoutPartRegistrationsInput>
  }

  export type SparePartUpsertWithoutRegistrationsInput = {
    update: XOR<SparePartUpdateWithoutRegistrationsInput, SparePartUncheckedUpdateWithoutRegistrationsInput>
    create: XOR<SparePartCreateWithoutRegistrationsInput, SparePartUncheckedCreateWithoutRegistrationsInput>
    where?: SparePartWhereInput
  }

  export type SparePartUpdateToOneWithWhereWithoutRegistrationsInput = {
    where?: SparePartWhereInput
    data: XOR<SparePartUpdateWithoutRegistrationsInput, SparePartUncheckedUpdateWithoutRegistrationsInput>
  }

  export type SparePartUpdateWithoutRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSparePartsNestedInput
    procurements?: ProcurementUpdateManyWithoutPartNestedInput
    usages?: PartUsageUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUpdateManyWithoutNewPartNestedInput
    oldReplacements?: PartReplacementUpdateManyWithoutOldPartNestedInput
    sourceComponents?: AssetComponentUpdateManyWithoutSourcePartNestedInput
  }

  export type SparePartUncheckedUpdateWithoutRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    procurements?: ProcurementUncheckedUpdateManyWithoutPartNestedInput
    usages?: PartUsageUncheckedUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutNewPartNestedInput
    oldReplacements?: PartReplacementUncheckedUpdateManyWithoutOldPartNestedInput
    sourceComponents?: AssetComponentUncheckedUpdateManyWithoutSourcePartNestedInput
  }

  export type AssetUpsertWithoutPartRegistrationsInput = {
    update: XOR<AssetUpdateWithoutPartRegistrationsInput, AssetUncheckedUpdateWithoutPartRegistrationsInput>
    create: XOR<AssetCreateWithoutPartRegistrationsInput, AssetUncheckedCreateWithoutPartRegistrationsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutPartRegistrationsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutPartRegistrationsInput, AssetUncheckedUpdateWithoutPartRegistrationsInput>
  }

  export type AssetUpdateWithoutPartRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutPartRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type UserUpsertWithoutPartRegistrationsInput = {
    update: XOR<UserUpdateWithoutPartRegistrationsInput, UserUncheckedUpdateWithoutPartRegistrationsInput>
    create: XOR<UserCreateWithoutPartRegistrationsInput, UserUncheckedCreateWithoutPartRegistrationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPartRegistrationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPartRegistrationsInput, UserUncheckedUpdateWithoutPartRegistrationsInput>
  }

  export type UserUpdateWithoutPartRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutPartRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type AssetCreateWithoutComponentsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutComponentsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutComponentsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutComponentsInput, AssetUncheckedCreateWithoutComponentsInput>
  }

  export type AssetCreateWithoutParentComponentsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutParentComponentsInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutParentComponentsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutParentComponentsInput, AssetUncheckedCreateWithoutParentComponentsInput>
  }

  export type SparePartCreateWithoutSourceComponentsInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSparePartsInput
    procurements?: ProcurementCreateNestedManyWithoutPartInput
    usages?: PartUsageCreateNestedManyWithoutPartInput
    replacements?: PartReplacementCreateNestedManyWithoutNewPartInput
    oldReplacements?: PartReplacementCreateNestedManyWithoutOldPartInput
    registrations?: NewPartRegistrationCreateNestedManyWithoutPartInput
  }

  export type SparePartUncheckedCreateWithoutSourceComponentsInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    procurements?: ProcurementUncheckedCreateNestedManyWithoutPartInput
    usages?: PartUsageUncheckedCreateNestedManyWithoutPartInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutNewPartInput
    oldReplacements?: PartReplacementUncheckedCreateNestedManyWithoutOldPartInput
    registrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutPartInput
  }

  export type SparePartCreateOrConnectWithoutSourceComponentsInput = {
    where: SparePartWhereUniqueInput
    create: XOR<SparePartCreateWithoutSourceComponentsInput, SparePartUncheckedCreateWithoutSourceComponentsInput>
  }

  export type PartUsageCreateWithoutComponentInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    part: SparePartCreateNestedOneWithoutUsagesInput
    asset?: AssetCreateNestedOneWithoutPartUsagesInput
    maintenance?: MaintenanceRecordCreateNestedOneWithoutPartUsagesInput
    usedBy: UserCreateNestedOneWithoutPartUsagesInput
  }

  export type PartUsageUncheckedCreateWithoutComponentInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    partId: string
    assetId?: string | null
    maintenanceId?: string | null
    usedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartUsageCreateOrConnectWithoutComponentInput = {
    where: PartUsageWhereUniqueInput
    create: XOR<PartUsageCreateWithoutComponentInput, PartUsageUncheckedCreateWithoutComponentInput>
  }

  export type PartUsageCreateManyComponentInputEnvelope = {
    data: PartUsageCreateManyComponentInput | PartUsageCreateManyComponentInput[]
    skipDuplicates?: boolean
  }

  export type PartReplacementCreateWithoutOldComponentInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    oldPart?: SparePartCreateNestedOneWithoutOldReplacementsInput
    newPart: SparePartCreateNestedOneWithoutReplacementsInput
    asset: AssetCreateNestedOneWithoutPartReplacementsInput
    performedBy?: UserCreateNestedOneWithoutReplacementsPerformedInput
  }

  export type PartReplacementUncheckedCreateWithoutOldComponentInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    oldPartId?: string | null
    newPartId: string
    assetId: string
    performedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartReplacementCreateOrConnectWithoutOldComponentInput = {
    where: PartReplacementWhereUniqueInput
    create: XOR<PartReplacementCreateWithoutOldComponentInput, PartReplacementUncheckedCreateWithoutOldComponentInput>
  }

  export type PartReplacementCreateManyOldComponentInputEnvelope = {
    data: PartReplacementCreateManyOldComponentInput | PartReplacementCreateManyOldComponentInput[]
    skipDuplicates?: boolean
  }

  export type ComponentTransferCreateWithoutComponentInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fromAsset: AssetCreateNestedOneWithoutTransfersFromInput
    toAsset: AssetCreateNestedOneWithoutTransfersToInput
    transferredBy: UserCreateNestedOneWithoutComponentTransfersInput
  }

  export type ComponentTransferUncheckedCreateWithoutComponentInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    fromAssetId: string
    toAssetId: string
    transferredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentTransferCreateOrConnectWithoutComponentInput = {
    where: ComponentTransferWhereUniqueInput
    create: XOR<ComponentTransferCreateWithoutComponentInput, ComponentTransferUncheckedCreateWithoutComponentInput>
  }

  export type ComponentTransferCreateManyComponentInputEnvelope = {
    data: ComponentTransferCreateManyComponentInput | ComponentTransferCreateManyComponentInput[]
    skipDuplicates?: boolean
  }

  export type ComponentMaintenanceCreateWithoutComponentInput = {
    id?: string
    description: string
    maintenanceType: string
    maintenanceDate?: Date | string
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performedBy: UserCreateNestedOneWithoutComponentMaintenanceInput
  }

  export type ComponentMaintenanceUncheckedCreateWithoutComponentInput = {
    id?: string
    description: string
    maintenanceType: string
    maintenanceDate?: Date | string
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    performedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentMaintenanceCreateOrConnectWithoutComponentInput = {
    where: ComponentMaintenanceWhereUniqueInput
    create: XOR<ComponentMaintenanceCreateWithoutComponentInput, ComponentMaintenanceUncheckedCreateWithoutComponentInput>
  }

  export type ComponentMaintenanceCreateManyComponentInputEnvelope = {
    data: ComponentMaintenanceCreateManyComponentInput | ComponentMaintenanceCreateManyComponentInput[]
    skipDuplicates?: boolean
  }

  export type AssetUpsertWithoutComponentsInput = {
    update: XOR<AssetUpdateWithoutComponentsInput, AssetUncheckedUpdateWithoutComponentsInput>
    create: XOR<AssetCreateWithoutComponentsInput, AssetUncheckedCreateWithoutComponentsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutComponentsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutComponentsInput, AssetUncheckedUpdateWithoutComponentsInput>
  }

  export type AssetUpdateWithoutComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUpsertWithoutParentComponentsInput = {
    update: XOR<AssetUpdateWithoutParentComponentsInput, AssetUncheckedUpdateWithoutParentComponentsInput>
    create: XOR<AssetCreateWithoutParentComponentsInput, AssetUncheckedCreateWithoutParentComponentsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutParentComponentsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutParentComponentsInput, AssetUncheckedUpdateWithoutParentComponentsInput>
  }

  export type AssetUpdateWithoutParentComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutParentComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type SparePartUpsertWithoutSourceComponentsInput = {
    update: XOR<SparePartUpdateWithoutSourceComponentsInput, SparePartUncheckedUpdateWithoutSourceComponentsInput>
    create: XOR<SparePartCreateWithoutSourceComponentsInput, SparePartUncheckedCreateWithoutSourceComponentsInput>
    where?: SparePartWhereInput
  }

  export type SparePartUpdateToOneWithWhereWithoutSourceComponentsInput = {
    where?: SparePartWhereInput
    data: XOR<SparePartUpdateWithoutSourceComponentsInput, SparePartUncheckedUpdateWithoutSourceComponentsInput>
  }

  export type SparePartUpdateWithoutSourceComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSparePartsNestedInput
    procurements?: ProcurementUpdateManyWithoutPartNestedInput
    usages?: PartUsageUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUpdateManyWithoutNewPartNestedInput
    oldReplacements?: PartReplacementUpdateManyWithoutOldPartNestedInput
    registrations?: NewPartRegistrationUpdateManyWithoutPartNestedInput
  }

  export type SparePartUncheckedUpdateWithoutSourceComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    procurements?: ProcurementUncheckedUpdateManyWithoutPartNestedInput
    usages?: PartUsageUncheckedUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutNewPartNestedInput
    oldReplacements?: PartReplacementUncheckedUpdateManyWithoutOldPartNestedInput
    registrations?: NewPartRegistrationUncheckedUpdateManyWithoutPartNestedInput
  }

  export type PartUsageUpsertWithWhereUniqueWithoutComponentInput = {
    where: PartUsageWhereUniqueInput
    update: XOR<PartUsageUpdateWithoutComponentInput, PartUsageUncheckedUpdateWithoutComponentInput>
    create: XOR<PartUsageCreateWithoutComponentInput, PartUsageUncheckedCreateWithoutComponentInput>
  }

  export type PartUsageUpdateWithWhereUniqueWithoutComponentInput = {
    where: PartUsageWhereUniqueInput
    data: XOR<PartUsageUpdateWithoutComponentInput, PartUsageUncheckedUpdateWithoutComponentInput>
  }

  export type PartUsageUpdateManyWithWhereWithoutComponentInput = {
    where: PartUsageScalarWhereInput
    data: XOR<PartUsageUpdateManyMutationInput, PartUsageUncheckedUpdateManyWithoutComponentInput>
  }

  export type PartReplacementUpsertWithWhereUniqueWithoutOldComponentInput = {
    where: PartReplacementWhereUniqueInput
    update: XOR<PartReplacementUpdateWithoutOldComponentInput, PartReplacementUncheckedUpdateWithoutOldComponentInput>
    create: XOR<PartReplacementCreateWithoutOldComponentInput, PartReplacementUncheckedCreateWithoutOldComponentInput>
  }

  export type PartReplacementUpdateWithWhereUniqueWithoutOldComponentInput = {
    where: PartReplacementWhereUniqueInput
    data: XOR<PartReplacementUpdateWithoutOldComponentInput, PartReplacementUncheckedUpdateWithoutOldComponentInput>
  }

  export type PartReplacementUpdateManyWithWhereWithoutOldComponentInput = {
    where: PartReplacementScalarWhereInput
    data: XOR<PartReplacementUpdateManyMutationInput, PartReplacementUncheckedUpdateManyWithoutOldComponentInput>
  }

  export type ComponentTransferUpsertWithWhereUniqueWithoutComponentInput = {
    where: ComponentTransferWhereUniqueInput
    update: XOR<ComponentTransferUpdateWithoutComponentInput, ComponentTransferUncheckedUpdateWithoutComponentInput>
    create: XOR<ComponentTransferCreateWithoutComponentInput, ComponentTransferUncheckedCreateWithoutComponentInput>
  }

  export type ComponentTransferUpdateWithWhereUniqueWithoutComponentInput = {
    where: ComponentTransferWhereUniqueInput
    data: XOR<ComponentTransferUpdateWithoutComponentInput, ComponentTransferUncheckedUpdateWithoutComponentInput>
  }

  export type ComponentTransferUpdateManyWithWhereWithoutComponentInput = {
    where: ComponentTransferScalarWhereInput
    data: XOR<ComponentTransferUpdateManyMutationInput, ComponentTransferUncheckedUpdateManyWithoutComponentInput>
  }

  export type ComponentMaintenanceUpsertWithWhereUniqueWithoutComponentInput = {
    where: ComponentMaintenanceWhereUniqueInput
    update: XOR<ComponentMaintenanceUpdateWithoutComponentInput, ComponentMaintenanceUncheckedUpdateWithoutComponentInput>
    create: XOR<ComponentMaintenanceCreateWithoutComponentInput, ComponentMaintenanceUncheckedCreateWithoutComponentInput>
  }

  export type ComponentMaintenanceUpdateWithWhereUniqueWithoutComponentInput = {
    where: ComponentMaintenanceWhereUniqueInput
    data: XOR<ComponentMaintenanceUpdateWithoutComponentInput, ComponentMaintenanceUncheckedUpdateWithoutComponentInput>
  }

  export type ComponentMaintenanceUpdateManyWithWhereWithoutComponentInput = {
    where: ComponentMaintenanceScalarWhereInput
    data: XOR<ComponentMaintenanceUpdateManyMutationInput, ComponentMaintenanceUncheckedUpdateManyWithoutComponentInput>
  }

  export type AssetComponentCreateWithoutTransfersInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutComponentsInput
    parentAsset?: AssetCreateNestedOneWithoutParentComponentsInput
    sourcePart?: SparePartCreateNestedOneWithoutSourceComponentsInput
    usages?: PartUsageCreateNestedManyWithoutComponentInput
    replacements?: PartReplacementCreateNestedManyWithoutOldComponentInput
    maintenanceRecords?: ComponentMaintenanceCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentUncheckedCreateWithoutTransfersInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId: string
    parentAssetId?: string | null
    sourcePartId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: PartUsageUncheckedCreateNestedManyWithoutComponentInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutOldComponentInput
    maintenanceRecords?: ComponentMaintenanceUncheckedCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentCreateOrConnectWithoutTransfersInput = {
    where: AssetComponentWhereUniqueInput
    create: XOR<AssetComponentCreateWithoutTransfersInput, AssetComponentUncheckedCreateWithoutTransfersInput>
  }

  export type AssetCreateWithoutTransfersFromInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutTransfersFromInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutTransfersFromInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutTransfersFromInput, AssetUncheckedCreateWithoutTransfersFromInput>
  }

  export type AssetCreateWithoutTransfersToInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    inventories?: InventoryCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutTransfersToInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutTransfersToInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutTransfersToInput, AssetUncheckedCreateWithoutTransfersToInput>
  }

  export type UserCreateWithoutComponentTransfersInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutComponentTransfersInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutComponentTransfersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutComponentTransfersInput, UserUncheckedCreateWithoutComponentTransfersInput>
  }

  export type AssetComponentUpsertWithoutTransfersInput = {
    update: XOR<AssetComponentUpdateWithoutTransfersInput, AssetComponentUncheckedUpdateWithoutTransfersInput>
    create: XOR<AssetComponentCreateWithoutTransfersInput, AssetComponentUncheckedCreateWithoutTransfersInput>
    where?: AssetComponentWhereInput
  }

  export type AssetComponentUpdateToOneWithWhereWithoutTransfersInput = {
    where?: AssetComponentWhereInput
    data: XOR<AssetComponentUpdateWithoutTransfersInput, AssetComponentUncheckedUpdateWithoutTransfersInput>
  }

  export type AssetComponentUpdateWithoutTransfersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutComponentsNestedInput
    parentAsset?: AssetUpdateOneWithoutParentComponentsNestedInput
    sourcePart?: SparePartUpdateOneWithoutSourceComponentsNestedInput
    usages?: PartUsageUpdateManyWithoutComponentNestedInput
    replacements?: PartReplacementUpdateManyWithoutOldComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUpdateManyWithoutComponentNestedInput
  }

  export type AssetComponentUncheckedUpdateWithoutTransfersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId?: StringFieldUpdateOperationsInput | string
    parentAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    sourcePartId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: PartUsageUncheckedUpdateManyWithoutComponentNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutOldComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type AssetUpsertWithoutTransfersFromInput = {
    update: XOR<AssetUpdateWithoutTransfersFromInput, AssetUncheckedUpdateWithoutTransfersFromInput>
    create: XOR<AssetCreateWithoutTransfersFromInput, AssetUncheckedCreateWithoutTransfersFromInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutTransfersFromInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutTransfersFromInput, AssetUncheckedUpdateWithoutTransfersFromInput>
  }

  export type AssetUpdateWithoutTransfersFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutTransfersFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUpsertWithoutTransfersToInput = {
    update: XOR<AssetUpdateWithoutTransfersToInput, AssetUncheckedUpdateWithoutTransfersToInput>
    create: XOR<AssetCreateWithoutTransfersToInput, AssetUncheckedCreateWithoutTransfersToInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutTransfersToInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutTransfersToInput, AssetUncheckedUpdateWithoutTransfersToInput>
  }

  export type AssetUpdateWithoutTransfersToInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutTransfersToInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type UserUpsertWithoutComponentTransfersInput = {
    update: XOR<UserUpdateWithoutComponentTransfersInput, UserUncheckedUpdateWithoutComponentTransfersInput>
    create: XOR<UserCreateWithoutComponentTransfersInput, UserUncheckedCreateWithoutComponentTransfersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutComponentTransfersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutComponentTransfersInput, UserUncheckedUpdateWithoutComponentTransfersInput>
  }

  export type UserUpdateWithoutComponentTransfersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutComponentTransfersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type AssetComponentCreateWithoutMaintenanceRecordsInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutComponentsInput
    parentAsset?: AssetCreateNestedOneWithoutParentComponentsInput
    sourcePart?: SparePartCreateNestedOneWithoutSourceComponentsInput
    usages?: PartUsageCreateNestedManyWithoutComponentInput
    replacements?: PartReplacementCreateNestedManyWithoutOldComponentInput
    transfers?: ComponentTransferCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentUncheckedCreateWithoutMaintenanceRecordsInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId: string
    parentAssetId?: string | null
    sourcePartId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: PartUsageUncheckedCreateNestedManyWithoutComponentInput
    replacements?: PartReplacementUncheckedCreateNestedManyWithoutOldComponentInput
    transfers?: ComponentTransferUncheckedCreateNestedManyWithoutComponentInput
  }

  export type AssetComponentCreateOrConnectWithoutMaintenanceRecordsInput = {
    where: AssetComponentWhereUniqueInput
    create: XOR<AssetComponentCreateWithoutMaintenanceRecordsInput, AssetComponentUncheckedCreateWithoutMaintenanceRecordsInput>
  }

  export type UserCreateWithoutComponentMaintenanceInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutComponentMaintenanceInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutComponentMaintenanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutComponentMaintenanceInput, UserUncheckedCreateWithoutComponentMaintenanceInput>
  }

  export type AssetComponentUpsertWithoutMaintenanceRecordsInput = {
    update: XOR<AssetComponentUpdateWithoutMaintenanceRecordsInput, AssetComponentUncheckedUpdateWithoutMaintenanceRecordsInput>
    create: XOR<AssetComponentCreateWithoutMaintenanceRecordsInput, AssetComponentUncheckedCreateWithoutMaintenanceRecordsInput>
    where?: AssetComponentWhereInput
  }

  export type AssetComponentUpdateToOneWithWhereWithoutMaintenanceRecordsInput = {
    where?: AssetComponentWhereInput
    data: XOR<AssetComponentUpdateWithoutMaintenanceRecordsInput, AssetComponentUncheckedUpdateWithoutMaintenanceRecordsInput>
  }

  export type AssetComponentUpdateWithoutMaintenanceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutComponentsNestedInput
    parentAsset?: AssetUpdateOneWithoutParentComponentsNestedInput
    sourcePart?: SparePartUpdateOneWithoutSourceComponentsNestedInput
    usages?: PartUsageUpdateManyWithoutComponentNestedInput
    replacements?: PartReplacementUpdateManyWithoutOldComponentNestedInput
    transfers?: ComponentTransferUpdateManyWithoutComponentNestedInput
  }

  export type AssetComponentUncheckedUpdateWithoutMaintenanceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId?: StringFieldUpdateOperationsInput | string
    parentAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    sourcePartId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: PartUsageUncheckedUpdateManyWithoutComponentNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutOldComponentNestedInput
    transfers?: ComponentTransferUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type UserUpsertWithoutComponentMaintenanceInput = {
    update: XOR<UserUpdateWithoutComponentMaintenanceInput, UserUncheckedUpdateWithoutComponentMaintenanceInput>
    create: XOR<UserCreateWithoutComponentMaintenanceInput, UserUncheckedCreateWithoutComponentMaintenanceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutComponentMaintenanceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutComponentMaintenanceInput, UserUncheckedUpdateWithoutComponentMaintenanceInput>
  }

  export type UserUpdateWithoutComponentMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutComponentMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type AssetCreateWithoutInventoriesInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutAssetsInput
    vendor?: VendorCreateNestedOneWithoutAssetsInput
    location?: LocationCreateNestedOneWithoutAssetsInput
    department?: DepartmentCreateNestedOneWithoutAssetsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedAssetsInput
    assetRequests?: AssetRequestCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutAssetInput
    components?: AssetComponentCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferCreateNestedManyWithoutToAssetInput
  }

  export type AssetUncheckedCreateWithoutInventoriesInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutAssetInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutAssetInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAssetInput
    disposalRecord?: DisposalRecordUncheckedCreateNestedOneWithoutAssetInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutAssetInput
    partReplacements?: PartReplacementUncheckedCreateNestedManyWithoutAssetInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutAssetInput
    components?: AssetComponentUncheckedCreateNestedManyWithoutAssetInput
    parentComponents?: AssetComponentUncheckedCreateNestedManyWithoutParentAssetInput
    transfersFrom?: ComponentTransferUncheckedCreateNestedManyWithoutFromAssetInput
    transfersTo?: ComponentTransferUncheckedCreateNestedManyWithoutToAssetInput
  }

  export type AssetCreateOrConnectWithoutInventoriesInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutInventoriesInput, AssetUncheckedCreateWithoutInventoriesInput>
  }

  export type DepartmentCreateWithoutInventoriesInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    manager?: UserCreateNestedOneWithoutManagedDepartmentsInput
    users?: UserCreateNestedManyWithoutDepartmentInput
    assets?: AssetCreateNestedManyWithoutDepartmentInput
    assetRequests?: AssetRequestCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutInventoriesInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    managerId?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    assets?: AssetUncheckedCreateNestedManyWithoutDepartmentInput
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutInventoriesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutInventoriesInput, DepartmentUncheckedCreateWithoutInventoriesInput>
  }

  export type UserCreateWithoutCustodiedInventoriesInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutCustodiedInventoriesInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutCustodiedInventoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCustodiedInventoriesInput, UserUncheckedCreateWithoutCustodiedInventoriesInput>
  }

  export type InventoryLoanCreateWithoutInventoryInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    borrower: UserCreateNestedOneWithoutBorrowedLoansInput
    approvedBy?: UserCreateNestedOneWithoutApprovedLoansInput
    responsible: UserCreateNestedOneWithoutResponsibleLoansInput
  }

  export type InventoryLoanUncheckedCreateWithoutInventoryInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    borrowerId: string
    approvedById?: string | null
    responsibleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryLoanCreateOrConnectWithoutInventoryInput = {
    where: InventoryLoanWhereUniqueInput
    create: XOR<InventoryLoanCreateWithoutInventoryInput, InventoryLoanUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryLoanCreateManyInventoryInputEnvelope = {
    data: InventoryLoanCreateManyInventoryInput | InventoryLoanCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type AssetUpsertWithoutInventoriesInput = {
    update: XOR<AssetUpdateWithoutInventoriesInput, AssetUncheckedUpdateWithoutInventoriesInput>
    create: XOR<AssetCreateWithoutInventoriesInput, AssetUncheckedCreateWithoutInventoriesInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutInventoriesInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutInventoriesInput, AssetUncheckedUpdateWithoutInventoriesInput>
  }

  export type AssetUpdateWithoutInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
  }

  export type DepartmentUpsertWithoutInventoriesInput = {
    update: XOR<DepartmentUpdateWithoutInventoriesInput, DepartmentUncheckedUpdateWithoutInventoriesInput>
    create: XOR<DepartmentCreateWithoutInventoriesInput, DepartmentUncheckedCreateWithoutInventoriesInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutInventoriesInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutInventoriesInput, DepartmentUncheckedUpdateWithoutInventoriesInput>
  }

  export type DepartmentUpdateWithoutInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manager?: UserUpdateOneWithoutManagedDepartmentsNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
    assets?: AssetUpdateManyWithoutDepartmentNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    assets?: AssetUncheckedUpdateManyWithoutDepartmentNestedInput
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type UserUpsertWithoutCustodiedInventoriesInput = {
    update: XOR<UserUpdateWithoutCustodiedInventoriesInput, UserUncheckedUpdateWithoutCustodiedInventoriesInput>
    create: XOR<UserCreateWithoutCustodiedInventoriesInput, UserUncheckedCreateWithoutCustodiedInventoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCustodiedInventoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCustodiedInventoriesInput, UserUncheckedUpdateWithoutCustodiedInventoriesInput>
  }

  export type UserUpdateWithoutCustodiedInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutCustodiedInventoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type InventoryLoanUpsertWithWhereUniqueWithoutInventoryInput = {
    where: InventoryLoanWhereUniqueInput
    update: XOR<InventoryLoanUpdateWithoutInventoryInput, InventoryLoanUncheckedUpdateWithoutInventoryInput>
    create: XOR<InventoryLoanCreateWithoutInventoryInput, InventoryLoanUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryLoanUpdateWithWhereUniqueWithoutInventoryInput = {
    where: InventoryLoanWhereUniqueInput
    data: XOR<InventoryLoanUpdateWithoutInventoryInput, InventoryLoanUncheckedUpdateWithoutInventoryInput>
  }

  export type InventoryLoanUpdateManyWithWhereWithoutInventoryInput = {
    where: InventoryLoanScalarWhereInput
    data: XOR<InventoryLoanUpdateManyMutationInput, InventoryLoanUncheckedUpdateManyWithoutInventoryInput>
  }

  export type InventoryCreateWithoutLoansInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutInventoriesInput
    department: DepartmentCreateNestedOneWithoutInventoriesInput
    custodian?: UserCreateNestedOneWithoutCustodiedInventoriesInput
  }

  export type InventoryUncheckedCreateWithoutLoansInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    assetId: string
    departmentId: string
    custodianId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryCreateOrConnectWithoutLoansInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutLoansInput, InventoryUncheckedCreateWithoutLoansInput>
  }

  export type UserCreateWithoutBorrowedLoansInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutBorrowedLoansInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutBorrowedLoansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBorrowedLoansInput, UserUncheckedCreateWithoutBorrowedLoansInput>
  }

  export type UserCreateWithoutApprovedLoansInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    responsibleLoans?: InventoryLoanCreateNestedManyWithoutResponsibleInput
  }

  export type UserUncheckedCreateWithoutApprovedLoansInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    responsibleLoans?: InventoryLoanUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type UserCreateOrConnectWithoutApprovedLoansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovedLoansInput, UserUncheckedCreateWithoutApprovedLoansInput>
  }

  export type UserCreateWithoutResponsibleLoansInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutUsersInput
    assetRequests?: AssetRequestCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordCreateNestedManyWithoutAuditorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanCreateNestedManyWithoutApprovedByInput
  }

  export type UserUncheckedCreateWithoutResponsibleLoansInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
    assetRequests?: AssetRequestUncheckedCreateNestedManyWithoutRequesterInput
    approvedRequests?: AssetRequestUncheckedCreateNestedManyWithoutApprovedByInput
    assignedAssets?: AssetUncheckedCreateNestedManyWithoutAssignedToInput
    maintenanceRecords?: MaintenanceRecordUncheckedCreateNestedManyWithoutTechnicianInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    auditRecords?: AuditRecordUncheckedCreateNestedManyWithoutAuditorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    procurementsOrdered?: ProcurementUncheckedCreateNestedManyWithoutOrderedByInput
    partUsages?: PartUsageUncheckedCreateNestedManyWithoutUsedByInput
    replacementsPerformed?: PartReplacementUncheckedCreateNestedManyWithoutPerformedByInput
    partRegistrations?: NewPartRegistrationUncheckedCreateNestedManyWithoutRegisteredByInput
    componentTransfers?: ComponentTransferUncheckedCreateNestedManyWithoutTransferredByInput
    componentMaintenance?: ComponentMaintenanceUncheckedCreateNestedManyWithoutPerformedByInput
    custodiedInventories?: InventoryUncheckedCreateNestedManyWithoutCustodianInput
    borrowedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutBorrowerInput
    approvedLoans?: InventoryLoanUncheckedCreateNestedManyWithoutApprovedByInput
  }

  export type UserCreateOrConnectWithoutResponsibleLoansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResponsibleLoansInput, UserUncheckedCreateWithoutResponsibleLoansInput>
  }

  export type InventoryUpsertWithoutLoansInput = {
    update: XOR<InventoryUpdateWithoutLoansInput, InventoryUncheckedUpdateWithoutLoansInput>
    create: XOR<InventoryCreateWithoutLoansInput, InventoryUncheckedCreateWithoutLoansInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutLoansInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutLoansInput, InventoryUncheckedUpdateWithoutLoansInput>
  }

  export type InventoryUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutInventoriesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutInventoriesNestedInput
    custodian?: UserUpdateOneWithoutCustodiedInventoriesNestedInput
  }

  export type InventoryUncheckedUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    assetId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    custodianId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutBorrowedLoansInput = {
    update: XOR<UserUpdateWithoutBorrowedLoansInput, UserUncheckedUpdateWithoutBorrowedLoansInput>
    create: XOR<UserCreateWithoutBorrowedLoansInput, UserUncheckedCreateWithoutBorrowedLoansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBorrowedLoansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBorrowedLoansInput, UserUncheckedUpdateWithoutBorrowedLoansInput>
  }

  export type UserUpdateWithoutBorrowedLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutBorrowedLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUpsertWithoutApprovedLoansInput = {
    update: XOR<UserUpdateWithoutApprovedLoansInput, UserUncheckedUpdateWithoutApprovedLoansInput>
    create: XOR<UserCreateWithoutApprovedLoansInput, UserUncheckedCreateWithoutApprovedLoansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovedLoansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovedLoansInput, UserUncheckedUpdateWithoutApprovedLoansInput>
  }

  export type UserUpdateWithoutApprovedLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovedLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUpsertWithoutResponsibleLoansInput = {
    update: XOR<UserUpdateWithoutResponsibleLoansInput, UserUncheckedUpdateWithoutResponsibleLoansInput>
    create: XOR<UserCreateWithoutResponsibleLoansInput, UserUncheckedCreateWithoutResponsibleLoansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResponsibleLoansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResponsibleLoansInput, UserUncheckedUpdateWithoutResponsibleLoansInput>
  }

  export type UserUpdateWithoutResponsibleLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
  }

  export type UserUncheckedUpdateWithoutResponsibleLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
  }

  export type AssetRequestCreateManyRequesterInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    departmentId: string
    assetId?: string | null
    approvedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetRequestCreateManyApprovedByInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    requesterId: string
    departmentId: string
    assetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetCreateManyAssignedToInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
  }

  export type MaintenanceRecordCreateManyTechnicianInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    assetId: string
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentCreateManyManagerInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    budgetLimit?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditRecordCreateManyAuditorInput = {
    id?: string
    auditType: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.AuditStatus
    findings?: string | null
    recommendations?: string | null
    assetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProcurementCreateManyOrderedByInput = {
    id?: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.ProcurementStatus
    orderedDate?: Date | string
    expectedDate?: Date | string | null
    receivedDate?: Date | string | null
    receivedQuantity?: number | null
    invoiceNumber?: string | null
    notes?: string | null
    partId: string
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartUsageCreateManyUsedByInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    partId: string
    assetId?: string | null
    componentId?: string | null
    maintenanceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartReplacementCreateManyPerformedByInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    oldPartId?: string | null
    oldComponentId?: string | null
    newPartId: string
    assetId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewPartRegistrationCreateManyRegisteredByInput = {
    id?: string
    registrationNumber: string
    serialNumber?: string | null
    assetTag?: string | null
    status?: $Enums.RegistrationStatus
    registeredDate?: Date | string | null
    notes?: string | null
    partId: string
    assetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentTransferCreateManyTransferredByInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    componentId: string
    fromAssetId: string
    toAssetId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentMaintenanceCreateManyPerformedByInput = {
    id?: string
    description: string
    maintenanceType: string
    maintenanceDate?: Date | string
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    componentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryCreateManyCustodianInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    assetId: string
    departmentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryLoanCreateManyBorrowerInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    inventoryId: string
    approvedById?: string | null
    responsibleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryLoanCreateManyApprovedByInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    inventoryId: string
    borrowerId: string
    responsibleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryLoanCreateManyResponsibleInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    inventoryId: string
    borrowerId: string
    approvedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetRequestUpdateWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutAssetRequestsNestedInput
    asset?: AssetUpdateOneWithoutAssetRequestsNestedInput
    approvedBy?: UserUpdateOneWithoutApprovedRequestsNestedInput
  }

  export type AssetRequestUncheckedUpdateWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetRequestUncheckedUpdateManyWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetRequestUpdateWithoutApprovedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutAssetRequestsNestedInput
    department?: DepartmentUpdateOneRequiredWithoutAssetRequestsNestedInput
    asset?: AssetUpdateOneWithoutAssetRequestsNestedInput
  }

  export type AssetRequestUncheckedUpdateWithoutApprovedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetRequestUncheckedUpdateManyWithoutApprovedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MaintenanceRecordUpdateWithoutTechnicianInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutMaintenanceRecordsNestedInput
    vendor?: VendorUpdateOneWithoutMaintenanceRecordsNestedInput
    partUsages?: PartUsageUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceRecordUncheckedUpdateWithoutTechnicianInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    partUsages?: PartUsageUncheckedUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceRecordUncheckedUpdateManyWithoutTechnicianInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUpdateWithoutManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutDepartmentNestedInput
    assets?: AssetUpdateManyWithoutDepartmentNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutDepartmentNestedInput
    inventories?: InventoryUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    assets?: AssetUncheckedUpdateManyWithoutDepartmentNestedInput
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutDepartmentNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    budgetLimit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditRecordUpdateWithoutAuditorInput = {
    id?: StringFieldUpdateOperationsInput | string
    auditType?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    findings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneWithoutAuditRecordsNestedInput
  }

  export type AuditRecordUncheckedUpdateWithoutAuditorInput = {
    id?: StringFieldUpdateOperationsInput | string
    auditType?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    findings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditRecordUncheckedUpdateManyWithoutAuditorInput = {
    id?: StringFieldUpdateOperationsInput | string
    auditType?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    findings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcurementUpdateWithoutOrderedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    part?: SparePartUpdateOneRequiredWithoutProcurementsNestedInput
    vendor?: VendorUpdateOneWithoutProcurementsNestedInput
  }

  export type ProcurementUncheckedUpdateWithoutOrderedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcurementUncheckedUpdateManyWithoutOrderedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageUpdateWithoutUsedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    part?: SparePartUpdateOneRequiredWithoutUsagesNestedInput
    asset?: AssetUpdateOneWithoutPartUsagesNestedInput
    component?: AssetComponentUpdateOneWithoutUsagesNestedInput
    maintenance?: MaintenanceRecordUpdateOneWithoutPartUsagesNestedInput
  }

  export type PartUsageUncheckedUpdateWithoutUsedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableStringFieldUpdateOperationsInput | string | null
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageUncheckedUpdateManyWithoutUsedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableStringFieldUpdateOperationsInput | string | null
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementUpdateWithoutPerformedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldPart?: SparePartUpdateOneWithoutOldReplacementsNestedInput
    oldComponent?: AssetComponentUpdateOneWithoutReplacementsNestedInput
    newPart?: SparePartUpdateOneRequiredWithoutReplacementsNestedInput
    asset?: AssetUpdateOneRequiredWithoutPartReplacementsNestedInput
  }

  export type PartReplacementUncheckedUpdateWithoutPerformedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    oldPartId?: NullableStringFieldUpdateOperationsInput | string | null
    oldComponentId?: NullableStringFieldUpdateOperationsInput | string | null
    newPartId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementUncheckedUpdateManyWithoutPerformedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    oldPartId?: NullableStringFieldUpdateOperationsInput | string | null
    oldComponentId?: NullableStringFieldUpdateOperationsInput | string | null
    newPartId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewPartRegistrationUpdateWithoutRegisteredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    part?: SparePartUpdateOneRequiredWithoutRegistrationsNestedInput
    asset?: AssetUpdateOneWithoutPartRegistrationsNestedInput
  }

  export type NewPartRegistrationUncheckedUpdateWithoutRegisteredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTransferUpdateWithoutTransferredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    component?: AssetComponentUpdateOneRequiredWithoutTransfersNestedInput
    fromAsset?: AssetUpdateOneRequiredWithoutTransfersFromNestedInput
    toAsset?: AssetUpdateOneRequiredWithoutTransfersToNestedInput
  }

  export type ComponentTransferUncheckedUpdateWithoutTransferredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: StringFieldUpdateOperationsInput | string
    fromAssetId?: StringFieldUpdateOperationsInput | string
    toAssetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTransferUncheckedUpdateManyWithoutTransferredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: StringFieldUpdateOperationsInput | string
    fromAssetId?: StringFieldUpdateOperationsInput | string
    toAssetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentMaintenanceUpdateWithoutPerformedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    component?: AssetComponentUpdateOneRequiredWithoutMaintenanceRecordsNestedInput
  }

  export type ComponentMaintenanceUncheckedUpdateWithoutPerformedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUpdateWithoutCustodianInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutInventoriesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutInventoriesNestedInput
    loans?: InventoryLoanUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutCustodianInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    assetId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loans?: InventoryLoanUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateManyWithoutCustodianInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    assetId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryLoanUpdateWithoutBorrowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUpdateOneRequiredWithoutLoansNestedInput
    approvedBy?: UserUpdateOneWithoutApprovedLoansNestedInput
    responsible?: UserUpdateOneRequiredWithoutResponsibleLoansNestedInput
  }

  export type InventoryLoanUncheckedUpdateWithoutBorrowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    inventoryId?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryLoanUncheckedUpdateManyWithoutBorrowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    inventoryId?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryLoanUpdateWithoutApprovedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUpdateOneRequiredWithoutLoansNestedInput
    borrower?: UserUpdateOneRequiredWithoutBorrowedLoansNestedInput
    responsible?: UserUpdateOneRequiredWithoutResponsibleLoansNestedInput
  }

  export type InventoryLoanUncheckedUpdateWithoutApprovedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    inventoryId?: StringFieldUpdateOperationsInput | string
    borrowerId?: StringFieldUpdateOperationsInput | string
    responsibleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryLoanUncheckedUpdateManyWithoutApprovedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    inventoryId?: StringFieldUpdateOperationsInput | string
    borrowerId?: StringFieldUpdateOperationsInput | string
    responsibleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryLoanUpdateWithoutResponsibleInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUpdateOneRequiredWithoutLoansNestedInput
    borrower?: UserUpdateOneRequiredWithoutBorrowedLoansNestedInput
    approvedBy?: UserUpdateOneWithoutApprovedLoansNestedInput
  }

  export type InventoryLoanUncheckedUpdateWithoutResponsibleInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    inventoryId?: StringFieldUpdateOperationsInput | string
    borrowerId?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryLoanUncheckedUpdateManyWithoutResponsibleInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    inventoryId?: StringFieldUpdateOperationsInput | string
    borrowerId?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyDepartmentInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetCreateManyDepartmentInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    locationId?: string | null
    assignedToId?: string | null
  }

  export type AssetRequestCreateManyDepartmentInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    requesterId: string
    assetId?: string | null
    approvedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryCreateManyDepartmentInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    assetId: string
    custodianId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetRequests?: AssetRequestUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutRequesterNestedInput
    approvedRequests?: AssetRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    assignedAssets?: AssetUncheckedUpdateManyWithoutAssignedToNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutTechnicianNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAuditorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    procurementsOrdered?: ProcurementUncheckedUpdateManyWithoutOrderedByNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutUsedByNestedInput
    replacementsPerformed?: PartReplacementUncheckedUpdateManyWithoutPerformedByNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutRegisteredByNestedInput
    componentTransfers?: ComponentTransferUncheckedUpdateManyWithoutTransferredByNestedInput
    componentMaintenance?: ComponentMaintenanceUncheckedUpdateManyWithoutPerformedByNestedInput
    custodiedInventories?: InventoryUncheckedUpdateManyWithoutCustodianNestedInput
    borrowedLoans?: InventoryLoanUncheckedUpdateManyWithoutBorrowerNestedInput
    approvedLoans?: InventoryLoanUncheckedUpdateManyWithoutApprovedByNestedInput
    responsibleLoans?: InventoryLoanUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetRequestUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutAssetRequestsNestedInput
    asset?: AssetUpdateOneWithoutAssetRequestsNestedInput
    approvedBy?: UserUpdateOneWithoutApprovedRequestsNestedInput
  }

  export type AssetRequestUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetRequestUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutInventoriesNestedInput
    custodian?: UserUpdateOneWithoutCustodiedInventoriesNestedInput
    loans?: InventoryLoanUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    assetId?: StringFieldUpdateOperationsInput | string
    custodianId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loans?: InventoryLoanUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    assetId?: StringFieldUpdateOperationsInput | string
    custodianId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCreateManyLocationInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    vendorId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
  }

  export type AssetUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateManyParentInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetCreateManyCategoryInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
  }

  export type CategoryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUpdateManyWithoutParentNestedInput
    assets?: AssetUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    assets?: AssetUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetCreateManyVendorInput = {
    id?: string
    assetTag: string
    name: string
    description?: string | null
    serialNumber?: string | null
    model?: string | null
    brand?: string | null
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    currentValue?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    status?: $Enums.AssetStatus
    condition?: string | null
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
    locationId?: string | null
    departmentId?: string | null
    assignedToId?: string | null
  }

  export type MaintenanceContractCreateManyVendorInput = {
    id?: string
    contractNumber: string
    description: string
    startDate: Date | string
    endDate: Date | string
    cost: Decimal | DecimalJsLike | number | string
    terms?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceRecordCreateManyVendorInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    assetId: string
    technicianId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SparePartCreateManyVendorInput = {
    id?: string
    partNumber: string
    name: string
    description?: string | null
    brand?: string | null
    model?: string | null
    category?: $Enums.SparePartCategory
    partType?: $Enums.SparePartType
    status?: $Enums.SparePartStatus
    unitPrice: Decimal | DecimalJsLike | number | string
    stockLevel?: number
    minStockLevel?: number
    maxStockLevel?: number
    reorderPoint?: number
    storageLocation?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartCreatecompatibleWithInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProcurementCreateManyVendorInput = {
    id?: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.ProcurementStatus
    orderedDate?: Date | string
    expectedDate?: Date | string | null
    receivedDate?: Date | string | null
    receivedQuantity?: number | null
    invoiceNumber?: string | null
    notes?: string | null
    partId: string
    orderedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutAssetsNestedInput
    location?: LocationUpdateOneWithoutAssetsNestedInput
    department?: DepartmentUpdateOneWithoutAssetsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedAssetsNestedInput
    assetRequests?: AssetRequestUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    assetRequests?: AssetRequestUncheckedUpdateManyWithoutAssetNestedInput
    maintenanceRecords?: MaintenanceRecordUncheckedUpdateManyWithoutAssetNestedInput
    auditRecords?: AuditRecordUncheckedUpdateManyWithoutAssetNestedInput
    disposalRecord?: DisposalRecordUncheckedUpdateOneWithoutAssetNestedInput
    partUsages?: PartUsageUncheckedUpdateManyWithoutAssetNestedInput
    partReplacements?: PartReplacementUncheckedUpdateManyWithoutAssetNestedInput
    partRegistrations?: NewPartRegistrationUncheckedUpdateManyWithoutAssetNestedInput
    components?: AssetComponentUncheckedUpdateManyWithoutAssetNestedInput
    parentComponents?: AssetComponentUncheckedUpdateManyWithoutParentAssetNestedInput
    transfersFrom?: ComponentTransferUncheckedUpdateManyWithoutFromAssetNestedInput
    transfersTo?: ComponentTransferUncheckedUpdateManyWithoutToAssetNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currentValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MaintenanceContractUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    terms?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceContractUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    terms?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceContractUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    terms?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceRecordUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutMaintenanceRecordsNestedInput
    technician?: UserUpdateOneWithoutMaintenanceRecordsNestedInput
    partUsages?: PartUsageUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceRecordUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: StringFieldUpdateOperationsInput | string
    technicianId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    partUsages?: PartUsageUncheckedUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceRecordUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: StringFieldUpdateOperationsInput | string
    technicianId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SparePartUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    procurements?: ProcurementUpdateManyWithoutPartNestedInput
    usages?: PartUsageUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUpdateManyWithoutNewPartNestedInput
    oldReplacements?: PartReplacementUpdateManyWithoutOldPartNestedInput
    registrations?: NewPartRegistrationUpdateManyWithoutPartNestedInput
    sourceComponents?: AssetComponentUpdateManyWithoutSourcePartNestedInput
  }

  export type SparePartUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    procurements?: ProcurementUncheckedUpdateManyWithoutPartNestedInput
    usages?: PartUsageUncheckedUpdateManyWithoutPartNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutNewPartNestedInput
    oldReplacements?: PartReplacementUncheckedUpdateManyWithoutOldPartNestedInput
    registrations?: NewPartRegistrationUncheckedUpdateManyWithoutPartNestedInput
    sourceComponents?: AssetComponentUncheckedUpdateManyWithoutSourcePartNestedInput
  }

  export type SparePartUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    partNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumSparePartCategoryFieldUpdateOperationsInput | $Enums.SparePartCategory
    partType?: EnumSparePartTypeFieldUpdateOperationsInput | $Enums.SparePartType
    status?: EnumSparePartStatusFieldUpdateOperationsInput | $Enums.SparePartStatus
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stockLevel?: IntFieldUpdateOperationsInput | number
    minStockLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    compatibleWith?: SparePartUpdatecompatibleWithInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcurementUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    part?: SparePartUpdateOneRequiredWithoutProcurementsNestedInput
    orderedBy?: UserUpdateOneRequiredWithoutProcurementsOrderedNestedInput
  }

  export type ProcurementUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    orderedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcurementUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    orderedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetRequestCreateManyAssetInput = {
    id?: string
    requestNumber: string
    description: string
    justification: string
    priority?: string
    status?: $Enums.RequestStatus
    requestedDate?: Date | string
    approvedDate?: Date | string | null
    allocatedDate?: Date | string | null
    rejectionReason?: string | null
    notes?: string | null
    requesterId: string
    departmentId: string
    approvedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceRecordCreateManyAssetInput = {
    id?: string
    maintenanceType: string
    description: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.MaintenanceStatus
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    technicianId?: string | null
    vendorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditRecordCreateManyAssetInput = {
    id?: string
    auditType: string
    scheduledDate: Date | string
    completedDate?: Date | string | null
    status?: $Enums.AuditStatus
    findings?: string | null
    recommendations?: string | null
    auditorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartUsageCreateManyAssetInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    partId: string
    componentId?: string | null
    maintenanceId?: string | null
    usedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartReplacementCreateManyAssetInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    oldPartId?: string | null
    oldComponentId?: string | null
    newPartId: string
    performedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewPartRegistrationCreateManyAssetInput = {
    id?: string
    registrationNumber: string
    serialNumber?: string | null
    assetTag?: string | null
    status?: $Enums.RegistrationStatus
    registeredDate?: Date | string | null
    notes?: string | null
    partId: string
    registeredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetComponentCreateManyAssetInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    parentAssetId?: string | null
    sourcePartId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetComponentCreateManyParentAssetInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId: string
    sourcePartId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentTransferCreateManyFromAssetInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    componentId: string
    toAssetId: string
    transferredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentTransferCreateManyToAssetInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    componentId: string
    fromAssetId: string
    transferredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryCreateManyAssetInput = {
    id?: string
    inventoryTag: string
    quantity?: number
    availableQty?: number
    condition?: string
    status?: string
    location?: string | null
    notes?: string | null
    minStockLevel?: number | null
    departmentId: string
    custodianId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetRequestUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutAssetRequestsNestedInput
    department?: DepartmentUpdateOneRequiredWithoutAssetRequestsNestedInput
    approvedBy?: UserUpdateOneWithoutApprovedRequestsNestedInput
  }

  export type AssetRequestUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetRequestUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestNumber?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    justification?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    requestedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allocatedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceRecordUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technician?: UserUpdateOneWithoutMaintenanceRecordsNestedInput
    vendor?: VendorUpdateOneWithoutMaintenanceRecordsNestedInput
    partUsages?: PartUsageUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceRecordUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    technicianId?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    partUsages?: PartUsageUncheckedUpdateManyWithoutMaintenanceNestedInput
  }

  export type MaintenanceRecordUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    technicianId?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditRecordUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    auditType?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    findings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditor?: UserUpdateOneRequiredWithoutAuditRecordsNestedInput
  }

  export type AuditRecordUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    auditType?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    findings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    auditorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditRecordUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    auditType?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    findings?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    auditorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    part?: SparePartUpdateOneRequiredWithoutUsagesNestedInput
    component?: AssetComponentUpdateOneWithoutUsagesNestedInput
    maintenance?: MaintenanceRecordUpdateOneWithoutPartUsagesNestedInput
    usedBy?: UserUpdateOneRequiredWithoutPartUsagesNestedInput
  }

  export type PartUsageUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    componentId?: NullableStringFieldUpdateOperationsInput | string | null
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    usedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    componentId?: NullableStringFieldUpdateOperationsInput | string | null
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    usedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldPart?: SparePartUpdateOneWithoutOldReplacementsNestedInput
    oldComponent?: AssetComponentUpdateOneWithoutReplacementsNestedInput
    newPart?: SparePartUpdateOneRequiredWithoutReplacementsNestedInput
    performedBy?: UserUpdateOneWithoutReplacementsPerformedNestedInput
  }

  export type PartReplacementUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    oldPartId?: NullableStringFieldUpdateOperationsInput | string | null
    oldComponentId?: NullableStringFieldUpdateOperationsInput | string | null
    newPartId?: StringFieldUpdateOperationsInput | string
    performedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    oldPartId?: NullableStringFieldUpdateOperationsInput | string | null
    oldComponentId?: NullableStringFieldUpdateOperationsInput | string | null
    newPartId?: StringFieldUpdateOperationsInput | string
    performedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewPartRegistrationUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    part?: SparePartUpdateOneRequiredWithoutRegistrationsNestedInput
    registeredBy?: UserUpdateOneRequiredWithoutPartRegistrationsNestedInput
  }

  export type NewPartRegistrationUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    registeredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewPartRegistrationUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    registeredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetComponentUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentAsset?: AssetUpdateOneWithoutParentComponentsNestedInput
    sourcePart?: SparePartUpdateOneWithoutSourceComponentsNestedInput
    usages?: PartUsageUpdateManyWithoutComponentNestedInput
    replacements?: PartReplacementUpdateManyWithoutOldComponentNestedInput
    transfers?: ComponentTransferUpdateManyWithoutComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUpdateManyWithoutComponentNestedInput
  }

  export type AssetComponentUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    parentAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    sourcePartId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: PartUsageUncheckedUpdateManyWithoutComponentNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutOldComponentNestedInput
    transfers?: ComponentTransferUncheckedUpdateManyWithoutComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type AssetComponentUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    parentAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    sourcePartId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetComponentUpdateWithoutParentAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutComponentsNestedInput
    sourcePart?: SparePartUpdateOneWithoutSourceComponentsNestedInput
    usages?: PartUsageUpdateManyWithoutComponentNestedInput
    replacements?: PartReplacementUpdateManyWithoutOldComponentNestedInput
    transfers?: ComponentTransferUpdateManyWithoutComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUpdateManyWithoutComponentNestedInput
  }

  export type AssetComponentUncheckedUpdateWithoutParentAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId?: StringFieldUpdateOperationsInput | string
    sourcePartId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: PartUsageUncheckedUpdateManyWithoutComponentNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutOldComponentNestedInput
    transfers?: ComponentTransferUncheckedUpdateManyWithoutComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type AssetComponentUncheckedUpdateManyWithoutParentAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId?: StringFieldUpdateOperationsInput | string
    sourcePartId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTransferUpdateWithoutFromAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    component?: AssetComponentUpdateOneRequiredWithoutTransfersNestedInput
    toAsset?: AssetUpdateOneRequiredWithoutTransfersToNestedInput
    transferredBy?: UserUpdateOneRequiredWithoutComponentTransfersNestedInput
  }

  export type ComponentTransferUncheckedUpdateWithoutFromAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: StringFieldUpdateOperationsInput | string
    toAssetId?: StringFieldUpdateOperationsInput | string
    transferredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTransferUncheckedUpdateManyWithoutFromAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: StringFieldUpdateOperationsInput | string
    toAssetId?: StringFieldUpdateOperationsInput | string
    transferredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTransferUpdateWithoutToAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    component?: AssetComponentUpdateOneRequiredWithoutTransfersNestedInput
    fromAsset?: AssetUpdateOneRequiredWithoutTransfersFromNestedInput
    transferredBy?: UserUpdateOneRequiredWithoutComponentTransfersNestedInput
  }

  export type ComponentTransferUncheckedUpdateWithoutToAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: StringFieldUpdateOperationsInput | string
    fromAssetId?: StringFieldUpdateOperationsInput | string
    transferredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTransferUncheckedUpdateManyWithoutToAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: StringFieldUpdateOperationsInput | string
    fromAssetId?: StringFieldUpdateOperationsInput | string
    transferredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutInventoriesNestedInput
    custodian?: UserUpdateOneWithoutCustodiedInventoriesNestedInput
    loans?: InventoryLoanUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: StringFieldUpdateOperationsInput | string
    custodianId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loans?: InventoryLoanUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryTag?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    availableQty?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    minStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    departmentId?: StringFieldUpdateOperationsInput | string
    custodianId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageCreateManyMaintenanceInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    partId: string
    assetId?: string | null
    componentId?: string | null
    usedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartUsageUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    part?: SparePartUpdateOneRequiredWithoutUsagesNestedInput
    asset?: AssetUpdateOneWithoutPartUsagesNestedInput
    component?: AssetComponentUpdateOneWithoutUsagesNestedInput
    usedBy?: UserUpdateOneRequiredWithoutPartUsagesNestedInput
  }

  export type PartUsageUncheckedUpdateWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableStringFieldUpdateOperationsInput | string | null
    usedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageUncheckedUpdateManyWithoutMaintenanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableStringFieldUpdateOperationsInput | string | null
    usedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcurementCreateManyPartInput = {
    id?: string
    procurementNumber: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.ProcurementStatus
    orderedDate?: Date | string
    expectedDate?: Date | string | null
    receivedDate?: Date | string | null
    receivedQuantity?: number | null
    invoiceNumber?: string | null
    notes?: string | null
    vendorId?: string | null
    orderedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartUsageCreateManyPartInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    assetId?: string | null
    componentId?: string | null
    maintenanceId?: string | null
    usedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartReplacementCreateManyNewPartInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    oldPartId?: string | null
    oldComponentId?: string | null
    assetId: string
    performedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartReplacementCreateManyOldPartInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    oldComponentId?: string | null
    newPartId: string
    assetId: string
    performedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewPartRegistrationCreateManyPartInput = {
    id?: string
    registrationNumber: string
    serialNumber?: string | null
    assetTag?: string | null
    status?: $Enums.RegistrationStatus
    registeredDate?: Date | string | null
    notes?: string | null
    assetId?: string | null
    registeredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetComponentCreateManySourcePartInput = {
    id?: string
    name: string
    description?: string | null
    partNumber?: string | null
    serialNumber?: string | null
    brand?: string | null
    model?: string | null
    status?: $Enums.ComponentStatus
    purchaseDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: Date | string | null
    isReplaceable?: boolean
    isTransferable?: boolean
    notes?: string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId: string
    parentAssetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProcurementUpdateWithoutPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutProcurementsNestedInput
    orderedBy?: UserUpdateOneRequiredWithoutProcurementsOrderedNestedInput
  }

  export type ProcurementUncheckedUpdateWithoutPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    orderedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcurementUncheckedUpdateManyWithoutPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    procurementNumber?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumProcurementStatusFieldUpdateOperationsInput | $Enums.ProcurementStatus
    orderedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    orderedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageUpdateWithoutPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneWithoutPartUsagesNestedInput
    component?: AssetComponentUpdateOneWithoutUsagesNestedInput
    maintenance?: MaintenanceRecordUpdateOneWithoutPartUsagesNestedInput
    usedBy?: UserUpdateOneRequiredWithoutPartUsagesNestedInput
  }

  export type PartUsageUncheckedUpdateWithoutPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableStringFieldUpdateOperationsInput | string | null
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    usedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageUncheckedUpdateManyWithoutPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    componentId?: NullableStringFieldUpdateOperationsInput | string | null
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    usedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementUpdateWithoutNewPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldPart?: SparePartUpdateOneWithoutOldReplacementsNestedInput
    oldComponent?: AssetComponentUpdateOneWithoutReplacementsNestedInput
    asset?: AssetUpdateOneRequiredWithoutPartReplacementsNestedInput
    performedBy?: UserUpdateOneWithoutReplacementsPerformedNestedInput
  }

  export type PartReplacementUncheckedUpdateWithoutNewPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    oldPartId?: NullableStringFieldUpdateOperationsInput | string | null
    oldComponentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: StringFieldUpdateOperationsInput | string
    performedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementUncheckedUpdateManyWithoutNewPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    oldPartId?: NullableStringFieldUpdateOperationsInput | string | null
    oldComponentId?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: StringFieldUpdateOperationsInput | string
    performedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementUpdateWithoutOldPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldComponent?: AssetComponentUpdateOneWithoutReplacementsNestedInput
    newPart?: SparePartUpdateOneRequiredWithoutReplacementsNestedInput
    asset?: AssetUpdateOneRequiredWithoutPartReplacementsNestedInput
    performedBy?: UserUpdateOneWithoutReplacementsPerformedNestedInput
  }

  export type PartReplacementUncheckedUpdateWithoutOldPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    oldComponentId?: NullableStringFieldUpdateOperationsInput | string | null
    newPartId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    performedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementUncheckedUpdateManyWithoutOldPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    oldComponentId?: NullableStringFieldUpdateOperationsInput | string | null
    newPartId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    performedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewPartRegistrationUpdateWithoutPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneWithoutPartRegistrationsNestedInput
    registeredBy?: UserUpdateOneRequiredWithoutPartRegistrationsNestedInput
  }

  export type NewPartRegistrationUncheckedUpdateWithoutPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewPartRegistrationUncheckedUpdateManyWithoutPartInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNumber?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    assetTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumRegistrationStatusFieldUpdateOperationsInput | $Enums.RegistrationStatus
    registeredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetComponentUpdateWithoutSourcePartInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutComponentsNestedInput
    parentAsset?: AssetUpdateOneWithoutParentComponentsNestedInput
    usages?: PartUsageUpdateManyWithoutComponentNestedInput
    replacements?: PartReplacementUpdateManyWithoutOldComponentNestedInput
    transfers?: ComponentTransferUpdateManyWithoutComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUpdateManyWithoutComponentNestedInput
  }

  export type AssetComponentUncheckedUpdateWithoutSourcePartInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId?: StringFieldUpdateOperationsInput | string
    parentAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: PartUsageUncheckedUpdateManyWithoutComponentNestedInput
    replacements?: PartReplacementUncheckedUpdateManyWithoutOldComponentNestedInput
    transfers?: ComponentTransferUncheckedUpdateManyWithoutComponentNestedInput
    maintenanceRecords?: ComponentMaintenanceUncheckedUpdateManyWithoutComponentNestedInput
  }

  export type AssetComponentUncheckedUpdateManyWithoutSourcePartInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    partNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    warrantyExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReplaceable?: BoolFieldUpdateOperationsInput | boolean
    isTransferable?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specifications?: NullableJsonNullValueInput | InputJsonValue
    assetId?: StringFieldUpdateOperationsInput | string
    parentAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageCreateManyComponentInput = {
    id?: string
    quantity: number
    usageType?: $Enums.PartUsageType
    usageDate?: Date | string
    notes?: string | null
    partId: string
    assetId?: string | null
    maintenanceId?: string | null
    usedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartReplacementCreateManyOldComponentInput = {
    id?: string
    replacementNumber: string
    reason: string
    status?: $Enums.ReplacementStatus
    plannedDate?: Date | string | null
    completedDate?: Date | string | null
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    oldPartId?: string | null
    newPartId: string
    assetId: string
    performedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentTransferCreateManyComponentInput = {
    id?: string
    transferNumber: string
    reason: string
    transferDate?: Date | string
    notes?: string | null
    fromAssetId: string
    toAssetId: string
    transferredById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComponentMaintenanceCreateManyComponentInput = {
    id?: string
    description: string
    maintenanceType: string
    maintenanceDate?: Date | string
    cost?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    performedById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartUsageUpdateWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    part?: SparePartUpdateOneRequiredWithoutUsagesNestedInput
    asset?: AssetUpdateOneWithoutPartUsagesNestedInput
    maintenance?: MaintenanceRecordUpdateOneWithoutPartUsagesNestedInput
    usedBy?: UserUpdateOneRequiredWithoutPartUsagesNestedInput
  }

  export type PartUsageUncheckedUpdateWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    usedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartUsageUncheckedUpdateManyWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    usageType?: EnumPartUsageTypeFieldUpdateOperationsInput | $Enums.PartUsageType
    usageDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    partId?: StringFieldUpdateOperationsInput | string
    assetId?: NullableStringFieldUpdateOperationsInput | string | null
    maintenanceId?: NullableStringFieldUpdateOperationsInput | string | null
    usedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementUpdateWithoutOldComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldPart?: SparePartUpdateOneWithoutOldReplacementsNestedInput
    newPart?: SparePartUpdateOneRequiredWithoutReplacementsNestedInput
    asset?: AssetUpdateOneRequiredWithoutPartReplacementsNestedInput
    performedBy?: UserUpdateOneWithoutReplacementsPerformedNestedInput
  }

  export type PartReplacementUncheckedUpdateWithoutOldComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    oldPartId?: NullableStringFieldUpdateOperationsInput | string | null
    newPartId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    performedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartReplacementUncheckedUpdateManyWithoutOldComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    replacementNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    status?: EnumReplacementStatusFieldUpdateOperationsInput | $Enums.ReplacementStatus
    plannedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    oldPartId?: NullableStringFieldUpdateOperationsInput | string | null
    newPartId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    performedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTransferUpdateWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromAsset?: AssetUpdateOneRequiredWithoutTransfersFromNestedInput
    toAsset?: AssetUpdateOneRequiredWithoutTransfersToNestedInput
    transferredBy?: UserUpdateOneRequiredWithoutComponentTransfersNestedInput
  }

  export type ComponentTransferUncheckedUpdateWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    fromAssetId?: StringFieldUpdateOperationsInput | string
    toAssetId?: StringFieldUpdateOperationsInput | string
    transferredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentTransferUncheckedUpdateManyWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    transferNumber?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    fromAssetId?: StringFieldUpdateOperationsInput | string
    toAssetId?: StringFieldUpdateOperationsInput | string
    transferredById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentMaintenanceUpdateWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performedBy?: UserUpdateOneRequiredWithoutComponentMaintenanceNestedInput
  }

  export type ComponentMaintenanceUncheckedUpdateWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    performedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComponentMaintenanceUncheckedUpdateManyWithoutComponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maintenanceType?: StringFieldUpdateOperationsInput | string
    maintenanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    performedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryLoanCreateManyInventoryInput = {
    id?: string
    loanNumber: string
    purpose: string
    quantity?: number
    loanDate?: Date | string
    expectedReturnDate: Date | string
    actualReturnDate?: Date | string | null
    status?: string
    condition?: string | null
    notes?: string | null
    approvalNotes?: string | null
    borrowerId: string
    approvedById?: string | null
    responsibleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryLoanUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    borrower?: UserUpdateOneRequiredWithoutBorrowedLoansNestedInput
    approvedBy?: UserUpdateOneWithoutApprovedLoansNestedInput
    responsible?: UserUpdateOneRequiredWithoutResponsibleLoansNestedInput
  }

  export type InventoryLoanUncheckedUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    borrowerId?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryLoanUncheckedUpdateManyWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    loanNumber?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    approvalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    borrowerId?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentCountOutputTypeDefaultArgs instead
     */
    export type DepartmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VendorCountOutputTypeDefaultArgs instead
     */
    export type VendorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VendorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssetCountOutputTypeDefaultArgs instead
     */
    export type AssetCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssetCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MaintenanceRecordCountOutputTypeDefaultArgs instead
     */
    export type MaintenanceRecordCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MaintenanceRecordCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SparePartCountOutputTypeDefaultArgs instead
     */
    export type SparePartCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SparePartCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssetComponentCountOutputTypeDefaultArgs instead
     */
    export type AssetComponentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssetComponentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryCountOutputTypeDefaultArgs instead
     */
    export type InventoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentDefaultArgs instead
     */
    export type DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationDefaultArgs instead
     */
    export type LocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VendorDefaultArgs instead
     */
    export type VendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VendorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssetDefaultArgs instead
     */
    export type AssetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssetRequestDefaultArgs instead
     */
    export type AssetRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssetRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MaintenanceRecordDefaultArgs instead
     */
    export type MaintenanceRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MaintenanceRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MaintenanceContractDefaultArgs instead
     */
    export type MaintenanceContractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MaintenanceContractDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditRecordDefaultArgs instead
     */
    export type AuditRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DisposalRecordDefaultArgs instead
     */
    export type DisposalRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DisposalRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SystemSettingsDefaultArgs instead
     */
    export type SystemSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SystemSettingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SparePartDefaultArgs instead
     */
    export type SparePartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SparePartDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcurementDefaultArgs instead
     */
    export type ProcurementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcurementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartUsageDefaultArgs instead
     */
    export type PartUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartUsageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartReplacementDefaultArgs instead
     */
    export type PartReplacementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartReplacementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewPartRegistrationDefaultArgs instead
     */
    export type NewPartRegistrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NewPartRegistrationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssetComponentDefaultArgs instead
     */
    export type AssetComponentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssetComponentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentTransferDefaultArgs instead
     */
    export type ComponentTransferArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentTransferDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComponentMaintenanceDefaultArgs instead
     */
    export type ComponentMaintenanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComponentMaintenanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryDefaultArgs instead
     */
    export type InventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryLoanDefaultArgs instead
     */
    export type InventoryLoanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryLoanDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}