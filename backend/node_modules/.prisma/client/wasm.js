
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  address: 'address',
  phone: 'phone',
  email: 'email',
  website: 'website',
  logo: 'logo',
  taxNumber: 'taxNumber',
  registrationNumber: 'registrationNumber',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PositionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  level: 'level',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  employeeNumber: 'employeeNumber',
  email: 'email',
  username: 'username',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  dateOfBirth: 'dateOfBirth',
  hireDate: 'hireDate',
  terminationDate: 'terminationDate',
  address: 'address',
  emergencyContact: 'emergencyContact',
  emergencyPhone: 'emergencyPhone',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  departmentId: 'departmentId',
  positionId: 'positionId',
  managerId: 'managerId'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  managerId: 'managerId',
  budgetLimit: 'budgetLimit',
  costCenter: 'costCenter',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  parentDepartmentId: 'parentDepartmentId'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  building: 'building',
  floor: 'floor',
  room: 'room',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  postalCode: 'postalCode',
  capacity: 'capacity',
  type: 'type',
  managerId: 'managerId',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  parentId: 'parentId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  email: 'email',
  phone: 'phone',
  address: 'address',
  contactPerson: 'contactPerson',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  assetTag: 'assetTag',
  name: 'name',
  description: 'description',
  serialNumber: 'serialNumber',
  model: 'model',
  brand: 'brand',
  poNumber: 'poNumber',
  purchaseDate: 'purchaseDate',
  purchasePrice: 'purchasePrice',
  currentValue: 'currentValue',
  warrantyExpiry: 'warrantyExpiry',
  status: 'status',
  condition: 'condition',
  notes: 'notes',
  qrCode: 'qrCode',
  imageUrl: 'imageUrl',
  specifications: 'specifications',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  categoryId: 'categoryId',
  vendorId: 'vendorId',
  locationId: 'locationId',
  departmentId: 'departmentId',
  assignedToId: 'assignedToId'
};

exports.Prisma.AssetRequestScalarFieldEnum = {
  id: 'id',
  requestNumber: 'requestNumber',
  requestType: 'requestType',
  title: 'title',
  description: 'description',
  justification: 'justification',
  priority: 'priority',
  status: 'status',
  requestedDate: 'requestedDate',
  requiredDate: 'requiredDate',
  approvedDate: 'approvedDate',
  allocatedDate: 'allocatedDate',
  completedDate: 'completedDate',
  rejectionReason: 'rejectionReason',
  notes: 'notes',
  estimatedCost: 'estimatedCost',
  actualCost: 'actualCost',
  requesterId: 'requesterId',
  departmentId: 'departmentId',
  companyId: 'companyId',
  assetId: 'assetId',
  approvedById: 'approvedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RequestWorkflowScalarFieldEnum = {
  id: 'id',
  step: 'step',
  stepOrder: 'stepOrder',
  status: 'status',
  comments: 'comments',
  processedDate: 'processedDate',
  requestId: 'requestId',
  processedById: 'processedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RequestAttachmentScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  filePath: 'filePath',
  description: 'description',
  requestId: 'requestId',
  uploadedById: 'uploadedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceRecordScalarFieldEnum = {
  id: 'id',
  maintenanceNumber: 'maintenanceNumber',
  maintenanceType: 'maintenanceType',
  title: 'title',
  description: 'description',
  scheduledDate: 'scheduledDate',
  startedDate: 'startedDate',
  completedDate: 'completedDate',
  status: 'status',
  priority: 'priority',
  estimatedCost: 'estimatedCost',
  actualCost: 'actualCost',
  downtime: 'downtime',
  notes: 'notes',
  workDescription: 'workDescription',
  assetId: 'assetId',
  companyId: 'companyId',
  requestId: 'requestId',
  technicianId: 'technicianId',
  supervisorId: 'supervisorId',
  vendorId: 'vendorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceAttachmentScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  filePath: 'filePath',
  description: 'description',
  attachmentType: 'attachmentType',
  maintenanceId: 'maintenanceId',
  uploadedById: 'uploadedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceContractScalarFieldEnum = {
  id: 'id',
  contractNumber: 'contractNumber',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  cost: 'cost',
  terms: 'terms',
  isActive: 'isActive',
  vendorId: 'vendorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditRecordScalarFieldEnum = {
  id: 'id',
  auditType: 'auditType',
  scheduledDate: 'scheduledDate',
  completedDate: 'completedDate',
  status: 'status',
  findings: 'findings',
  recommendations: 'recommendations',
  assetId: 'assetId',
  auditorId: 'auditorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditTrailScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  description: 'description',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  sessionId: 'sessionId',
  userId: 'userId',
  companyId: 'companyId',
  createdAt: 'createdAt'
};

exports.Prisma.DisposalRecordScalarFieldEnum = {
  id: 'id',
  disposalType: 'disposalType',
  disposalDate: 'disposalDate',
  disposalValue: 'disposalValue',
  reason: 'reason',
  approvalReference: 'approvalReference',
  notes: 'notes',
  assetId: 'assetId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  priority: 'priority',
  isRead: 'isRead',
  actionUrl: 'actionUrl',
  actionLabel: 'actionLabel',
  expiresAt: 'expiresAt',
  metadata: 'metadata',
  userId: 'userId',
  companyId: 'companyId',
  relatedEntityType: 'relatedEntityType',
  relatedEntityId: 'relatedEntityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SparePartScalarFieldEnum = {
  id: 'id',
  partNumber: 'partNumber',
  name: 'name',
  description: 'description',
  brand: 'brand',
  model: 'model',
  category: 'category',
  partType: 'partType',
  status: 'status',
  unitPrice: 'unitPrice',
  stockLevel: 'stockLevel',
  minStockLevel: 'minStockLevel',
  maxStockLevel: 'maxStockLevel',
  reorderPoint: 'reorderPoint',
  storageLocation: 'storageLocation',
  specifications: 'specifications',
  compatibleWith: 'compatibleWith',
  notes: 'notes',
  isActive: 'isActive',
  vendorId: 'vendorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProcurementScalarFieldEnum = {
  id: 'id',
  procurementNumber: 'procurementNumber',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalCost: 'totalCost',
  status: 'status',
  orderedDate: 'orderedDate',
  expectedDate: 'expectedDate',
  receivedDate: 'receivedDate',
  receivedQuantity: 'receivedQuantity',
  invoiceNumber: 'invoiceNumber',
  notes: 'notes',
  partId: 'partId',
  vendorId: 'vendorId',
  orderedById: 'orderedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PartUsageScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  usageType: 'usageType',
  usageDate: 'usageDate',
  notes: 'notes',
  partId: 'partId',
  assetId: 'assetId',
  componentId: 'componentId',
  maintenanceId: 'maintenanceId',
  usedById: 'usedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PartReplacementScalarFieldEnum = {
  id: 'id',
  replacementNumber: 'replacementNumber',
  reason: 'reason',
  status: 'status',
  plannedDate: 'plannedDate',
  completedDate: 'completedDate',
  cost: 'cost',
  notes: 'notes',
  oldPartId: 'oldPartId',
  oldComponentId: 'oldComponentId',
  newPartId: 'newPartId',
  assetId: 'assetId',
  performedById: 'performedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NewPartRegistrationScalarFieldEnum = {
  id: 'id',
  registrationNumber: 'registrationNumber',
  serialNumber: 'serialNumber',
  assetTag: 'assetTag',
  status: 'status',
  registeredDate: 'registeredDate',
  notes: 'notes',
  partId: 'partId',
  assetId: 'assetId',
  registeredById: 'registeredById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssetComponentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  partNumber: 'partNumber',
  serialNumber: 'serialNumber',
  brand: 'brand',
  model: 'model',
  status: 'status',
  purchaseDate: 'purchaseDate',
  purchasePrice: 'purchasePrice',
  warrantyExpiry: 'warrantyExpiry',
  isReplaceable: 'isReplaceable',
  isTransferable: 'isTransferable',
  notes: 'notes',
  specifications: 'specifications',
  assetId: 'assetId',
  parentAssetId: 'parentAssetId',
  sourcePartId: 'sourcePartId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComponentTransferScalarFieldEnum = {
  id: 'id',
  transferNumber: 'transferNumber',
  reason: 'reason',
  transferDate: 'transferDate',
  notes: 'notes',
  componentId: 'componentId',
  fromAssetId: 'fromAssetId',
  toAssetId: 'toAssetId',
  transferredById: 'transferredById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComponentMaintenanceScalarFieldEnum = {
  id: 'id',
  description: 'description',
  maintenanceType: 'maintenanceType',
  maintenanceDate: 'maintenanceDate',
  cost: 'cost',
  notes: 'notes',
  componentId: 'componentId',
  performedById: 'performedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssetTransferScalarFieldEnum = {
  id: 'id',
  transferNumber: 'transferNumber',
  reason: 'reason',
  transferDate: 'transferDate',
  effectiveDate: 'effectiveDate',
  notes: 'notes',
  approvalNotes: 'approvalNotes',
  status: 'status',
  assetId: 'assetId',
  fromLocationId: 'fromLocationId',
  toLocationId: 'toLocationId',
  fromDepartmentId: 'fromDepartmentId',
  toDepartmentId: 'toDepartmentId',
  fromUserId: 'fromUserId',
  toUserId: 'toUserId',
  requestedById: 'requestedById',
  approvedById: 'approvedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssetDepreciationScalarFieldEnum = {
  id: 'id',
  depreciationMethod: 'depreciationMethod',
  usefulLife: 'usefulLife',
  salvageValue: 'salvageValue',
  depreciationRate: 'depreciationRate',
  currentBookValue: 'currentBookValue',
  accumulatedDepreciation: 'accumulatedDepreciation',
  lastCalculatedDate: 'lastCalculatedDate',
  isActive: 'isActive',
  notes: 'notes',
  assetId: 'assetId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepreciationRecordScalarFieldEnum = {
  id: 'id',
  period: 'period',
  depreciationAmount: 'depreciationAmount',
  bookValueBefore: 'bookValueBefore',
  bookValueAfter: 'bookValueAfter',
  calculationDate: 'calculationDate',
  notes: 'notes',
  depreciationId: 'depreciationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  inventoryTag: 'inventoryTag',
  quantity: 'quantity',
  availableQty: 'availableQty',
  condition: 'condition',
  status: 'status',
  location: 'location',
  notes: 'notes',
  minStockLevel: 'minStockLevel',
  assetId: 'assetId',
  departmentId: 'departmentId',
  custodianId: 'custodianId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryLoanScalarFieldEnum = {
  id: 'id',
  loanNumber: 'loanNumber',
  purpose: 'purpose',
  quantity: 'quantity',
  loanDate: 'loanDate',
  expectedReturnDate: 'expectedReturnDate',
  actualReturnDate: 'actualReturnDate',
  status: 'status',
  condition: 'condition',
  notes: 'notes',
  approvalNotes: 'approvalNotes',
  inventoryId: 'inventoryId',
  borrowerId: 'borrowerId',
  approvedById: 'approvedById',
  responsibleId: 'responsibleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SoftwareAssetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  version: 'version',
  publisher: 'publisher',
  description: 'description',
  softwareType: 'softwareType',
  category: 'category',
  systemRequirements: 'systemRequirements',
  installationPath: 'installationPath',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.SoftwareLicenseScalarFieldEnum = {
  id: 'id',
  licenseKey: 'licenseKey',
  licenseType: 'licenseType',
  status: 'status',
  totalSeats: 'totalSeats',
  usedSeats: 'usedSeats',
  availableSeats: 'availableSeats',
  purchaseDate: 'purchaseDate',
  expiryDate: 'expiryDate',
  renewalDate: 'renewalDate',
  purchaseCost: 'purchaseCost',
  renewalCost: 'renewalCost',
  notes: 'notes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  softwareAssetId: 'softwareAssetId',
  vendorId: 'vendorId',
  companyId: 'companyId'
};

exports.Prisma.SoftwareInstallationScalarFieldEnum = {
  id: 'id',
  installationDate: 'installationDate',
  uninstallationDate: 'uninstallationDate',
  status: 'status',
  installationPath: 'installationPath',
  version: 'version',
  notes: 'notes',
  softwareAssetId: 'softwareAssetId',
  licenseId: 'licenseId',
  assetId: 'assetId',
  userId: 'userId',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LicenseRenewalScalarFieldEnum = {
  id: 'id',
  renewalDate: 'renewalDate',
  newExpiryDate: 'newExpiryDate',
  cost: 'cost',
  notes: 'notes',
  licenseId: 'licenseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  ASSET_ADMIN: 'ASSET_ADMIN',
  MANAGER: 'MANAGER',
  DEPARTMENT_USER: 'DEPARTMENT_USER',
  TECHNICIAN: 'TECHNICIAN',
  AUDITOR: 'AUDITOR',
  TOP_MANAGEMENT: 'TOP_MANAGEMENT'
};

exports.LocationType = exports.$Enums.LocationType = {
  OFFICE: 'OFFICE',
  WAREHOUSE: 'WAREHOUSE',
  FACTORY: 'FACTORY',
  RETAIL: 'RETAIL',
  DATA_CENTER: 'DATA_CENTER',
  OTHER: 'OTHER'
};

exports.AssetStatus = exports.$Enums.AssetStatus = {
  AVAILABLE: 'AVAILABLE',
  IN_USE: 'IN_USE',
  MAINTENANCE: 'MAINTENANCE',
  RETIRED: 'RETIRED',
  DISPOSED: 'DISPOSED'
};

exports.RequestType = exports.$Enums.RequestType = {
  ASSET_REQUEST: 'ASSET_REQUEST',
  MAINTENANCE_REQUEST: 'MAINTENANCE_REQUEST',
  SPARE_PART_REQUEST: 'SPARE_PART_REQUEST',
  SOFTWARE_LICENSE: 'SOFTWARE_LICENSE',
  ASSET_TRANSFER: 'ASSET_TRANSFER',
  ASSET_DISPOSAL: 'ASSET_DISPOSAL',
  ASSET_BREAKDOWN: 'ASSET_BREAKDOWN'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ALLOCATED: 'ALLOCATED',
  COMPLETED: 'COMPLETED'
};

exports.MaintenanceType = exports.$Enums.MaintenanceType = {
  PREVENTIVE: 'PREVENTIVE',
  CORRECTIVE: 'CORRECTIVE',
  EMERGENCY: 'EMERGENCY',
  SPARE_PART_REPLACEMENT: 'SPARE_PART_REPLACEMENT',
  SOFTWARE_UPDATE: 'SOFTWARE_UPDATE',
  CALIBRATION: 'CALIBRATION'
};

exports.MaintenanceStatus = exports.$Enums.MaintenanceStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.AuditStatus = exports.$Enums.AuditStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  REQUEST_APPROVAL: 'REQUEST_APPROVAL',
  ASSET_ALLOCATION: 'ASSET_ALLOCATION',
  MAINTENANCE_DUE: 'MAINTENANCE_DUE',
  AUDIT_SCHEDULED: 'AUDIT_SCHEDULED',
  GENERAL: 'GENERAL',
  MAINTENANCE_COMPLETED: 'MAINTENANCE_COMPLETED',
  REQUEST_REJECTED: 'REQUEST_REJECTED',
  ASSET_TRANSFERRED: 'ASSET_TRANSFERRED',
  SOFTWARE_LICENSE_EXPIRING: 'SOFTWARE_LICENSE_EXPIRING',
  SPARE_PART_LOW_STOCK: 'SPARE_PART_LOW_STOCK',
  MAINTENANCE_OVERDUE: 'MAINTENANCE_OVERDUE',
  ASSET_WARRANTY_EXPIRING: 'ASSET_WARRANTY_EXPIRING',
  DECOMPOSITION_COMPLETED: 'DECOMPOSITION_COMPLETED',
  VENDOR_CONTRACT_EXPIRING: 'VENDOR_CONTRACT_EXPIRING'
};

exports.SparePartCategory = exports.$Enums.SparePartCategory = {
  HARDWARE: 'HARDWARE',
  SOFTWARE: 'SOFTWARE',
  ACCESSORY: 'ACCESSORY',
  CONSUMABLE: 'CONSUMABLE'
};

exports.SparePartType = exports.$Enums.SparePartType = {
  COMPONENT: 'COMPONENT',
  ACCESSORY: 'ACCESSORY',
  CONSUMABLE: 'CONSUMABLE',
  TOOL: 'TOOL',
  SOFTWARE: 'SOFTWARE'
};

exports.SparePartStatus = exports.$Enums.SparePartStatus = {
  ACTIVE: 'ACTIVE',
  DISCONTINUED: 'DISCONTINUED',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  OBSOLETE: 'OBSOLETE'
};

exports.ProcurementStatus = exports.$Enums.ProcurementStatus = {
  ORDERED: 'ORDERED',
  SHIPPED: 'SHIPPED',
  RECEIVED: 'RECEIVED',
  PARTIALLY_RECEIVED: 'PARTIALLY_RECEIVED',
  CANCELLED: 'CANCELLED'
};

exports.PartUsageType = exports.$Enums.PartUsageType = {
  REPLACEMENT: 'REPLACEMENT',
  UPGRADE: 'UPGRADE',
  REPAIR: 'REPAIR',
  INSTALLATION: 'INSTALLATION',
  MAINTENANCE: 'MAINTENANCE',
  TRANSFER: 'TRANSFER'
};

exports.ReplacementStatus = exports.$Enums.ReplacementStatus = {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.RegistrationStatus = exports.$Enums.RegistrationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REGISTERED: 'REGISTERED',
  REJECTED: 'REJECTED'
};

exports.ComponentStatus = exports.$Enums.ComponentStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  TRANSFERRED: 'TRANSFERRED',
  REPLACED: 'REPLACED',
  DISPOSED: 'DISPOSED'
};

exports.SoftwareType = exports.$Enums.SoftwareType = {
  OPERATING_SYSTEM: 'OPERATING_SYSTEM',
  APPLICATION: 'APPLICATION',
  UTILITY: 'UTILITY',
  DRIVER: 'DRIVER',
  SECURITY: 'SECURITY',
  DEVELOPMENT_TOOL: 'DEVELOPMENT_TOOL',
  OFFICE_SUITE: 'OFFICE_SUITE',
  DATABASE: 'DATABASE',
  MIDDLEWARE: 'MIDDLEWARE',
  PLUGIN: 'PLUGIN'
};

exports.LicenseType = exports.$Enums.LicenseType = {
  PERPETUAL: 'PERPETUAL',
  SUBSCRIPTION: 'SUBSCRIPTION',
  OPEN_SOURCE: 'OPEN_SOURCE',
  TRIAL: 'TRIAL',
  EDUCATIONAL: 'EDUCATIONAL',
  ENTERPRISE: 'ENTERPRISE',
  OEM: 'OEM',
  VOLUME: 'VOLUME'
};

exports.LicenseStatus = exports.$Enums.LicenseStatus = {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  SUSPENDED: 'SUSPENDED',
  CANCELLED: 'CANCELLED',
  PENDING_RENEWAL: 'PENDING_RENEWAL',
  VIOLATION: 'VIOLATION'
};

exports.Prisma.ModelName = {
  Company: 'Company',
  Position: 'Position',
  User: 'User',
  Department: 'Department',
  Location: 'Location',
  Category: 'Category',
  Vendor: 'Vendor',
  Asset: 'Asset',
  AssetRequest: 'AssetRequest',
  RequestWorkflow: 'RequestWorkflow',
  RequestAttachment: 'RequestAttachment',
  MaintenanceRecord: 'MaintenanceRecord',
  MaintenanceAttachment: 'MaintenanceAttachment',
  MaintenanceContract: 'MaintenanceContract',
  AuditRecord: 'AuditRecord',
  AuditTrail: 'AuditTrail',
  DisposalRecord: 'DisposalRecord',
  Notification: 'Notification',
  SystemSettings: 'SystemSettings',
  SparePart: 'SparePart',
  Procurement: 'Procurement',
  PartUsage: 'PartUsage',
  PartReplacement: 'PartReplacement',
  NewPartRegistration: 'NewPartRegistration',
  AssetComponent: 'AssetComponent',
  ComponentTransfer: 'ComponentTransfer',
  ComponentMaintenance: 'ComponentMaintenance',
  AssetTransfer: 'AssetTransfer',
  AssetDepreciation: 'AssetDepreciation',
  DepreciationRecord: 'DepreciationRecord',
  Inventory: 'Inventory',
  InventoryLoan: 'InventoryLoan',
  SoftwareAsset: 'SoftwareAsset',
  SoftwareLicense: 'SoftwareLicense',
  SoftwareInstallation: 'SoftwareInstallation',
  LicenseRenewal: 'LicenseRenewal'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
